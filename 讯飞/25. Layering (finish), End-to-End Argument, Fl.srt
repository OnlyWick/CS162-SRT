1
00:00:09,440 --> 00:00:10,280
Hello, everyone.

2
00:00:10,890 --> 00:00:14,820
So today we have quite a bit to cover. 

3
00:00:16,610 --> 00:00:20,880
In particular, we are going to finish layering another king.

4
00:00:22,040 --> 00:00:23,790
What we started last time. 

5
00:00:24,280 --> 00:00:26,830
Then we are going to talk about end to end argument, 

6
00:00:26,840 --> 00:00:30,710
and we are going to then start the discussion on flow control. 

7
00:00:32,420 --> 00:00:34,660
So larry, so if you remember,

8
00:00:34,670 --> 00:00:38,160
she just recap from the last time, 

9
00:00:39,490 --> 00:00:48,190
there are a few layers in the network has another king stack, 

10
00:00:48,200 --> 00:00:49,350
has a few layers. 

11
00:00:51,070 --> 00:00:53,220
In the internet, you have five layers.

12
00:00:53,760 --> 00:00:56,340
The first layer at the bottom is physical layer. 

13
00:00:56,880 --> 00:01:05,570
And the role of the physical layer is to send the signal between two machines, 

14
00:01:05,890 --> 00:01:09,470
which are connected to the same transmission medium. 

15
00:01:10,850 --> 00:01:19,290
And the service is to move the information from one machine to another. 

16
00:01:21,090 --> 00:01:25,680
The interface is about how to send and receive bids. 

17
00:01:27,060 --> 00:01:29,850
The protocol is about how these beats are encoding. 

18
00:01:32,490 --> 00:01:37,560
It's like based on the voltage duration of each bit frequency. 

19
00:01:38,340 --> 00:01:43,100
It's again, depending whether we are using the across your cable,

20
00:01:43,110 --> 00:01:44,440
optical fiber, 

21
00:01:46,310 --> 00:01:49,800
the wifi, 

22
00:01:50,730 --> 00:01:51,520
and so forth. 

23
00:02:00,360 --> 00:02:03,040
The second layer is data link layer. 

24
00:02:03,370 --> 00:02:06,940
Also, we discussed a little bit about it last time.

25
00:02:09,970 --> 00:02:13,860
The data link layer enables the host, 

26
00:02:14,550 --> 00:02:19,800
which are on the same physical connected, 

27
00:02:19,810 --> 00:02:29,260
the same physical network to exchange messages or atomic messages. 

28
00:02:30,300 --> 00:02:35,510
Basically, the physical layer sends beats zero.

29
00:02:35,520 --> 00:02:37,880
And once here, 

30
00:02:38,190 --> 00:02:41,090
we send packets. 

31
00:02:41,100 --> 00:02:42,130
We send messages. 

32
00:02:43,350 --> 00:02:44,900
Also, they are called frames.

33
00:02:46,310 --> 00:02:49,040
And what are the services here? 

34
00:02:49,410 --> 00:02:54,040
It's one it's about because you can have here multiple machines, 

35
00:02:54,500 --> 00:02:56,470
which are connected, 

36
00:02:56,780 --> 00:02:58,720
may be on the cell physical line, 

37
00:02:58,730 --> 00:03:02,480
or in the same wireless or the same wireless link. 

38
00:03:02,850 --> 00:03:05,890
There are multiple machines which can send data at the same time. 

39
00:03:06,310 --> 00:03:15,430
So somehow you need to arbitrate to make sure that multiple senders

40
00:03:15,440 --> 00:03:16,230
do not call you. 

41
00:03:16,720 --> 00:03:22,960
This is very much like in a room in which everyone talk and talk with everyone. 

42
00:03:23,410 --> 00:03:29,580
There has to be some kind of protocol so that not everyone stuck

43
00:03:29,590 --> 00:03:30,540
at the same time. 

44
00:03:30,550 --> 00:03:34,280
So people can understand each others. 

45
00:03:35,370 --> 00:03:41,120
The interface is about how to send the frames to as over from one machine

46
00:03:41,130 --> 00:03:42,980
to one horse to another horse. 

47
00:03:43,700 --> 00:03:49,980
And they also includes each frame includes an address, 

48
00:03:50,500 --> 00:03:54,160
because this is how i'm going to indicate that I am going to send

49
00:03:54,540 --> 00:03:59,680
a particular frame to a particular host is a list by destination address. 

50
00:04:01,010 --> 00:04:03,520
These addresses are the mac address, 

51
00:04:03,530 --> 00:04:09,620
is a media access or so called addresses or data link addresses. 

52
00:04:09,960 --> 00:04:11,960
And these are the ones, if you remember,

53
00:04:11,970 --> 00:04:13,120
from last time, 

54
00:04:13,500 --> 00:04:15,320
there are 48 beats, 

55
00:04:15,330 --> 00:04:23,090
and they are chosen by is a network card vendor. 

56
00:04:23,490 --> 00:04:24,630
So on that card, 

57
00:04:25,180 --> 00:04:33,170
it's you create another card or you

58
00:04:33,180 --> 00:04:36,800
also associate address to it. 

59
00:04:38,840 --> 00:04:42,110
And the protocol it's about like we discussed about how you

60
00:04:42,120 --> 00:04:47,220
are going to arbitrate the access like to this shared communication

61
00:04:47,230 --> 00:04:47,580
media. 

62
00:04:51,160 --> 00:04:51,600
Okay? 

63
00:04:52,730 --> 00:04:55,920
Each frame contains a source and a destination address. 

64
00:04:56,350 --> 00:04:58,460
Each of them, again, is 48 bits.

65
00:05:00,850 --> 00:05:04,950
And obviously, 

66
00:05:08,250 --> 00:05:08,750
this beats, 

67
00:05:09,930 --> 00:05:11,480
this addresses are unique. 

68
00:05:13,110 --> 00:05:15,730
Every network has a unique address. 

69
00:05:19,180 --> 00:05:20,970
You can also see these addresses, 

70
00:05:20,980 --> 00:05:22,290
like we discussed last time. 

71
00:05:22,300 --> 00:05:26,570
If you do ip configuring windows or if configuring linux, 

72
00:05:27,240 --> 00:05:30,840
here you can see these physical addresses is called, 

73
00:05:31,460 --> 00:05:33,190
and this has 48 bits. 

74
00:05:33,200 --> 00:05:33,830
You see. 

75
00:05:34,220 --> 00:05:36,820
123456. 

76
00:05:37,190 --> 00:05:40,470
And each of these groups has it in hexa. 

77
00:05:41,820 --> 00:05:43,170
You have two digits, 

78
00:05:43,600 --> 00:05:45,850
and you have four beats for each digit. 

79
00:05:46,060 --> 00:05:46,650
You have, 

80
00:05:48,270 --> 00:05:50,680
in total, you have 48 weeks.

81
00:05:54,080 --> 00:05:57,190
Remember that the machine can have multiple network cards. 

82
00:05:57,740 --> 00:06:00,010
So in this case, that's how you are going to see.

83
00:06:00,020 --> 00:06:02,050
In two physical addresses. 

84
00:06:02,060 --> 00:06:04,210
In this case, one for the internet,

85
00:06:04,630 --> 00:06:07,350
for the wire network, and one for the wireless network.

86
00:06:11,590 --> 00:06:12,480
Any questions? 

87
00:06:23,680 --> 00:06:30,370
So when I said that these hosts are connected with the same communication media, 

88
00:06:30,630 --> 00:06:32,960
typically as a data link layer, this kind of metal,

89
00:06:32,970 --> 00:06:37,280
the sharon at or two is a hostile connect again or communicate

90
00:06:37,290 --> 00:06:40,420
with each other is called land local area. 

91
00:06:41,980 --> 00:06:42,330
Network. 

92
00:06:42,340 --> 00:06:46,820
And it's again examples are in a wireless network. 

93
00:06:46,830 --> 00:06:51,750
It's all laptops in a starbucks affair, 

94
00:06:53,750 --> 00:06:54,870
all for instance, 

95
00:06:54,880 --> 00:06:57,670
devices in your home or in your office. 

96
00:07:00,230 --> 00:07:07,660
But this is a the key is that on all the devices connected with the same line, 

97
00:07:08,370 --> 00:07:09,770
can communicate with each other. 

98
00:07:09,780 --> 00:07:13,650
So you can think about this as a broadcast channel, a shared channel.

99
00:07:15,190 --> 00:07:19,020
This also means that when you send a packet or a frame, 

100
00:07:19,600 --> 00:07:22,170
that frame is going to be delivered to everyone. 

101
00:07:22,450 --> 00:07:23,930
It's again like in the room, 

102
00:07:24,340 --> 00:07:26,640
when you say something loud enough, 

103
00:07:26,890 --> 00:07:28,170
everyone can hear. 

104
00:07:29,750 --> 00:07:30,080
Okay? 

105
00:07:30,870 --> 00:07:34,510
But now the obvious question is that if I want to send a frame

106
00:07:34,850 --> 00:07:38,550
to one particular post, 

107
00:07:39,160 --> 00:07:40,400
then how do I do it? 

108
00:07:40,740 --> 00:07:42,060
And obviously, 

109
00:07:42,070 --> 00:07:46,120
the answer here is that by indicating the destination address

110
00:07:46,130 --> 00:07:48,420
of the recipient in the frame, 

111
00:07:49,520 --> 00:07:50,670
in this example, 

112
00:07:51,000 --> 00:07:52,210
if I am going to send, 

113
00:07:52,220 --> 00:07:58,130
I want to send to ba wants to send a frame to b is going to put the address

114
00:08:00,300 --> 00:08:03,290
or to be in the frame as a destination address. 

115
00:08:04,040 --> 00:08:07,100
Now, because this is a broadcast,

116
00:08:07,620 --> 00:08:09,500
the line is a broadcast channel. 

117
00:08:09,510 --> 00:08:13,430
This packet will be delivered to every host in the network. 

118
00:08:14,590 --> 00:08:15,390
However, 

119
00:08:16,000 --> 00:08:23,770
each host can check whether the data frames are intended to itself by checking

120
00:08:23,780 --> 00:08:30,240
its own mac address against the destination address in the frame. 

121
00:08:31,530 --> 00:08:32,840
If they are the same, 

122
00:08:32,850 --> 00:08:34,600
then it accepts a packet, 

123
00:08:34,610 --> 00:08:36,280
otherwise it drops back. 

124
00:08:38,130 --> 00:08:38,860
Any questions? 

125
00:08:40,400 --> 00:08:42,320
It's like in our examples. 

126
00:08:42,610 --> 00:08:46,320
If you are going to speak loudly and everyone can hear, 

127
00:08:46,330 --> 00:08:47,800
if you want to, 

128
00:08:48,410 --> 00:08:51,690
say, address to your friend,

129
00:08:52,010 --> 00:08:55,290
john, you basically say, hey, john,

130
00:08:55,590 --> 00:08:58,680
and then you are going to say whatever you have to say. 

131
00:08:59,410 --> 00:08:59,680
Right? 

132
00:09:00,380 --> 00:09:01,420
And by that, 

133
00:09:01,640 --> 00:09:03,530
this means that journal pay attention, 

134
00:09:03,540 --> 00:09:07,850
and maybe the other people do not pay attention because that message is

135
00:09:07,860 --> 00:09:08,650
not intelligent. 

136
00:09:14,480 --> 00:09:16,150
Now, the land can be larger,

137
00:09:16,160 --> 00:09:19,510
can include multiple hundreds of machines. 

138
00:09:20,510 --> 00:09:24,580
When includes hundreds of machines or a large number of larger number of machines, 

139
00:09:24,670 --> 00:09:26,860
typically they are connected by switches. 

140
00:09:27,270 --> 00:09:29,110
Switches are a little more intelligent. 

141
00:09:29,780 --> 00:09:31,480
And so basically, 

142
00:09:31,490 --> 00:09:34,600
switches are doing some pruning of the messages. 

143
00:09:34,850 --> 00:09:36,230
So if I switch, 

144
00:09:37,490 --> 00:09:44,940
get some message is it's and that is the horse is not behind. 

145
00:09:44,950 --> 00:09:52,390
One of its connections is not going to send that frame on that connection. 

146
00:09:52,640 --> 00:09:54,510
In this particular case, for instance,

147
00:09:54,520 --> 00:09:56,670
when b arrives at the switch, 

148
00:09:57,150 --> 00:10:06,280
the switch will directly send to be is not going to deliver to bnc it's a feature. 

149
00:10:06,290 --> 00:10:07,240
It's more efficient. 

150
00:10:07,570 --> 00:10:09,170
But I can that's why the switches are. 

151
00:10:09,180 --> 00:10:11,410
In general when you have a lot of machines, 

152
00:10:11,630 --> 00:10:16,130
what is very inefficient for that frame to be sent to add to reach everyone? 

153
00:10:19,330 --> 00:10:20,160
Questions? 

154
00:10:22,020 --> 00:10:24,370
How can we ensure mac addresses are unique? 

155
00:10:24,380 --> 00:10:26,130
This is excellent question. 

156
00:10:27,240 --> 00:10:31,980
Typically, every network vendor,

157
00:10:32,370 --> 00:10:35,460
it's assigned a block of mac addresses. 

158
00:10:36,560 --> 00:10:43,930
And he that vendor can only associate the mac

159
00:10:43,940 --> 00:10:46,940
addresses in his blog to all the network, 

160
00:10:48,770 --> 00:10:51,000
to all the network cards it produces. 

161
00:10:51,850 --> 00:10:52,210
That's ha. 

162
00:10:56,400 --> 00:10:57,550
No news. 

163
00:10:59,260 --> 00:11:02,820
So another great question is this where security concerns come in? 

164
00:11:02,830 --> 00:11:07,390
Can a horse who has a packet is not addressed to still read the message? 

165
00:11:07,880 --> 00:11:08,510
Yes. 

166
00:11:08,730 --> 00:11:09,550
It's an opec. 

167
00:11:09,920 --> 00:11:14,380
That's why you are told that when you are going to be in, 

168
00:11:14,930 --> 00:11:17,170
a starter started by scofield, 

169
00:11:18,720 --> 00:11:21,590
what you are going to be, you are told, right?

170
00:11:22,040 --> 00:11:23,190
You need to use encryption. 

171
00:11:23,560 --> 00:11:24,930
Why do you want to use encryption? 

172
00:11:24,940 --> 00:11:28,330
Because you don't want just someone to snoop on your own snoopy

173
00:11:28,340 --> 00:11:34,320
on your packets and read everything what you send or receive. 

174
00:11:36,530 --> 00:11:37,350
Great questions. 

175
00:11:42,130 --> 00:11:44,160
Michael, here is another great question.

176
00:11:44,170 --> 00:11:49,000
How does the switch now that mac address of b does a device declare

177
00:11:50,140 --> 00:11:52,870
its address open connecting to a new media? 

178
00:11:54,130 --> 00:12:01,160
There is a special protocol by which the devices connect, 

179
00:12:01,720 --> 00:12:05,100
and then they advertise their address, the switch.

180
00:12:07,090 --> 00:12:08,010
Excellent questions. 

181
00:12:10,650 --> 00:12:11,800
Please keep them coming. 

182
00:12:16,820 --> 00:12:18,410
Now, one of our problem is, again,

183
00:12:18,420 --> 00:12:19,810
now let's think about, again,

184
00:12:19,820 --> 00:12:20,850
these broadcast media, 

185
00:12:20,860 --> 00:12:22,530
because even with a switch, 

186
00:12:22,820 --> 00:12:23,910
with a switch here, 

187
00:12:23,920 --> 00:12:25,580
we are simplifying it, 

188
00:12:25,590 --> 00:12:28,740
but behind each of this output of the switch, 

189
00:12:29,610 --> 00:12:31,040
there are many hosts. 

190
00:12:31,050 --> 00:12:33,560
It's not only one host still there. 

191
00:12:34,050 --> 00:12:36,560
You still have in by this, 

192
00:12:36,570 --> 00:12:38,000
that almost by definition, 

193
00:12:38,010 --> 00:12:39,080
in a land, 

194
00:12:39,270 --> 00:12:46,560
you have multiple hosts being able to send and receive packets at the same time. 

195
00:12:47,760 --> 00:12:50,000
And when you have multiple people, say,

196
00:12:50,570 --> 00:12:54,200
sorry, multiple hosts sending being able to send back at the same time,

197
00:12:54,210 --> 00:12:58,890
you need to somehow make sure they don't collide. 

198
00:13:00,070 --> 00:13:00,370
Right? 

199
00:13:01,310 --> 00:13:03,770
And there are three solutions, 

200
00:13:04,190 --> 00:13:06,260
a channel partition, taking turns,

201
00:13:06,270 --> 00:13:07,540
and random access. 

202
00:13:08,180 --> 00:13:12,170
Channel partition is basically think about you have different frequencies. 

203
00:13:13,860 --> 00:13:16,030
This is 11 typical example. 

204
00:13:17,210 --> 00:13:19,560
What you do is frequency division multiplex. 

205
00:13:19,570 --> 00:13:21,590
You have a band of frequency, 

206
00:13:21,600 --> 00:13:25,390
and you are going to split that band in different kinds of frequencies. 

207
00:13:25,670 --> 00:13:30,900
And then you allocate one of these frequency to a different host. 

208
00:13:31,340 --> 00:13:34,210
And each host can only send on that frequency. 

209
00:13:35,060 --> 00:13:37,160
And you can listen for multiple frequencies, 

210
00:13:37,170 --> 00:13:40,940
so you can get the packers from on any frequency. 

211
00:13:41,760 --> 00:13:42,090
Right? 

212
00:13:43,580 --> 00:13:46,330
Now, what are the advantage of that?

213
00:13:46,700 --> 00:13:47,540
Is simple. 

214
00:13:47,970 --> 00:13:48,920
It's pretty clear. 

215
00:13:48,930 --> 00:13:51,750
It provides also some isolation. 

216
00:13:52,150 --> 00:13:53,410
You have your own frequency. 

217
00:13:53,420 --> 00:13:57,050
You don't care about the other people you can send on your own frequency. 

218
00:13:58,520 --> 00:14:00,090
You don't care about other costs. 

219
00:14:02,640 --> 00:14:03,590
It's a pretty efficient. 

220
00:14:03,600 --> 00:14:04,790
One is very high load. 

221
00:14:05,320 --> 00:14:06,750
When the load is small, 

222
00:14:06,760 --> 00:14:08,310
then it's very inefficient. 

223
00:14:08,320 --> 00:14:11,030
Because from if all, for instance,

224
00:14:11,310 --> 00:14:16,530
you have only one host sending to another host, right?

225
00:14:17,060 --> 00:14:19,450
Out of 100 hostels there. 

226
00:14:19,770 --> 00:14:22,290
Then you can use only one, 

227
00:14:23,940 --> 00:14:27,360
1% of the entire frequency range, 

228
00:14:28,520 --> 00:14:30,300
the ones that frequency, 

229
00:14:30,310 --> 00:14:33,500
which is allocated with that particular host itself, 

230
00:14:34,400 --> 00:14:36,190
while the other one are not yours. 

231
00:14:36,730 --> 00:14:37,400
Ideally, 

232
00:14:37,730 --> 00:14:42,080
what you would like is that of the only two machine to host or communicate

233
00:14:42,090 --> 00:14:42,840
with each other, 

234
00:14:42,960 --> 00:14:45,430
you should and none of the others send data. 

235
00:14:45,440 --> 00:14:49,530
You should these two holes should be able to use the entire frequency range. 

236
00:14:52,000 --> 00:14:54,350
The other one is pretty similar, 

237
00:14:54,360 --> 00:14:56,670
but this is resource, 

238
00:14:57,680 --> 00:14:59,790
but instead of dividing the frequencies, 

239
00:15:00,030 --> 00:15:01,030
it divides a time. 

240
00:15:01,560 --> 00:15:02,730
So basically, here,

241
00:15:02,740 --> 00:15:05,690
it's you have imagine that you have a talk. 

242
00:15:05,700 --> 00:15:07,410
A talking is a special budget. 

243
00:15:08,050 --> 00:15:10,510
And the stock on is going. 

244
00:15:10,520 --> 00:15:11,350
And again, 

245
00:15:11,960 --> 00:15:16,770
you can think about that hosts are organized in a logical drink. 

246
00:15:16,980 --> 00:15:18,110
For instance, okay,

247
00:15:19,210 --> 00:15:25,220
then this stock and goes from horse to horse around the ring. 

248
00:15:26,450 --> 00:15:31,080
Now, you can send data only while when you have the top,

249
00:15:31,990 --> 00:15:33,530
if you have data to send, 

250
00:15:34,150 --> 00:15:35,180
but you don't have the token. 

251
00:15:35,190 --> 00:15:36,700
You need to wait to receive the token. 

252
00:15:37,510 --> 00:15:41,360
So again, because it's only one post has a token at a given time.

253
00:15:41,590 --> 00:15:44,940
You are sure you are ensuring that there is no collision, 

254
00:15:45,250 --> 00:15:48,740
because only one horse can send up a given time. 

255
00:15:49,210 --> 00:15:52,230
Again, you have the same kind of a little bit issues.

256
00:15:52,490 --> 00:15:55,630
When everyone has things to send is working great, 

257
00:15:55,640 --> 00:15:57,530
because you get a token, 

258
00:15:57,540 --> 00:15:58,670
you already have, 

259
00:16:00,290 --> 00:16:02,120
you send data, you have to send data.

260
00:16:03,020 --> 00:16:04,580
If only two hosts, 

261
00:16:04,930 --> 00:16:07,450
one host has to send data to another host, 

262
00:16:07,800 --> 00:16:09,090
then it's more problematic, 

263
00:16:09,600 --> 00:16:16,820
because you need to wait for every other host around the ring to get. 

264
00:16:16,830 --> 00:16:20,420
There is and send out the token before you can send the next packet. 

265
00:16:20,970 --> 00:16:22,350
It's kind of an overhead, 

266
00:16:22,360 --> 00:16:24,700
just waiting for this token, 

267
00:16:24,710 --> 00:16:25,780
to go around, 

268
00:16:26,090 --> 00:16:28,760
just for each host to pass it, 

269
00:16:28,970 --> 00:16:32,270
who doesn't have anything to send just to pass it to another, 

270
00:16:32,280 --> 00:16:32,950
the next force. 

271
00:16:33,240 --> 00:16:34,510
They just pure overhead, 

272
00:16:35,320 --> 00:16:40,660
which reduces the efficiency of this protocol. 

273
00:16:43,130 --> 00:16:44,290
And finally, 

274
00:16:47,680 --> 00:16:49,770
it's random axis. 

275
00:16:50,700 --> 00:16:52,780
It's also its carrier sense. 

276
00:16:52,790 --> 00:16:58,630
Collision detection is called csma this is infinite. 

277
00:16:58,930 --> 00:17:05,290
If you heard, this is probably the most popular data link layer technology.

278
00:17:06,130 --> 00:17:06,410
Right? 

279
00:17:08,430 --> 00:17:10,980
And a form of this is also you have for wireless. 

280
00:17:11,640 --> 00:17:16,010
But here this is exactly to better understand it. 

281
00:17:16,370 --> 00:17:17,620
Imagine, again,

282
00:17:17,630 --> 00:17:24,450
there is a room full of people and they are talking right. 

283
00:17:27,600 --> 00:17:28,950
Now, imagine that again,

284
00:17:28,960 --> 00:17:29,970
everyone hears everyone. 

285
00:17:29,980 --> 00:17:32,010
So the room is small enough. 

286
00:17:33,640 --> 00:17:35,010
So what do you do? 

287
00:17:35,020 --> 00:17:35,530
Right? 

288
00:17:35,920 --> 00:17:36,870
First of all, 

289
00:17:37,590 --> 00:17:38,660
before you speak, 

290
00:17:38,970 --> 00:17:40,200
you listen a little bit, right?

291
00:17:40,210 --> 00:17:41,280
This is scarier sense. 

292
00:17:41,290 --> 00:17:43,160
You listen that it's a pause. 

293
00:17:43,170 --> 00:17:44,440
No one else is talking. 

294
00:17:45,500 --> 00:17:45,890
Right? 

295
00:17:47,300 --> 00:17:48,930
You also don't interrupt, right?

296
00:17:48,940 --> 00:17:49,370
Someone. 

297
00:17:49,380 --> 00:17:51,250
So if someone is though is talking, 

298
00:17:51,510 --> 00:17:53,900
you wait for that person to finish before you start that. 

299
00:17:54,370 --> 00:17:55,280
This is for life. 

300
00:17:55,740 --> 00:17:57,540
This is scary of sense, right?

301
00:17:57,890 --> 00:17:59,740
Someone is the medium. 

302
00:17:59,750 --> 00:18:02,740
It's busy because there are some packets being sent out. 

303
00:18:04,250 --> 00:18:10,980
Then you wait for a pause for the media to be idol. 

304
00:18:11,260 --> 00:18:11,820
Before it. 

305
00:18:11,950 --> 00:18:16,320
You said this is not enough to avoid the collisions, 

306
00:18:16,330 --> 00:18:20,370
because more many people may have like in our analogy, 

307
00:18:21,660 --> 00:18:23,170
As a room analogy. 

308
00:18:23,410 --> 00:18:27,970
Multiple people may wait for the current speaker to finish to say something, 

309
00:18:29,520 --> 00:18:34,440
sometimes happens that people can start to people to start talking

310
00:18:34,450 --> 00:18:35,280
at the same time. 

311
00:18:35,510 --> 00:18:37,540
Now, that's a collision the same here.

312
00:18:38,420 --> 00:18:40,800
When the media is either to horse, 

313
00:18:41,070 --> 00:18:43,060
are going to send back at the same time, 

314
00:18:43,070 --> 00:18:44,500
these factors are going to collide. 

315
00:18:45,720 --> 00:18:45,980
Right? 

316
00:18:45,990 --> 00:18:46,900
What do you do that? 

317
00:18:47,230 --> 00:18:48,920
It's again, assuming that you are polite,

318
00:18:48,930 --> 00:18:52,880
you are most people who like start talking at the same time. 

319
00:18:53,170 --> 00:18:54,860
This when they stop, 

320
00:18:55,590 --> 00:18:55,870
right? 

321
00:18:57,040 --> 00:18:59,860
They stopped for a while and then try again. 

322
00:19:00,210 --> 00:19:00,650
Right? 

323
00:19:01,320 --> 00:19:03,390
Sometimes again, 

324
00:19:03,400 --> 00:19:04,430
it's like, 

325
00:19:04,910 --> 00:19:05,670
as you probably, 

326
00:19:05,920 --> 00:19:10,030
i'm sure you witness that two people start at the same time stop and then again, 

327
00:19:10,040 --> 00:19:11,080
start at the same time. 

328
00:19:11,570 --> 00:19:15,820
So we want to avoid that here in the design of this protocol. 

329
00:19:15,830 --> 00:19:17,500
And how do you design it? 

330
00:19:17,730 --> 00:19:19,540
Each of the parties, each of the hosts,

331
00:19:19,820 --> 00:19:20,990
if there is a collision, 

332
00:19:21,800 --> 00:19:23,200
waits for a random amount of time. 

333
00:19:23,790 --> 00:19:25,580
If you wait for a random amount of time, 

334
00:19:25,590 --> 00:19:27,940
the probability of collision, again, colliding again,

335
00:19:27,950 --> 00:19:29,490
is lower. 

336
00:19:29,820 --> 00:19:30,910
This is pretty much it. 

337
00:19:31,900 --> 00:19:32,190
Right? 

338
00:19:32,750 --> 00:19:34,010
And it's very simple. 

339
00:19:34,020 --> 00:19:35,330
It decentralized. 

340
00:19:36,890 --> 00:19:38,680
It works pretty well. 

341
00:19:39,540 --> 00:19:39,980
In practice, 

342
00:19:40,970 --> 00:19:42,110
it's beautiful protocol. 

343
00:19:46,770 --> 00:19:47,640
Any questions? 

344
00:19:51,670 --> 00:19:56,140
It's again the token you can assume this is again like this protocol, 

345
00:19:56,150 --> 00:20:02,470
the cmic csmacd it's like think about always like the protocol, 

346
00:20:02,480 --> 00:20:07,200
people who use polite people who used in a room or speaking with each other. 

347
00:20:09,620 --> 00:20:11,960
This token protocol, 

348
00:20:12,340 --> 00:20:13,980
I will discuss in the previous slide, 

349
00:20:13,990 --> 00:20:15,020
the taking turns. 

350
00:20:15,310 --> 00:20:19,860
You can imagine it's like only people who have the mic are going to talk. 

351
00:20:20,310 --> 00:20:20,590
Right? 

352
00:20:20,920 --> 00:20:23,790
When you ask questions like a conference and so forth. 

353
00:20:24,240 --> 00:20:25,900
When you ask questions, there is a mic.

354
00:20:26,960 --> 00:20:28,270
If there is only one mic, 

355
00:20:28,280 --> 00:20:34,680
only someone is going to hand the mic is a person who has who can tell who

356
00:20:34,690 --> 00:20:36,030
wants to ask a question, 

357
00:20:36,310 --> 00:20:38,490
but only the person who has a mic. 

358
00:20:38,500 --> 00:20:39,250
And as a question. 

359
00:20:39,260 --> 00:20:40,290
So there are no apologies. 

360
00:20:42,060 --> 00:20:42,970
So let's see. 

361
00:20:47,410 --> 00:20:50,560
Why would I want allison has this question? 

362
00:20:50,930 --> 00:20:53,480
Why would I want my computer to play fair? 

363
00:20:53,490 --> 00:20:56,960
Can I configure my computer to just shoot over everyone? 

364
00:20:57,330 --> 00:20:58,500
So then it will be faster. 

365
00:20:58,510 --> 00:21:01,950
I think that's a good point. 

366
00:21:01,960 --> 00:21:03,310
The problem, though,

367
00:21:03,610 --> 00:21:06,950
is that if everyone is doing the same or even, 

368
00:21:07,650 --> 00:21:09,500
other people don't do exactly the same, 

369
00:21:09,950 --> 00:21:11,190
you are going to have collisions. 

370
00:21:11,200 --> 00:21:14,410
And if you have collisions, you have garbage, you cannot be hurt.

371
00:21:15,370 --> 00:21:16,000
That's a problem. 

372
00:21:17,160 --> 00:21:17,570
Right? 

373
00:21:17,850 --> 00:21:19,170
You cannot, in some sense,

374
00:21:19,180 --> 00:21:22,650
you cannot increase the intensity of your signal. 

375
00:21:22,660 --> 00:21:24,010
So probably in this case, 

376
00:21:24,020 --> 00:21:27,260
you don't have the ability to increase that kind of intensity. 

377
00:21:27,270 --> 00:21:28,500
Like in practice, 

378
00:21:28,510 --> 00:21:30,360
maybe you are going to yell. 

379
00:21:33,780 --> 00:21:35,900
Your voice will be stronger than anyone else, 

380
00:21:35,910 --> 00:21:38,740
but here everyone is on the level playing field. 

381
00:21:38,920 --> 00:21:43,490
The same you can send only beats the same visa services against the same voltage, 

382
00:21:43,500 --> 00:21:44,330
the same density, 

383
00:21:44,580 --> 00:21:46,330
if two people, if 2 horses,

384
00:21:46,340 --> 00:21:47,490
and at the same time, 

385
00:21:47,870 --> 00:21:50,290
these are going to be interference. 

386
00:21:50,530 --> 00:21:54,450
And your message is not going to be delivered to the destination. 

387
00:22:02,920 --> 00:22:03,630
Simon, 

388
00:22:05,700 --> 00:22:11,410
how does random access guarantee a node ever get a chance to speak? 

389
00:22:11,650 --> 00:22:15,990
What if in the random someone is always speaking when I try to speak? 

390
00:22:16,490 --> 00:22:18,110
Could that cause a starvation? 

391
00:22:20,240 --> 00:22:21,300
That's a great question. 

392
00:22:21,700 --> 00:22:22,960
And it's probabilistic. 

393
00:22:24,080 --> 00:22:24,870
It's like, 

394
00:22:25,470 --> 00:22:26,040
you, 

395
00:22:27,730 --> 00:22:32,980
there is a the probability that you are going to be able to speak is non zero. 

396
00:22:33,390 --> 00:22:39,610
Now, it turns out that this random access protocols,

397
00:22:41,680 --> 00:22:42,910
they work very well. 

398
00:22:42,920 --> 00:22:50,860
You remember this as a token that the token protocol and the one and with

399
00:22:51,320 --> 00:22:53,490
a frequency division multiplexing, 

400
00:22:53,850 --> 00:22:55,400
they are working very well. 

401
00:22:55,810 --> 00:22:58,040
When the system is very utilized, 

402
00:22:58,050 --> 00:23:00,640
this is highly utilized when everyone copies everyone. 

403
00:23:01,370 --> 00:23:06,120
But it doesn't have such a high efficiency when the system is now utilized, 

404
00:23:06,130 --> 00:23:08,750
because that say, 

405
00:23:08,760 --> 00:23:10,990
if you have only to host talking to each other, 

406
00:23:11,000 --> 00:23:13,230
they cannot use the entire frequency range, 

407
00:23:13,240 --> 00:23:18,060
or they have to wait for the token to get around only for and all the other

408
00:23:19,060 --> 00:23:20,310
was not doing anything with the doctor. 

409
00:23:21,370 --> 00:23:22,450
This is a reverse, 

410
00:23:22,770 --> 00:23:27,710
is working extremely well on another piece is lightly utilized, 

411
00:23:28,160 --> 00:23:29,580
because there are no collisions. 

412
00:23:29,810 --> 00:23:31,390
But when these heavily utilized, 

413
00:23:31,400 --> 00:23:32,510
there are many collisions, 

414
00:23:32,950 --> 00:23:35,130
then the efficiency is going down. 

415
00:23:35,630 --> 00:23:37,030
So there is a problem with that. 

416
00:23:38,560 --> 00:23:41,720
And but again, 

417
00:23:41,730 --> 00:23:45,140
so this is probably the intuition behind your question, 

418
00:23:46,900 --> 00:23:47,570
simon. 

419
00:23:47,920 --> 00:23:49,950
But in theory, 

420
00:23:52,080 --> 00:23:55,200
you are going to get your thought. 

421
00:23:55,590 --> 00:23:56,260
It's like, 

422
00:23:56,910 --> 00:23:57,910
think about the one. 

423
00:23:58,560 --> 00:24:00,790
It's like here is another analogy. 

424
00:24:02,480 --> 00:24:04,430
You are coming from a secondary road. 

425
00:24:04,840 --> 00:24:09,760
You are in the main road and you don't have a priority and you want to take

426
00:24:10,150 --> 00:24:11,020
the right or less. 

427
00:24:11,490 --> 00:24:11,920
Right? 

428
00:24:13,510 --> 00:24:14,710
Like you go from, 

429
00:24:15,790 --> 00:24:17,770
say, for you whatever you exit, right?

430
00:24:18,070 --> 00:24:25,280
So you need to wait for a gap to get to enter the traffic. 

431
00:24:26,390 --> 00:24:27,580
And in theory, 

432
00:24:27,990 --> 00:24:29,940
you may never get that bad that gap. 

433
00:24:30,350 --> 00:24:31,630
But in practice, 

434
00:24:32,110 --> 00:24:34,190
you don't know you did not need to wait too much. 

435
00:24:36,830 --> 00:24:38,960
So probabilistic really is not salvation. 

436
00:24:42,900 --> 00:24:47,650
The next is a network layer. 

437
00:24:54,510 --> 00:25:00,740
I don't know, I so need to update this figure.

438
00:25:00,750 --> 00:25:01,540
On the right hand side. 

439
00:25:01,550 --> 00:25:02,900
We are talking about the network layer. 

440
00:25:02,910 --> 00:25:05,180
The network layer is actually the most important. 

441
00:25:05,190 --> 00:25:05,700
In some sense. 

442
00:25:06,410 --> 00:25:08,080
When you talk about internet, 

443
00:25:08,350 --> 00:25:12,980
internet is the main layer in the internet is the internet protocol. 

444
00:25:13,530 --> 00:25:15,810
Or ip you heard about the ip right? 

445
00:25:16,580 --> 00:25:18,650
Ip is the internet proposal is another class. 

446
00:25:20,770 --> 00:25:24,340
The network player had its own address. 

447
00:25:24,350 --> 00:25:26,140
They are called ip addresses. 

448
00:25:27,940 --> 00:25:32,370
And every host a as a unique ip address. 

449
00:25:34,540 --> 00:25:36,830
And this is global, 

450
00:25:36,840 --> 00:25:38,790
it says the level of the entire planet. 

451
00:25:40,480 --> 00:25:47,000
So nathara blair is basically going to be able to ensure the main service

452
00:25:47,010 --> 00:25:48,960
is going to ensure its connectivity. 

453
00:25:51,540 --> 00:25:52,970
You can deliver a packet, 

454
00:25:53,870 --> 00:25:59,290
specifying the network address or the ip address across the globe. 

455
00:26:00,160 --> 00:26:01,670
From new york, tokyo,

456
00:26:02,160 --> 00:26:03,980
from a network in europe, 

457
00:26:04,310 --> 00:26:07,280
from a host in san francisco to a host in tokyo. 

458
00:26:10,010 --> 00:26:13,760
This will be across multiple data link layer methods, 

459
00:26:15,190 --> 00:26:21,420
because you cannot have just a data link layer network over the entire globe. 

460
00:26:27,520 --> 00:26:29,470
There are possible other services, 

461
00:26:29,520 --> 00:26:31,350
like scheduling priorities, 

462
00:26:31,360 --> 00:26:33,430
or some packets are more important than the other. 

463
00:26:33,440 --> 00:26:34,630
You can think about. 

464
00:26:34,990 --> 00:26:37,740
Video packets are going to have higher priorities, 

465
00:26:37,750 --> 00:26:39,340
and data packets seem like that. 

466
00:26:39,780 --> 00:26:41,910
You need also to handle the buffer management. 

467
00:26:41,920 --> 00:26:43,260
The packets, along the way,

468
00:26:43,270 --> 00:26:44,610
are going to be buffer. 

469
00:26:46,370 --> 00:26:48,000
The interface is very simple. 

470
00:26:48,530 --> 00:26:52,150
You send a packet to a specify not address this image, 

471
00:26:52,910 --> 00:26:54,040
and you receive that packet, 

472
00:26:54,050 --> 00:26:55,280
which is intended to you. 

473
00:26:57,020 --> 00:27:00,290
The protocol includes defining these network addresses which are

474
00:27:00,300 --> 00:27:04,790
globally unique and also constructed the router what are called

475
00:27:04,800 --> 00:27:05,750
forwarding tables. 

476
00:27:05,760 --> 00:27:07,550
So a router which connects a router, 

477
00:27:07,560 --> 00:27:10,770
connects different and locality and adults. 

478
00:27:11,310 --> 00:27:12,580
It receives a packet. 

479
00:27:12,920 --> 00:27:16,320
It looks at the destination address and decides where to send it out. 

480
00:27:22,160 --> 00:27:25,410
This is the metal player. 

481
00:27:26,070 --> 00:27:28,930
And you see the metal player packet. 

482
00:27:29,660 --> 00:27:34,750
It has a payload and the head they are encapsulated in a data frame. 

483
00:27:35,320 --> 00:27:39,650
Encapsulation means that you take a packet from the metal player and you

484
00:27:39,660 --> 00:27:42,930
add the head of the frame. 

485
00:27:42,940 --> 00:27:44,050
This becomes a frame. 

486
00:27:49,100 --> 00:27:53,290
The other header contains the ip destination address and the ip source others. 

487
00:27:54,450 --> 00:27:55,800
And as I mentioned to you, 

488
00:27:56,240 --> 00:28:00,080
these are routed by the routers, 

489
00:28:02,620 --> 00:28:08,880
connect different data link that data layer methods. 

490
00:28:09,940 --> 00:28:15,810
And all this aggregation of local area matters is called a wide area network. 

491
00:28:15,820 --> 00:28:22,210
So now what is the difference between the switch and the router? 

492
00:28:23,570 --> 00:28:24,660
It's simple. 

493
00:28:25,010 --> 00:28:30,320
The router, it's only it recognizes and routes based on the ip addresses.

494
00:28:30,840 --> 00:28:31,180
A switch, 

495
00:28:31,190 --> 00:28:36,550
it's only in a local area network and only recognize mac addresses, 

496
00:28:40,970 --> 00:28:43,140
sort out the function like I mentioned, 

497
00:28:43,620 --> 00:28:46,480
his father, it's to get the packets,

498
00:28:46,490 --> 00:28:50,650
look at their heads and decide on which output link to send them. 

499
00:28:52,350 --> 00:28:54,380
This is how the router works. 

500
00:28:55,380 --> 00:28:57,060
You have a bunch of incoming links, 

501
00:28:57,070 --> 00:28:58,300
you get pakistan, 

502
00:28:59,130 --> 00:29:01,660
and out outgoing links. 

503
00:29:01,670 --> 00:29:03,860
It's like a huge intersection. 

504
00:29:05,070 --> 00:29:05,440
Right? 

505
00:29:09,960 --> 00:29:12,630
And basically, what router implements a mechanics,

506
00:29:12,640 --> 00:29:17,280
which is called store and forward store and forward means the packets

507
00:29:17,290 --> 00:29:18,980
are received first are stored. 

508
00:29:20,950 --> 00:29:22,070
And after a store, 

509
00:29:22,080 --> 00:29:23,830
the router inspects the header. 

510
00:29:24,620 --> 00:29:27,460
And based on the destination of the others decides where the forwards

511
00:29:27,470 --> 00:29:32,590
and they are stored because you

512
00:29:32,600 --> 00:29:35,830
don't want to drop the package if the router cannot process them fast enough. 

513
00:29:36,900 --> 00:29:37,570
Does it be? 

514
00:29:40,500 --> 00:29:40,770
Again, 

515
00:29:40,780 --> 00:29:43,850
the forwarding table is a mapping between ip addresses and the output. 

516
00:29:45,190 --> 00:29:53,000
Right here is an example about the packet going from host a to host each

517
00:29:53,010 --> 00:29:59,550
other or decide to watch output goes to forward the packet based on its ip address. 

518
00:30:00,200 --> 00:30:02,440
And based on the information is a forwarding paper. 

519
00:30:04,500 --> 00:30:06,440
So now this life is very important, 

520
00:30:07,490 --> 00:30:08,960
because it's obvious question. 

521
00:30:08,970 --> 00:30:09,360
Now. 

522
00:30:10,400 --> 00:30:12,250
I have mac addresses, 

523
00:30:13,350 --> 00:30:17,040
and you told me that they are unique. 

524
00:30:18,950 --> 00:30:21,870
Now you tell me also about ip addresses which are also unique. 

525
00:30:22,650 --> 00:30:25,110
Why do I need to kind of others? 

526
00:30:26,530 --> 00:30:29,530
Why not using a single type of others? 

527
00:30:33,630 --> 00:30:36,860
In particular, why shouldn't I use as a mac address for output?

528
00:30:37,190 --> 00:30:38,130
I already have this. 

529
00:30:38,140 --> 00:30:39,870
Why do I need another address? 

530
00:30:41,780 --> 00:30:46,250
The answer is that remember how the mac addresses are allocated? 

531
00:30:49,920 --> 00:30:51,530
I am a network card vendor. 

532
00:30:52,550 --> 00:30:53,880
I get a block of macolysis. 

533
00:30:55,090 --> 00:31:01,740
And i'm going to use this address is in the block to assign to my net of cards. 

534
00:31:02,010 --> 00:31:02,630
It's not. 

535
00:31:04,670 --> 00:31:05,200
Okay. 

536
00:31:05,680 --> 00:31:09,520
And then these network cards are in computers which are all over the globe. 

537
00:31:11,360 --> 00:31:15,840
So there is no aggregation is very much like social security number. 

538
00:31:18,160 --> 00:31:19,380
Now I am asking you, 

539
00:31:20,430 --> 00:31:22,380
i'm giving you a social security number, 

540
00:31:23,630 --> 00:31:23,970
right? 

541
00:31:25,040 --> 00:31:26,550
Let's say they are not private. 

542
00:31:28,260 --> 00:31:29,190
They are not confidential. 

543
00:31:30,530 --> 00:31:32,230
And i'm telling you, hey,

544
00:31:33,760 --> 00:31:39,250
deliver this letter message to this social security number, 

545
00:31:40,910 --> 00:31:42,660
123456, whatever.

546
00:31:45,340 --> 00:31:46,170
How easy is that? 

547
00:31:46,180 --> 00:31:47,480
Or how hard is it? 

548
00:31:50,550 --> 00:31:56,720
It's pretty hard because there is now they are random across the globe. 

549
00:31:59,310 --> 00:32:00,710
Now, to compare that,

550
00:32:00,720 --> 00:32:04,670
if I am going to give you a message or a letter to deliver, 

551
00:32:05,240 --> 00:32:11,570
i'm telling you what is the home address of the recipient. 

552
00:32:12,980 --> 00:32:15,510
It's much easier because the others are structured. 

553
00:32:17,730 --> 00:32:18,180
Right? 

554
00:32:20,520 --> 00:32:22,040
The only thing, for instance,

555
00:32:22,520 --> 00:32:22,800
say, 

556
00:32:22,810 --> 00:32:29,830
i'm going to send the address to this17th street and northwest washington, 

557
00:32:29,840 --> 00:32:31,150
dc and so forth. 

558
00:32:31,840 --> 00:32:34,380
If i'm sending it from california, 

559
00:32:34,950 --> 00:32:38,790
only the first thing I need to know is that is going to washington, 

560
00:32:38,800 --> 00:32:42,430
dc so I put it on a plane to go to washington, 

561
00:32:42,440 --> 00:32:45,320
dc that's the only thing it's very easy. 

562
00:32:46,970 --> 00:32:47,370
Right? 

563
00:32:48,370 --> 00:32:52,080
The amount of state I can use in san francisco to say i'm going to send

564
00:32:52,090 --> 00:32:52,640
the packet. 

565
00:32:52,730 --> 00:32:55,930
The letter is very small, right?

566
00:32:56,150 --> 00:33:00,560
Only the cities or the states or the country. 

567
00:33:02,030 --> 00:33:03,510
If I am sending international letter, 

568
00:33:05,650 --> 00:33:07,520
once the letter is coming, going to washington,

569
00:33:07,530 --> 00:33:09,440
dc remains in the washington dc area. 

570
00:33:09,450 --> 00:33:12,560
And then I know i'm going to look at the street, 

571
00:33:13,350 --> 00:33:15,410
and then i'm looking at the others for this. 

572
00:33:16,790 --> 00:33:22,300
So you can have this theoretical structure and routing of the letter

573
00:33:22,310 --> 00:33:25,390
from the sender to the recipient. 

574
00:33:27,220 --> 00:33:31,700
This is what the ip address gives you this structure who is much will make

575
00:33:31,710 --> 00:33:32,460
it much easier. 

576
00:33:35,380 --> 00:33:39,850
I and then if i'm sending from that on to someone from california, 

577
00:33:39,860 --> 00:33:41,650
from berkeley, it's again,

578
00:33:41,660 --> 00:33:47,340
just look at the berkeley first sent to berkeley to or someone

579
00:33:47,350 --> 00:33:49,500
close to back san francisco, 

580
00:33:49,510 --> 00:33:50,140
auckland, 

581
00:33:50,840 --> 00:33:52,190
a on a plane to auckland. 

582
00:33:52,520 --> 00:33:54,380
And from there is going to be delivered to you. 

583
00:34:05,860 --> 00:34:06,690
Any question? 

584
00:34:09,660 --> 00:34:11,930
So fundamentally, it's, again,

585
00:34:17,700 --> 00:34:22,980
the ip addresses have structured geographic structure, 

586
00:34:22,990 --> 00:34:24,180
the political structure. 

587
00:34:25,570 --> 00:34:26,840
And therefore, 

588
00:34:26,850 --> 00:34:29,360
they can be aggregated aggravated. 

589
00:34:31,120 --> 00:34:34,960
Therefore, the following tables in the routers can be much smaller.

590
00:34:36,900 --> 00:34:37,210
Right? 

591
00:34:40,890 --> 00:34:42,000
While for mac addresses, 

592
00:34:42,010 --> 00:34:43,160
there is no aggregation, 

593
00:34:43,630 --> 00:34:45,430
we need to keep a following table, 

594
00:34:45,440 --> 00:34:47,590
which is equally the number of mechanisms, 

595
00:34:48,080 --> 00:34:49,320
existing market analysis, 

596
00:34:49,770 --> 00:34:54,680
which is huge casing.. 

597
00:34:55,910 --> 00:35:03,870
Assume that you want to send a packet from

598
00:35:03,880 --> 00:35:09,090
new york to a particular ip address to a particular host in uzbek. 

599
00:35:11,440 --> 00:35:13,730
Then they use it. 

600
00:35:13,740 --> 00:35:14,330
Berkeley. 

601
00:35:14,830 --> 00:35:19,850
Actually, all ip addresses are starting with this.

602
00:35:20,980 --> 00:35:25,580
The first are 2 bytes, 

603
00:35:26,170 --> 00:35:28,430
are all common, a 95.

604
00:35:33,030 --> 00:35:35,330
So the router in new york, 

605
00:35:35,340 --> 00:35:39,290
it needs to keep only one entry for all hosts, 

606
00:35:39,640 --> 00:35:43,780
which are in you associated with this directly. 

607
00:35:45,320 --> 00:35:47,990
If you don't have that and you use mike addresses, 

608
00:35:48,440 --> 00:35:52,990
then the new router has to keep an entry for every host, 

609
00:35:54,230 --> 00:35:57,690
which is much harder and much harder to update, 

610
00:35:58,020 --> 00:35:59,120
maintain, and things like that.

611
00:36:03,310 --> 00:36:04,070
Does it make sense? 

612
00:36:06,090 --> 00:36:06,920
Any questions? 

613
00:36:11,240 --> 00:36:13,350
So to summarize here, 

614
00:36:13,650 --> 00:36:20,870
ssn mac address like ssn and an ip address is like an address, 

615
00:36:20,880 --> 00:36:21,830
although it's not readable. 

616
00:36:22,740 --> 00:36:22,980
Right? 

617
00:36:25,690 --> 00:36:30,420
So therefore, it's much easier to build a system like a male system.

618
00:36:30,890 --> 00:36:31,770
In our case, 

619
00:36:32,690 --> 00:36:36,640
to deliver the letter to a particular address, which has structured,

620
00:36:37,260 --> 00:36:40,090
then to some identifier, 

621
00:36:40,460 --> 00:36:47,160
Which has no structure. 

622
00:36:47,170 --> 00:36:47,820
Any questions? 

623
00:36:59,190 --> 00:37:01,630
Like I mentioned, this is the internet protocol,

624
00:37:01,640 --> 00:37:03,700
the international player, 

625
00:37:05,950 --> 00:37:09,660
and the internet protocol is the internet senator player. 

626
00:37:09,990 --> 00:37:11,560
The service it provides. 

627
00:37:12,270 --> 00:37:14,740
It's got its connectivity and back at delivery. 

628
00:37:14,750 --> 00:37:20,910
But its best effort means that you are not guaranteed that your packet

629
00:37:20,920 --> 00:37:22,710
is going to make the destination. 

630
00:37:22,970 --> 00:37:24,840
It may be dropped, it may be corrupted.

631
00:37:27,890 --> 00:37:28,920
And also, 

632
00:37:28,930 --> 00:37:33,160
it doesn't guarantee that the package will send two packets on out of one

633
00:37:33,170 --> 00:37:34,160
after another. 

634
00:37:34,630 --> 00:37:37,340
They are going to arrive at the same time in the same order, 

635
00:37:38,720 --> 00:37:41,570
because they may follow different routes. 

636
00:37:41,580 --> 00:37:42,310
It's like, 

637
00:37:42,320 --> 00:37:49,510
you cannot guarantee that two cars which started san francisco and arrive

638
00:37:51,030 --> 00:37:56,470
to and are driving to la they are going to get that delay the same work. 

639
00:37:58,790 --> 00:37:59,660
It's very simple. 

640
00:38:02,390 --> 00:38:02,770
Now, 

641
00:38:03,530 --> 00:38:04,750
on top of the metal layer, 

642
00:38:04,760 --> 00:38:08,830
you have transport layer and the transport layer provide. 

643
00:38:10,160 --> 00:38:11,280
It's one level up. 

644
00:38:14,060 --> 00:38:20,520
The net of layer deliver a packet from one horse to an ass. 

645
00:38:22,050 --> 00:38:24,250
But the hosts do not consume the packet. 

646
00:38:24,820 --> 00:38:26,300
Application consumes the packet. 

647
00:38:27,800 --> 00:38:29,830
And the application is a process. 

648
00:38:30,910 --> 00:38:33,020
On a machine have multiple processes. 

649
00:38:34,100 --> 00:38:39,080
You need to specify to which packet to each process on a particular machine. 

650
00:38:41,710 --> 00:38:43,090
The packet needs to be delivered. 

651
00:38:44,760 --> 00:38:48,560
The ip address of the recipient is not enough. 

652
00:38:49,120 --> 00:38:52,950
Read another thing to differentiate between multiple processes running

653
00:38:52,960 --> 00:38:55,270
on the same action on the same course. 

654
00:38:57,120 --> 00:38:57,910
This is a port. 

655
00:38:57,920 --> 00:38:58,070
Now. 

656
00:38:58,780 --> 00:38:59,270
I could see. 

657
00:39:00,470 --> 00:39:01,710
So the transfer layer, 

658
00:39:02,050 --> 00:39:03,980
multiplex and the multiplex packets, 

659
00:39:04,330 --> 00:39:05,640
which arrive on the same post, 

660
00:39:06,720 --> 00:39:09,640
that as other services can provide the reliability, 

661
00:39:10,790 --> 00:39:11,140
right? 

662
00:39:11,150 --> 00:39:14,460
Adaptation, like we discussed last time, flow control, congestion control,

663
00:39:15,990 --> 00:39:16,940
and timing properties. 

664
00:39:16,950 --> 00:39:18,380
Maybe they are going to. 

665
00:39:20,420 --> 00:39:26,650
You've got a guarantee that the packet will be delivered within 100 millisecond. 

666
00:39:27,170 --> 00:39:29,350
It's important, say, for voice communication,

667
00:39:30,430 --> 00:39:34,620
the interface is the same message to a specific process of a given estimation. 

668
00:39:37,820 --> 00:39:40,870
And the local process receives a message sent to it. 

669
00:39:42,120 --> 00:39:45,520
The protocol includes the poor numbers. 

670
00:39:46,650 --> 00:39:49,320
We used to differentiate between different processes. 

671
00:39:49,330 --> 00:39:52,020
It may implement reliability, 

672
00:39:52,030 --> 00:39:53,220
flow control, 

673
00:39:54,050 --> 00:39:57,760
and packet is asian because of my sense bigger, 

674
00:39:57,770 --> 00:39:59,360
depending on the interface, 

675
00:39:59,630 --> 00:40:01,480
you may send streams. 

676
00:40:01,800 --> 00:40:02,830
Like if you remember, 

677
00:40:03,140 --> 00:40:05,960
we have this kind of interface to the network. 

678
00:40:06,390 --> 00:40:10,090
You have blocked and stream interface from the stream interface. 

679
00:40:10,100 --> 00:40:13,730
Somehow you need to chop these streams into packets and send these packets. 

680
00:40:17,820 --> 00:40:19,170
That is a higher level. 

681
00:40:19,600 --> 00:40:20,880
You have the transfer layer, 

682
00:40:20,890 --> 00:40:22,120
you have a transfer header. 

683
00:40:22,130 --> 00:40:26,900
The transport header is a protocol number as the for port numbers. 

684
00:40:26,910 --> 00:40:30,900
And you have also like, for instance, 80,

685
00:40:30,910 --> 00:40:37,430
it's identifies for the port is reallocated the port for hpv server. 

686
00:40:41,640 --> 00:40:48,080
There are two important transport protocols in the internet using udp

687
00:40:51,160 --> 00:40:54,080
user data ground protocol. 

688
00:40:55,330 --> 00:40:59,340
And this provides only multiplexing and multiplexing among processes. 

689
00:40:59,740 --> 00:41:01,160
This is the best effort. 

690
00:41:01,730 --> 00:41:04,000
Backers can be lost, can get out of order.

691
00:41:04,370 --> 00:41:06,410
There is no flow control, nothing.

692
00:41:08,060 --> 00:41:09,610
The application is to take care of. 

693
00:41:10,570 --> 00:41:13,470
Then it's pcp which is a transport control protocol. 

694
00:41:14,370 --> 00:41:18,680
This obviously still provides multiplexing and in multiplexing around processes. 

695
00:41:19,110 --> 00:41:21,870
But in addition, has a notion of connection.

696
00:41:22,090 --> 00:41:24,670
You set up the connection and tear down the connection. 

697
00:41:26,380 --> 00:41:30,050
If there are packets which are corrupted or corrupted, you discard them.

698
00:41:30,060 --> 00:41:31,010
There is a check sum. 

699
00:41:31,020 --> 00:41:31,530
You check. 

700
00:41:31,940 --> 00:41:33,600
If the check sum is violated, 

701
00:41:33,610 --> 00:41:34,720
you discuss the packet. 

702
00:41:35,370 --> 00:41:37,440
It transmits a lost packet. 

703
00:41:37,770 --> 00:41:40,680
A self provides reliability to the application, 

704
00:41:41,120 --> 00:41:44,610
and it's also provides flow control and condition control. 

705
00:41:45,040 --> 00:41:49,360
Remember, flow control is about not overwhelming.

706
00:41:49,610 --> 00:41:50,290
The receiver. 

707
00:41:50,630 --> 00:41:53,610
The congestion control is not overwhelming. 

708
00:41:54,330 --> 00:41:55,300
The method, 

709
00:41:59,060 --> 00:42:01,450
the services are not typically available. 

710
00:42:02,920 --> 00:42:05,010
Any bandwidth or delay guarantees. 

711
00:42:06,140 --> 00:42:09,010
In internet, you cannot specify that.

712
00:42:09,450 --> 00:42:11,600
You cannot say I want 10 megabytes per second. 

713
00:42:11,610 --> 00:42:12,410
You cannot say, 

714
00:42:12,420 --> 00:42:16,570
I want these packets need to believe delivery 100 millisecond. 

715
00:42:18,600 --> 00:42:19,820
What I mentioned to you, 

716
00:42:19,830 --> 00:42:22,140
I mentioned earlier that, in general,

717
00:42:22,150 --> 00:42:23,780
the transfer protocol, 

718
00:42:23,940 --> 00:42:26,150
the transport layer can provide that. 

719
00:42:26,360 --> 00:42:31,990
But I am telling you now is that transport protocols in the internet

720
00:42:32,000 --> 00:42:34,030
do not provide this kind of

721
00:42:34,690 --> 00:42:36,920
then that be like our boundaries guarantees. 

722
00:42:39,750 --> 00:42:42,060
Also if a session with a connection, 

723
00:42:42,440 --> 00:42:46,970
if you try to migrate an application from one or to another, 

724
00:42:47,270 --> 00:42:49,980
they using yummy migration or something like that, 

725
00:42:50,210 --> 00:42:51,380
the connection is not preserved. 

726
00:42:54,310 --> 00:42:55,420
We have another question. 

727
00:43:00,440 --> 00:43:05,110
The questions are reports used to differentiate which packet to send

728
00:43:05,450 --> 00:43:07,380
to different processes on the house. 

729
00:43:07,760 --> 00:43:08,120
Yes. 

730
00:43:08,460 --> 00:43:09,040
Exactly. 

731
00:43:09,050 --> 00:43:09,440
For that. 

732
00:43:10,930 --> 00:43:14,530
Different processes will have different ports numbers when they open a production. 

733
00:43:21,490 --> 00:43:22,960
That is the application layer. 

734
00:43:27,760 --> 00:43:30,190
Is here any service provided to the end users. 

735
00:43:30,200 --> 00:43:34,580
This application is like the interface depends on the application, 

736
00:43:34,590 --> 00:43:36,100
protocol depends on the application. 

737
00:43:36,830 --> 00:43:39,400
In the osi architecture, 

738
00:43:39,410 --> 00:43:44,080
there are also a was a transport, 

739
00:43:45,010 --> 00:43:47,080
sorry, was a session on the presentation layer.

740
00:43:47,520 --> 00:43:51,560
They are not existent in the internet protocol. 

741
00:43:51,570 --> 00:43:53,420
So be happy. 

742
00:43:53,430 --> 00:44:00,020
We only need to learn about five really four layers instead of seven. 

743
00:44:00,880 --> 00:44:02,230
This father, their function,

744
00:44:02,240 --> 00:44:04,950
it is absorbed by the application layer data. 

745
00:44:09,830 --> 00:44:10,860
This is a better step. 

746
00:44:11,730 --> 00:44:13,150
You see, kind of the waterfall.

747
00:44:15,020 --> 00:44:17,050
A packet at one level, 

748
00:44:17,060 --> 00:44:19,690
becomes a payload as a set as the next level, 

749
00:44:20,110 --> 00:44:21,190
as you go down the stack. 

750
00:44:22,380 --> 00:44:24,670
And when you are going to go up the stack, 

751
00:44:24,680 --> 00:44:29,980
you are going to strip headers after header until you get to generate

752
00:44:33,200 --> 00:44:34,230
the first layers, 

753
00:44:34,240 --> 00:44:37,990
physical layer data link layer network layer are implemented by the host

754
00:44:38,000 --> 00:44:38,710
and by the roots. 

755
00:44:41,320 --> 00:44:44,360
The switch is not shown here by the switch implement the physical layer

756
00:44:44,370 --> 00:44:45,120
and italic layer. 

757
00:44:47,020 --> 00:44:51,140
The host implement transport and application layer is throughout the broad implement. 

758
00:44:54,230 --> 00:44:58,620
And the protocol is between two ps at the same time. 

759
00:45:03,710 --> 00:45:09,970
Some announcements discussion will be recorded because of the thanksgiving. 

760
00:45:11,640 --> 00:45:13,800
The office hours for wednesday, thursday,

761
00:45:13,810 --> 00:45:18,130
friday are going to be canceled against because of the thanksgiving. 

762
00:45:19,410 --> 00:45:23,240
The middle three reviewer session is coming next monday. 

763
00:45:23,250 --> 00:45:25,120
The time is to be determined. 

764
00:45:26,050 --> 00:45:26,920
Please stay focused. 

765
00:45:26,930 --> 00:45:28,800
You are going to announce it on piazza. 

766
00:45:28,810 --> 00:45:37,720
The medium three is next wednesday between 7:00 and 9:00 pm and homeworks

767
00:45:37,730 --> 00:45:38,380
is released. 

768
00:45:38,390 --> 00:45:43,220
And is it has been released and is due on friday. 

769
00:45:43,230 --> 00:45:51,080
December 3rd are layers, 

770
00:45:51,090 --> 00:45:54,040
five and six used explicitly in other systems, 

771
00:45:54,050 --> 00:45:55,520
or are they obsolete everywhere? 

772
00:45:56,990 --> 00:46:03,350
They were used by other network protocol and network stacks. 

773
00:46:04,560 --> 00:46:06,550
In the past, there are many of them,

774
00:46:07,940 --> 00:46:09,700
but all of them are obsolete. 

775
00:46:09,710 --> 00:46:16,420
Eventually the internet protocol took over and everyone knows provide

776
00:46:16,430 --> 00:46:17,300
the internet protocol. 

777
00:46:18,420 --> 00:46:21,680
So the answer to your question today are obsolete. 

778
00:46:27,290 --> 00:46:29,560
Previous recording letter will be applauded, 

779
00:46:30,370 --> 00:46:32,240
recording, recorded letter.

780
00:46:32,970 --> 00:46:33,800
It should be. 

781
00:46:34,180 --> 00:46:35,650
We'll make sure that it's upload it. 

782
00:46:37,420 --> 00:46:38,200
Sorry about that. 

783
00:46:42,320 --> 00:46:43,870
Now let's switch the gears. 

784
00:46:43,880 --> 00:46:47,310
And this is a very interesting aspect of the internet. 

785
00:46:48,130 --> 00:46:49,960
It's called end to end argument. 

786
00:46:54,130 --> 00:46:58,700
If you look about this another way to look at the internet protocol stack, 

787
00:46:59,630 --> 00:47:02,800
its shape is what is called our glass. 

788
00:47:03,900 --> 00:47:09,190
What this means that the internet protocol is and is a waste of the howard glass. 

789
00:47:10,050 --> 00:47:12,720
And that's why internet probable is so important. 

790
00:47:12,730 --> 00:47:14,080
And the sorry, 

791
00:47:14,090 --> 00:47:19,130
internet in ip layer is so important in the internet network stuff, 

792
00:47:22,070 --> 00:47:23,400
because it's kind of unique. 

793
00:47:24,650 --> 00:47:29,550
So everyone has to implement the internet protocol interface. 

794
00:47:30,700 --> 00:47:32,660
But under the internet protocol, 

795
00:47:33,450 --> 00:47:35,010
player and above it, 

796
00:47:36,280 --> 00:47:42,350
there is a large variety of different protocols at different layers. 

797
00:47:43,860 --> 00:47:46,090
You can answer it under the internet protocol. 

798
00:47:46,100 --> 00:47:47,810
You can have different data link layers. 

799
00:47:48,510 --> 00:47:52,700
You can have different physical layers about above. 

800
00:47:53,910 --> 00:47:56,840
You can have different transport protocols, 

801
00:47:56,850 --> 00:48:03,730
this pngdp about you have different application protocols. 

802
00:48:05,400 --> 00:48:05,800
Right? 

803
00:48:07,750 --> 00:48:08,860
This is beautiful. 

804
00:48:08,870 --> 00:48:15,640
The reason is beautiful because it decouple the evolution of the layers

805
00:48:15,650 --> 00:48:16,640
of the layers under

806
00:48:16,650 --> 00:48:19,870
the underneath and of the layer above. 

807
00:48:20,860 --> 00:48:23,340
Remember it when he discussed the level of indirection. 

808
00:48:23,790 --> 00:48:24,150
Last, 

809
00:48:25,730 --> 00:48:26,290
this is it. 

810
00:48:26,690 --> 00:48:31,950
But I do remember the couple the evolution above from the evolution of the last. 

811
00:48:33,580 --> 00:48:36,250
Therefore, if i'm going to add a new data link layer,

812
00:48:36,260 --> 00:48:38,650
as long as i'm providing on top of it, 

813
00:48:38,660 --> 00:48:39,850
ip interface, 

814
00:48:42,500 --> 00:48:45,090
then all the other application, 

815
00:48:45,100 --> 00:48:48,610
all of the other layers above ip should work without any check. 

816
00:48:50,070 --> 00:48:50,530
The same. 

817
00:48:51,240 --> 00:48:55,870
If i'm going to invent a new transport protocol or a new application protocol, 

818
00:48:56,810 --> 00:48:57,770
I can do that. 

819
00:48:57,780 --> 00:49:04,470
And as long as i'm going to write against the ip interface, 

820
00:49:04,480 --> 00:49:07,560
none of the layers below the ip should care that. 

821
00:49:07,570 --> 00:49:10,920
Now there is a new application protocol or a new transport protocol. 

822
00:49:13,730 --> 00:49:17,280
This is why the ip layer is so fundamental. 

823
00:49:21,330 --> 00:49:22,360
This is what we discussed. 

824
00:49:23,250 --> 00:49:30,580
So a single internet module player allows arbitrary networks to operate, 

825
00:49:31,170 --> 00:49:34,960
allows application to functions on all networks. 

826
00:49:35,920 --> 00:49:36,980
And therefore, 

827
00:49:36,990 --> 00:49:43,000
because the players below and the layers above can evolved separately, 

828
00:49:43,010 --> 00:49:45,520
this is how you also involve the innovation. 

829
00:49:46,040 --> 00:49:47,590
It enables innovation. 

830
00:49:52,080 --> 00:49:52,970
However, 

831
00:49:53,680 --> 00:49:55,950
changing ip itself is very hard, 

832
00:49:55,960 --> 00:50:00,760
because it's only one layer of a proof point. 

833
00:50:01,190 --> 00:50:04,390
The transition from ipv four to ibv six was very painful, 

834
00:50:05,250 --> 00:50:06,720
probably don't like 20 years. 

835
00:50:12,730 --> 00:50:13,130
Now, 

836
00:50:13,880 --> 00:50:15,010
the layers, 

837
00:50:15,020 --> 00:50:18,210
it's a very nice construction, very logical, very clear.

838
00:50:19,100 --> 00:50:24,210
I provide a lot of isolation because one layer can only use a service

839
00:50:24,220 --> 00:50:25,170
of the layer below it. 

840
00:50:29,330 --> 00:50:31,170
At the same time, he has some drawbacks,

841
00:50:36,560 --> 00:50:40,110
because the layer may need some same functionality like false tolerance

842
00:50:40,120 --> 00:50:41,470
of no reliability. 

843
00:50:41,800 --> 00:50:44,750
Some players are going to replicate this function of it. 

844
00:50:45,610 --> 00:50:49,120
The layering can also hurt the performance because one layer can hide

845
00:50:49,130 --> 00:50:50,760
information from the above layer. 

846
00:50:51,660 --> 00:50:53,030
Like I mentioned to you, 

847
00:50:53,040 --> 00:50:57,510
it's one classic example is that the data link layer hides, 

848
00:50:57,810 --> 00:50:59,200
wire packet was lost. 

849
00:51:01,460 --> 00:51:03,770
The ip layer hides while the packet was lost. 

850
00:51:04,300 --> 00:51:08,810
The transfer layer which provides for recent bcp which is provide reliability, 

851
00:51:08,820 --> 00:51:11,450
and it needs to do the transmission of the packets. 

852
00:51:12,510 --> 00:51:15,300
It cannot make the right the best decision, 

853
00:51:15,800 --> 00:51:19,600
because it doesn't know where there is a packet, for instance, was lost,

854
00:51:19,610 --> 00:51:25,150
because it was dropping the matter because of congestion. 

855
00:51:25,770 --> 00:51:30,710
So therefore, I need to slow down when I send a new packet,

856
00:51:31,590 --> 00:51:33,310
but I retransmit the loss packet, 

857
00:51:35,980 --> 00:51:37,980
or the packet may have been lost, 

858
00:51:37,990 --> 00:51:40,980
because interference case in which I don't need to slow down. 

859
00:51:42,040 --> 00:51:43,800
But without having this information, 

860
00:51:44,130 --> 00:51:46,860
I need to make a decision the decision today to slow down, 

861
00:51:46,870 --> 00:51:49,380
which is not optimal, for instance, for wireless networks.

862
00:51:55,060 --> 00:51:58,390
Some of the layers are not always clearly separate. 

863
00:52:04,550 --> 00:52:07,100
The other thing is that you had, as you remember,

864
00:52:07,110 --> 00:52:08,900
like for each layer at its own head, 

865
00:52:09,620 --> 00:52:14,070
you have a lot of head ups and that overhead, 

866
00:52:14,940 --> 00:52:18,180
because it's not really data you want to send in some cases ahead. 

867
00:52:18,190 --> 00:52:20,660
That is much harder than the actual data you want to send. 

868
00:52:24,580 --> 00:52:25,240
So now, 

869
00:52:25,740 --> 00:52:26,180
again, 

870
00:52:26,190 --> 00:52:30,720
you have all these layers and you want to implement some functionality. 

871
00:52:32,550 --> 00:52:33,860
The one question is, 

872
00:52:34,310 --> 00:52:36,830
at once layer, you are implementing that function.

873
00:52:39,180 --> 00:52:47,910
And the end to end arguments is a principle which tries to answer that question. 

874
00:52:51,290 --> 00:52:54,380
Some people say is a sacred text of the internet. 

875
00:52:55,840 --> 00:52:57,540
And like any sacred text, 

876
00:52:58,300 --> 00:53:00,980
there are endless disputes about what exactly means. 

877
00:53:02,420 --> 00:53:02,700
Right? 

878
00:53:05,140 --> 00:53:09,160
And everyone cites the supporting their position that it's a little bit a

879
00:53:10,740 --> 00:53:11,230
like the bible, 

880
00:53:13,960 --> 00:53:15,530
but still, it's very important.

881
00:53:18,160 --> 00:53:20,030
But let's consider this, for instance,

882
00:53:20,640 --> 00:53:23,160
some function into like reliability or security. 

883
00:53:24,070 --> 00:53:27,270
It's obviously, where do you implement the italian man,

884
00:53:27,600 --> 00:53:31,430
ib land and the metal layer, 

885
00:53:32,070 --> 00:53:34,150
transport layer where and why? 

886
00:53:46,320 --> 00:53:48,770
And our application can implement that. 

887
00:53:52,650 --> 00:53:57,420
And the main point here is that like, 

888
00:53:57,430 --> 00:53:58,940
we'll see in the next example, 

889
00:54:00,330 --> 00:54:03,560
is that because a network, 

890
00:54:04,800 --> 00:54:08,200
even if they want at a lower level of the network, 

891
00:54:08,650 --> 00:54:09,810
cannot implement, 

892
00:54:11,330 --> 00:54:13,240
and to end and end, 

893
00:54:13,250 --> 00:54:14,520
function will be corrected. 

894
00:54:14,530 --> 00:54:17,030
The application may anyway have to implement. 

895
00:54:19,630 --> 00:54:21,010
Let's take a following example, 

896
00:54:26,420 --> 00:54:27,710
but I it's okay. 

897
00:54:27,720 --> 00:54:28,390
It's an example. 

898
00:54:29,120 --> 00:54:36,920
Say you want to transfer a lively a file from one host on us

899
00:54:41,500 --> 00:54:42,730
how this will look like. 

900
00:54:43,540 --> 00:54:44,870
If you want to build an application, 

901
00:54:46,110 --> 00:54:47,650
where is the data from the file? 

902
00:54:49,760 --> 00:54:52,510
Then you send it over the network from hostile to hostile. 

903
00:54:54,260 --> 00:54:57,850
The horse bees and the application from horse b is going to write it

904
00:54:57,860 --> 00:54:58,610
on the disk, 

905
00:54:59,950 --> 00:55:04,090
be this is how you copy a file. 

906
00:55:07,070 --> 00:55:09,920
Now, if I want to have a reliable transfer, what you are going to do,

907
00:55:13,500 --> 00:55:14,680
there are the solutions. 

908
00:55:15,730 --> 00:55:19,910
I make each of these thread steps reliable. 

909
00:55:20,870 --> 00:55:22,490
And now I can catalyze them. 

910
00:55:22,500 --> 00:55:25,950
I have here are five reliable steps, 

911
00:55:26,930 --> 00:55:28,520
entrance that must be reliable. 

912
00:55:30,010 --> 00:55:31,080
The second one, 

913
00:55:33,650 --> 00:55:35,730
I don't know any of those that seems. 

914
00:55:36,940 --> 00:55:38,730
But after I get all, 

915
00:55:38,740 --> 00:55:40,370
what I am told is a file, 

916
00:55:41,230 --> 00:55:42,830
i'm going to computer checks out, 

917
00:55:43,840 --> 00:55:50,590
and i'm going to send to to match against the jackson, 

918
00:55:50,600 --> 00:55:53,000
sent by the host by the sender. 

919
00:55:53,010 --> 00:55:54,280
So basically hosting, 

920
00:55:56,080 --> 00:55:58,280
when he sends a file, it computes also a check stop.

921
00:55:58,800 --> 00:56:00,250
He sends out the file to horse, be,

922
00:56:00,260 --> 00:56:03,400
the horse be takes against a file, save the file.

923
00:56:03,720 --> 00:56:06,030
And also, after it saves the file,

924
00:56:06,040 --> 00:56:07,430
its entire file, 

925
00:56:07,710 --> 00:56:10,660
it computes a check sum and our computer check sum of the, say,

926
00:56:10,670 --> 00:56:13,060
file with the check sum sent by the whole state. 

927
00:56:13,270 --> 00:56:15,760
If they are the same success, 

928
00:56:16,010 --> 00:56:19,420
If they are not the same, send the file again,

929
00:56:23,900 --> 00:56:25,570
which of the solutions are going to be? 

930
00:56:26,960 --> 00:56:29,830
If it were for you and one

931
00:56:45,940 --> 00:56:51,820
edison say solution one because solution three is bad for large files, 

932
00:56:51,830 --> 00:56:53,940
through solution three is bad for large files. 

933
00:56:54,900 --> 00:56:55,780
Assignment. 

934
00:56:56,230 --> 00:57:03,160
I like solution to anyone else. 

935
00:57:04,100 --> 00:57:05,700
Simon, why do you like some shampoo?

936
00:57:16,870 --> 00:57:19,790
Because I don't know whether between each steps is my break. 

937
00:57:20,100 --> 00:57:20,780
That's correct. 

938
00:57:21,910 --> 00:57:22,610
Great answer. 

939
00:57:23,650 --> 00:57:25,570
So that you see the point is that here, 

940
00:57:25,580 --> 00:57:28,690
if I concatenate five reliable steps, 

941
00:57:29,290 --> 00:57:31,120
it doesn't mean that end to end. 

942
00:57:31,350 --> 00:57:32,390
Everything is reliable. 

943
00:57:34,360 --> 00:57:34,470
Right? 

944
00:57:34,480 --> 00:57:36,920
This is the grain is a solution, though.

945
00:57:37,290 --> 00:57:40,310
It's checking the checks out. 

946
00:57:42,100 --> 00:57:43,690
The solution is incomplete, 

947
00:57:44,680 --> 00:57:46,070
because what happens? 

948
00:57:46,670 --> 00:57:50,510
For instance, when I copy the data from the disk to the application memory,

949
00:57:51,090 --> 00:57:54,740
and the application memory is corrupted, 

950
00:57:54,750 --> 00:58:00,800
but luck fundamentally, 

951
00:58:00,810 --> 00:58:04,960
because I cannot guarantee that the end the solution one, 

952
00:58:05,840 --> 00:58:09,300
it's is correct. 

953
00:58:09,310 --> 00:58:15,640
I need any way to do a check sum and verify

954
00:58:17,330 --> 00:58:19,600
the main point here that the application, 

955
00:58:19,610 --> 00:58:24,660
anyway, has to implement the functionality to verify the checks out,

956
00:58:27,620 --> 00:58:28,820
even if you solution one. 

957
00:58:33,310 --> 00:58:34,130
So therefore, 

958
00:58:34,140 --> 00:58:39,220
the full functionality of reliability can be implemented as the application

959
00:58:39,230 --> 00:58:39,460
level. 

960
00:58:41,020 --> 00:58:43,460
The network doesn't going to do anything. 

961
00:58:47,640 --> 00:58:48,050
Now, 

962
00:58:52,230 --> 00:58:53,900
for correctness reasons, 

963
00:58:54,920 --> 00:58:55,240
right? 

964
00:58:55,250 --> 00:58:55,920
It's a game. 

965
00:58:57,030 --> 00:58:59,190
It's enough to implement the application. 

966
00:59:00,060 --> 00:59:01,350
The network doesn't do anything. 

967
00:59:03,290 --> 00:59:03,850
Still, 

968
00:59:05,120 --> 00:59:08,680
we are just talking that the network also implement reliability and not

969
00:59:08,690 --> 00:59:10,280
the natural transformation, 

970
00:59:10,960 --> 00:59:11,590
reliability. 

971
00:59:14,270 --> 00:59:20,480
So why would sales and effort implement reliably? 

972
00:59:20,490 --> 00:59:22,760
They are reliable for a reliable product? 

973
00:59:25,010 --> 00:59:26,450
It's not necessary for correctness. 

974
00:59:27,280 --> 00:59:28,290
We just conclude that, 

975
00:59:29,520 --> 00:59:30,040
but still, 

976
00:59:31,100 --> 00:59:34,210
you may want another to implement elaborate. 

977
00:59:35,060 --> 00:59:43,880
Why is that to avoid very expensive collection? 

978
00:59:45,830 --> 00:59:46,300
Alexander? 

979
00:59:47,140 --> 00:59:48,240
So if you think about, 

980
00:59:50,460 --> 00:59:50,900
right? 

981
00:59:51,710 --> 00:59:54,350
It's in the second solution, 

982
00:59:54,360 --> 00:59:58,160
if you have ten gigabytes size five, 

983
00:59:59,300 --> 01:00:01,580
if one bite 1 bit, 

984
01:00:02,610 --> 01:00:06,420
not on bite, 1 bit is corrupted.

985
01:00:06,990 --> 01:00:09,030
You need to resend the entire ten gigabytes. 

986
01:00:11,550 --> 01:00:12,110
However, 

987
01:00:12,770 --> 01:00:13,580
if you have, 

988
01:00:15,340 --> 01:00:16,690
the network is reliable. 

989
01:00:18,080 --> 01:00:18,580
And the

990
01:00:39,340 --> 01:00:39,900
that's perfect. 

991
01:00:51,100 --> 01:00:55,060
So the question is that should I implement this function

992
01:00:55,070 --> 01:00:57,290
at the lower levels or not? 

993
01:01:03,390 --> 01:01:05,860
The question is the answer here. 

994
01:01:06,980 --> 01:01:07,820
It depends, 

995
01:01:10,630 --> 01:01:10,920
right? 

996
01:01:10,930 --> 01:01:18,720
Because in and and the reason this is a

997
01:01:18,730 --> 01:01:22,170
question is that if you implement the function, 

998
01:01:22,180 --> 01:01:23,720
it is a lower layer. 

999
01:01:24,710 --> 01:01:30,130
This function, I it doesn't reduce the application complexity,

1000
01:01:30,570 --> 01:01:32,060
because you anyway, 

1001
01:01:32,070 --> 01:01:37,100
into implement there and increase another complexity. 

1002
01:01:41,700 --> 01:01:42,420
Worse yet, 

1003
01:01:43,110 --> 01:01:44,210
it can increase, 

1004
01:01:44,220 --> 01:01:50,690
it can add overhead to application which do not read that functional. 

1005
01:01:52,760 --> 01:01:59,540
Like, for instance, if you have a voice over ip telephony over the internet,

1006
01:02:01,100 --> 01:02:02,560
in that particular case, 

1007
01:02:03,200 --> 01:02:04,620
reliability is not helpful, 

1008
01:02:05,490 --> 01:02:07,090
because you need to satisfy, 

1009
01:02:07,420 --> 01:02:14,600
you need to the latency is more important than getting every every packet. 

1010
01:02:17,130 --> 01:02:17,340
Correct? 

1011
01:02:17,350 --> 01:02:20,690
Like if the sound is a little bit distorted, 

1012
01:02:21,600 --> 01:02:22,960
it's probably it's okay. 

1013
01:02:23,930 --> 01:02:28,090
But if we need to wait for a second to return in the packet, 

1014
01:02:28,100 --> 01:02:28,730
that's probably not. 

1015
01:02:34,530 --> 01:02:34,850
Okay. 

1016
01:02:37,570 --> 01:02:38,370
Yeah, 

1017
01:02:38,920 --> 01:02:39,930
it was glitch. 

1018
01:02:39,940 --> 01:02:43,450
So I don't know what will happen also is recording because on my side, 

1019
01:02:43,810 --> 01:02:45,970
it said a little bit recording is in progress. 

1020
01:02:45,980 --> 01:02:47,860
I hope that it's just a glitch. 

1021
01:02:48,370 --> 01:02:51,880
So that didn't mean anything for the recording. 

1022
01:02:52,850 --> 01:02:58,550
That is a the great timing while we are discussing about entrant reliability. 

1023
01:03:04,190 --> 01:03:04,720
Anyway, 

1024
01:03:09,070 --> 01:03:11,710
so basically, 

1025
01:03:14,170 --> 01:03:19,190
you can implement a net of function is at a lower level stack. 

1026
01:03:20,600 --> 01:03:23,460
If we can improve performance. 

1027
01:03:28,300 --> 01:03:31,140
Now there are different interpretation of the end to end argument. 

1028
01:03:32,940 --> 01:03:35,600
And one extreme implementation, he says,

1029
01:03:38,170 --> 01:03:40,370
even if you can improve efficiency, 

1030
01:03:40,380 --> 01:03:48,400
don't bother if you cannot simplify the application or the cost software, 

1031
01:03:49,080 --> 01:03:52,680
don't buy to implement as another player. 

1032
01:03:54,670 --> 01:03:56,580
This is very conservative. 

1033
01:03:57,590 --> 01:04:00,140
I have the moderating term in interpretation. 

1034
01:04:01,230 --> 01:04:09,010
So the moderate interpretation is kind of it's it basically says you

1035
01:04:09,020 --> 01:04:10,370
can implement the function. 

1036
01:04:10,380 --> 01:04:12,650
It is a network, but be careful about that.

1037
01:04:13,670 --> 01:04:14,500
Think twice. 

1038
01:04:17,540 --> 01:04:18,690
In particular, 

1039
01:04:21,840 --> 01:04:29,870
you can implement the function id at a lower layer, 

1040
01:04:30,570 --> 01:04:38,890
if and only if doesn't impose a burden on applications that do not require

1041
01:04:38,900 --> 01:04:39,850
that functionality. 

1042
01:04:42,470 --> 01:04:46,020
And it provides a significant, improving platform.

1043
01:04:48,760 --> 01:04:56,860
So the benefits are out waiting the complexity of the implementation. 

1044
01:04:56,870 --> 01:04:58,140
And by the way, 

1045
01:04:58,150 --> 01:05:03,530
you shouldn't be a burden for the applications who do not need that function. 

1046
01:05:04,480 --> 01:05:07,830
So if the application doesn't need for reliability, 

1047
01:05:08,540 --> 01:05:09,260
you shouldn't suffer. 

1048
01:05:10,230 --> 01:05:11,500
For instance, should that experience?

1049
01:05:11,510 --> 01:05:16,750
Have you like latency and relatives and you say interpretation we are using? 

1050
01:05:19,260 --> 01:05:19,720
Okay? 

1051
01:05:21,200 --> 01:05:21,960
Any questions? 

1052
01:05:33,430 --> 01:05:35,770
So again, you have a functionality like reliability,

1053
01:05:37,240 --> 01:05:39,630
which you must for being to be absolute, 

1054
01:05:39,640 --> 01:05:41,830
to be correct to ensure correctness. 

1055
01:05:42,270 --> 01:05:44,580
You have to implement the application level at the end. 

1056
01:05:47,380 --> 01:05:48,240
Hosts the question. 

1057
01:05:48,690 --> 01:05:51,410
Should we also implement the liability of the lower layers? 

1058
01:05:53,070 --> 01:05:54,140
Is another layers. 

1059
01:05:55,780 --> 01:05:56,740
The answer here, 

1060
01:05:56,750 --> 01:05:59,420
according to the moderate interpretation of the entrant argument, 

1061
01:06:04,300 --> 01:06:06,200
but the bad for that is pretty high. 

1062
01:06:07,410 --> 01:06:09,330
You can implement the liability another team. 

1063
01:06:09,650 --> 01:06:14,480
Only if you get significant increase improvement in the performance, 

1064
01:06:15,400 --> 01:06:17,550
you are not going to hurt the application. 

1065
01:06:17,560 --> 01:06:18,950
We do not need that function. 

1066
01:06:25,350 --> 01:06:26,040
Any questions? 

1067
01:06:30,770 --> 01:06:36,020
Now we are going to start one of the last topics of the course. 

1068
01:06:36,960 --> 01:06:37,920
This is flow control. 

1069
01:06:37,930 --> 01:06:43,480
So the flow control, 

1070
01:06:44,340 --> 01:06:45,100
remember, 

1071
01:06:45,790 --> 01:06:49,690
assures that a fast sender does not overwhelm a slow receiver. 

1072
01:06:51,760 --> 01:06:53,440
And we already seen some mechanics, 

1073
01:06:54,380 --> 01:06:57,100
like producer, consumers is bounded buffers.

1074
01:06:58,970 --> 01:07:00,630
So remember, in this case,

1075
01:07:01,590 --> 01:07:03,850
you cannot overpower the consumer, 

1076
01:07:04,770 --> 01:07:05,620
overwhelmed the consumer. 

1077
01:07:06,510 --> 01:07:08,530
Because if the buffer is full, 

1078
01:07:09,140 --> 01:07:14,530
the producer can no longer put packets in the buffer. 

1079
01:07:20,820 --> 01:07:25,300
The buffer is naturally pushing back on the producer. 

1080
01:07:26,780 --> 01:07:29,160
One is full, accepts no new items.

1081
01:07:31,150 --> 01:07:33,700
Therefore, if the consumer is slower,

1082
01:07:33,710 --> 01:07:37,850
the producer is going to adapt to the consumer speed

1083
01:07:38,740 --> 01:07:39,820
because of the bounded buffer. 

1084
01:07:44,760 --> 01:07:45,490
So that's the idea. 

1085
01:07:50,470 --> 01:07:54,650
In the case of the tcp and this is a talk about this, be flow control.

1086
01:07:55,350 --> 01:07:58,310
Things are more complicated because they are not on the same machine. 

1087
01:07:58,860 --> 01:08:00,060
We are on different machines. 

1088
01:08:00,490 --> 01:08:08,490
And with an unreliable network can be doing dcp choosing what is

1089
01:08:08,500 --> 01:08:12,670
called a sliding window protocol as a byte and not packet level. 

1090
01:08:14,910 --> 01:08:21,400
And there are 22 types go back and is this a bit a hole

1091
01:08:21,930 --> 01:08:24,250
near and selectively be disappeared? 

1092
01:08:27,860 --> 01:08:28,570
The star hall, 

1093
01:08:29,690 --> 01:08:30,970
new reno and sack, 

1094
01:08:31,630 --> 01:08:35,660
are the different types of pc ps. 

1095
01:08:36,410 --> 01:08:38,410
We are going to talk about more about them, 

1096
01:08:38,420 --> 01:08:40,780
a little next lecture, 

1097
01:08:43,300 --> 01:08:44,480
go back and meeting. 

1098
01:08:44,900 --> 01:08:45,870
Here is a difference. 

1099
01:08:49,240 --> 01:08:50,630
We explain the packet level. 

1100
01:08:50,640 --> 01:08:51,390
Before it's easier. 

1101
01:08:51,400 --> 01:08:55,540
I sent them packets. 

1102
01:08:57,830 --> 01:08:59,810
And the 5/5 packet was lost. 

1103
01:09:01,390 --> 01:09:03,500
The receiver gets the first four packets, 

1104
01:09:03,510 --> 01:09:05,260
and then the last five packets, 

1105
01:09:05,430 --> 01:09:07,420
1234, and 6789, 10.

1106
01:09:09,570 --> 01:09:10,290
Please go back. 

1107
01:09:10,300 --> 01:09:15,750
And you are going to go back and resent from back at 5:00. 

1108
01:09:16,150 --> 01:09:17,870
So i'm going to pretend five, 

1109
01:09:18,190 --> 01:09:19,980
and 6789, 10,

1110
01:09:19,990 --> 01:09:22,500
despite the fact the 6798, 10,

1111
01:09:23,240 --> 01:09:27,080
we have already received by the receipt by the spiders, by the recipient.

1112
01:09:29,990 --> 01:09:31,120
So you miss something, 

1113
01:09:31,560 --> 01:09:33,640
you restart from that missing packet, 

1114
01:09:35,160 --> 01:09:39,070
all the way selective repeat like the name implies. 

1115
01:09:39,320 --> 01:09:42,290
If you lose a packet in our previous examples, a packet five,

1116
01:09:44,530 --> 01:09:45,720
we send only back at five. 

1117
01:09:48,910 --> 01:09:51,470
Why doesn't everyone implement selective repeat, 

1118
01:09:51,480 --> 01:09:53,590
which seems much easier, 

1119
01:09:53,600 --> 01:09:55,510
much in a much more efficient? 

1120
01:09:56,090 --> 01:09:57,360
Because it's more complex. 

1121
01:09:59,110 --> 01:10:02,750
Go back and is my simple thing for all the less efficient. 

1122
01:10:05,580 --> 01:10:07,020
Now is the dcp flow control. 

1123
01:10:07,030 --> 01:10:10,420
The receiver tells us that how many more buys it can receive

1124
01:10:10,430 --> 01:10:11,900
without overflowing this buffer. 

1125
01:10:13,910 --> 01:10:17,350
I'm going to tell you I can receive 1 kilowatt. 

1126
01:10:20,320 --> 01:10:21,200
And in some way, 

1127
01:10:21,210 --> 01:10:28,780
this tells you that you can send me one kilobyte of data before you hear

1128
01:10:28,790 --> 01:10:30,220
from me whether I receive anything. 

1129
01:10:32,900 --> 01:10:33,230
Right? 

1130
01:10:33,710 --> 01:10:36,870
Because you're now based on what I told you that I can get one kilobyte, 

1131
01:10:36,880 --> 01:10:41,720
but because you cannot send me more to be before you hear from me that

1132
01:10:41,730 --> 01:10:42,600
like you can send more. 

1133
01:10:44,190 --> 01:10:45,150
This is advertising. 

1134
01:10:47,480 --> 01:10:48,750
Now, like I mentioned,

1135
01:10:49,320 --> 01:10:53,690
for the pcp the protocol is not at the packet level as a byte level. 

1136
01:10:54,700 --> 01:10:58,490
The acknowledgment as a recipient, i'm telling you,

1137
01:10:59,070 --> 01:11:05,080
i'm acknowledgment, contain the sequence number of a byte of the next byte.

1138
01:11:05,580 --> 01:11:06,870
The receiver expects. 

1139
01:11:09,960 --> 01:11:13,590
This means that i'm telling you that acknowledgment contains a number, 

1140
01:11:13,600 --> 01:11:15,230
the sequence number 100. 

1141
01:11:16,100 --> 01:11:17,300
This means that I received, 

1142
01:11:17,310 --> 01:11:23,350
i'm telling you implicitly that I received all the bytes up to 99. 

1143
01:11:25,710 --> 01:11:26,510
There is no gap. 

1144
01:11:26,770 --> 01:11:28,090
All of them up to a 99. 

1145
01:11:33,060 --> 01:11:35,920
And the sequence number is start to count. 

1146
01:11:36,170 --> 01:11:39,140
It's like, is from the fast first byte.

1147
01:11:39,940 --> 01:11:42,390
So the first byte, which will send up to the connection of that.

1148
01:11:44,680 --> 01:11:45,010
Right? 

1149
01:11:50,430 --> 01:11:53,860
This is a very simple diagram showing the sending process, 

1150
01:11:53,870 --> 01:11:55,020
the receiving process. 

1151
01:11:55,520 --> 01:11:57,180
And the buffer are the receiver. 

1152
01:12:00,590 --> 01:12:03,710
The dcpip is implemented in the kernel. 

1153
01:12:03,720 --> 01:12:04,430
Remember, 

1154
01:12:05,050 --> 01:12:12,030
what you discussed is about bsd unix bsd we said that

1155
01:12:12,970 --> 01:12:20,870
the dcpip is part of that was first implemented

1156
01:12:20,880 --> 01:12:22,310
in the bsdi think, 

1157
01:12:22,320 --> 01:12:23,670
4.3 version. 

1158
01:12:24,640 --> 01:12:29,140
And it's part of your legacy is one of the biggest achievements

1159
01:12:30,210 --> 01:12:31,540
in the open source software, 

1160
01:12:33,770 --> 01:12:34,720
because that's internet. 

1161
01:12:41,090 --> 01:12:42,210
Why do you do that? 

1162
01:12:42,220 --> 01:12:42,810
Also? 

1163
01:12:42,980 --> 01:12:45,570
That is because you cannot do context switching. 

1164
01:12:45,900 --> 01:12:47,410
You cannot do it application level again, 

1165
01:12:47,420 --> 01:12:50,930
performance at one garbage per second. 

1166
01:12:51,720 --> 01:12:54,310
Typically, the packers have been 1,500 bytes,

1167
01:12:54,960 --> 01:12:56,050
the ip packets. 

1168
01:12:56,970 --> 01:13:00,810
This takes to send, like one garbage per second is 12 set of micro seconds.

1169
01:13:01,790 --> 01:13:04,000
And if it's 100 bytes packets, 

1170
01:13:04,010 --> 01:13:06,420
it's lesson on my one microsecond. 

1171
01:13:06,430 --> 01:13:08,580
And by the way, one gap is per second is slow.

1172
01:13:09,250 --> 01:13:11,240
Today we are talking about ten cabbies per second, 

1173
01:13:11,250 --> 01:13:12,680
40 cabbies per second, 

1174
01:13:13,050 --> 01:13:14,730
100 cabbies per second connection. 

1175
01:13:15,980 --> 01:13:17,170
There is no way you can do context. 

1176
01:13:17,180 --> 01:13:19,090
Switching starts that fast to send every packet, 

1177
01:13:20,100 --> 01:13:21,510
the application to send every packet. 

1178
01:13:25,950 --> 01:13:28,150
And actually, 

1179
01:13:28,160 --> 01:13:29,590
there is not only one buffer. 

1180
01:13:29,600 --> 01:13:31,030
There are multiple buffers. 

1181
01:13:31,040 --> 01:13:34,750
There is a buffer, which is between the process and in process.

1182
01:13:35,570 --> 01:13:36,480
The piano. 

1183
01:13:37,500 --> 01:13:40,010
Again, you cannot have contact switching on every packet.

1184
01:13:41,450 --> 01:13:46,930
Then it's between the receiving operating system that the operating system

1185
01:13:46,940 --> 01:13:49,610
on the receiving force and the receiving process. 

1186
01:13:50,270 --> 01:13:52,720
And then you have a buffer actually, 

1187
01:13:57,150 --> 01:14:01,510
between the two hosts as atcpiip level, the transport level.

1188
01:14:05,900 --> 01:14:11,150
There is a buffer that operating system on the recipient cost is maintaining, 

1189
01:14:11,580 --> 01:14:14,780
you get the packets from the sending post. 

1190
01:14:18,320 --> 01:14:20,880
So here it's in more details how things that happen. 

1191
01:14:21,770 --> 01:14:22,990
You have this buffer here, 

1192
01:14:23,000 --> 01:14:24,390
and you have this buffer here. 

1193
01:14:25,260 --> 01:14:26,930
You see me at the end, 

1194
01:14:26,940 --> 01:14:28,050
host and whispering host. 

1195
01:14:29,110 --> 01:14:33,730
And but I tell you, 

1196
01:14:33,740 --> 01:14:37,990
so you have the state buyers to produce our consumers sending process, 

1197
01:14:38,460 --> 01:14:43,650
sending pcb sending dcp receiving pcb receiving dcp receiving process. 

1198
01:14:48,530 --> 01:14:51,360
Let's take up of these examples. 

1199
01:14:53,440 --> 01:14:56,790
They say the maximal ip packet size is 100 bytes. 

1200
01:14:58,560 --> 01:15:01,310
The size of the receiving buffer is the receiving buffer, 

1201
01:15:02,130 --> 01:15:03,670
is 300 by bytes. 

1202
01:15:05,250 --> 01:15:10,140
Recall, the acknowledgment indicates the next expected byte in sequence,

1203
01:15:10,150 --> 01:15:12,260
not the last recite received byte. 

1204
01:15:14,120 --> 01:15:16,470
We assume that these are circular buffers. 

1205
01:15:17,840 --> 01:15:19,270
What is a circular buffer? 

1206
01:15:20,670 --> 01:15:28,300
A buffer has a size of n you may have an infinite sequence of bytes

1207
01:15:29,510 --> 01:15:31,010
and a bite. 

1208
01:15:33,250 --> 01:15:42,320
We sequence number k is stored in a location with the index k mod and+1 in

1209
01:15:42,330 --> 01:15:42,760
the buffer. 

1210
01:15:44,920 --> 01:15:46,430
This is a for example, 

1211
01:15:46,440 --> 01:15:49,990
these are sequence numbers of hello world. 

1212
01:15:51,640 --> 01:15:54,690
So say, age is a sequence number 27.

1213
01:15:55,770 --> 01:16:00,920
And l the last l is sequence number 76. 

1214
01:16:01,980 --> 01:16:05,650
And the buffer has only ten entries. 

1215
01:16:07,120 --> 01:16:07,500
Right? 

1216
01:16:08,500 --> 01:16:10,050
Then this is how you map it. 

1217
01:16:11,710 --> 01:16:18,370
27 is 27 mod n it's seven, 

1218
01:16:18,740 --> 01:16:21,850
because any stand and+1, it's eight.

1219
01:16:23,040 --> 01:16:24,230
So n plus, 

1220
01:16:25,240 --> 01:16:26,150
was it so sorry? 

1221
01:16:26,660 --> 01:16:28,220
This is age. 

1222
01:16:28,230 --> 01:16:31,080
We are looking at e which is sequence number 28, 

1223
01:16:31,090 --> 01:16:34,440
sequence number twenty eight twenty eight, more ten,

1224
01:16:35,290 --> 01:16:36,280
+1 is mine. 

1225
01:16:39,500 --> 01:16:48,680
This is how this data is a buffer data from e to r the blue, 

1226
01:16:48,690 --> 01:16:50,880
which is in blue, shown in blue,

1227
01:16:51,490 --> 01:16:53,970
is a buffer in the simpler buffer. 

1228
01:17:04,010 --> 01:17:04,210
Initially, 

1229
01:17:05,970 --> 01:17:11,520
we are going to have a bunch of variables which. two different

1230
01:17:11,530 --> 01:17:12,320
things in the buffer, 

1231
01:17:13,510 --> 01:17:15,050
three on the sending part, 

1232
01:17:15,620 --> 01:17:16,780
three on the receiving part. 

1233
01:17:18,500 --> 01:17:20,100
You have last bite to be done, 

1234
01:17:20,820 --> 01:17:23,060
which is the last byte written by sending process. 

1235
01:17:24,130 --> 01:17:26,520
Last by scent is a last byte, 

1236
01:17:26,860 --> 01:17:29,120
send by sender to the receiver. 

1237
01:17:29,870 --> 01:17:35,890
Last byte act is a last act byte by the receiver is a sender. 

1238
01:17:37,020 --> 01:17:40,450
Last byte received now is on the receiving side. 

1239
01:17:41,050 --> 01:17:43,730
Is the last bite received by the receiver from sender. 

1240
01:17:44,300 --> 01:17:49,250
Next bite expected is the last in sequence byte expected by receiver. 

1241
01:17:57,280 --> 01:18:02,890
And the last byte read is the last bite read by the receiving process. 

1242
01:18:05,340 --> 01:18:07,060
Actually, for the next byte expected,

1243
01:18:07,070 --> 01:18:10,060
this should be the next in sequence by the expected by the cigarette, 

1244
01:18:10,570 --> 01:18:11,140
not last. 

1245
01:18:17,300 --> 01:18:17,890
Okay. 

1246
01:18:18,360 --> 01:18:22,230
Now the advertised window is a number of bytes like we decide the disappear

1247
01:18:22,240 --> 01:18:23,430
receiver can receive. 

1248
01:18:24,710 --> 01:18:25,650
So what is this one? 

1249
01:18:27,670 --> 01:18:29,100
Let's say with blue here, 

1250
01:18:29,470 --> 01:18:34,490
a is a bite which are already in the receiving the receiver buffer. 

1251
01:18:36,440 --> 01:18:39,150
The advertising window is a maximum receive buffer. 

1252
01:18:39,160 --> 01:18:46,690
It's a maximum buffer size minus the last bite

1253
01:18:46,700 --> 01:18:51,480
received this one, 

1254
01:18:52,260 --> 01:18:58,230
and the difference between the last byte received and last by thread. 

1255
01:18:58,940 --> 01:18:59,370
Right? 

1256
01:18:59,380 --> 01:19:00,930
So basically, this is,

1257
01:19:01,790 --> 01:19:06,220
You need to subtract from the maximum received buffer. 

1258
01:19:06,230 --> 01:19:08,300
So from the buffer size of the receiver, 

1259
01:19:08,990 --> 01:19:12,910
how many bytes are still in the buffer, 

1260
01:19:13,430 --> 01:19:16,870
which are not yet read by the receiving process? 

1261
01:19:20,770 --> 01:19:26,120
On the sending process side is similar to you have a sender window, 

1262
01:19:26,840 --> 01:19:29,800
which is a number of buys atcp sender can send. 

1263
01:19:31,220 --> 01:19:41,020
And the center window is advertised window minus last by cent, 

1264
01:19:41,030 --> 01:19:42,420
minus last by act. 

1265
01:19:43,460 --> 01:19:44,570
Intuitively, 

1266
01:19:44,580 --> 01:19:48,550
this means that I can send as a sender. 

1267
01:19:48,560 --> 01:19:52,220
I can send a number of bytes, 

1268
01:19:52,990 --> 01:19:58,100
which is by subtracting what you told me that you can receive, 

1269
01:19:58,820 --> 01:19:59,930
what I always send, 

1270
01:19:59,940 --> 01:20:01,210
I haven't heard from it. 

1271
01:20:03,360 --> 01:20:05,490
And I'm finishing with this example. 

1272
01:20:05,790 --> 01:20:08,980
Say you told me the advertising window is one kilobyte. 

1273
01:20:10,090 --> 01:20:13,670
And since you told me that the advertising window is one kilobyte, 

1274
01:20:14,280 --> 01:20:16,660
I send you 100 bytes. 

1275
01:20:18,650 --> 01:20:23,530
How many more bytes I can send you without hearing from the answer? 

1276
01:20:23,850 --> 01:20:24,690
It's 900. 

1277
01:20:26,300 --> 01:20:26,710
Right? 

1278
01:20:27,880 --> 01:20:32,410
So that's basically what the center window tries to capture. 

1279
01:20:34,760 --> 01:20:35,390
Is this. 

1280
01:20:36,680 --> 01:20:38,190
I'm going to stop here. 

1281
01:20:38,870 --> 01:20:41,780
And this materials we've done in this lecture, 

1282
01:20:42,360 --> 01:20:43,880
you'll be part of the midterm. 

1283
01:20:44,810 --> 01:20:50,250
And again, best of luck with everything and happy sensitive area.


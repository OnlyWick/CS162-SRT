1
00:00:13,810 --> 00:00:14,740
Hello, everyone.

2
00:00:14,750 --> 00:00:22,000
Welcome to the next to last lecture of this semester, 

3
00:00:24,730 --> 00:00:27,800
the one to the next to the last week of classes. 

4
00:00:29,280 --> 00:00:31,790
Today we are going to have a very interesting lecture, 

5
00:00:31,800 --> 00:00:35,590
and that will be on the dcp flow control and actually congestion control. 

6
00:00:38,050 --> 00:00:39,160
Remember, 

7
00:00:39,170 --> 00:00:41,560
here we are talking about the transfer layer. 

8
00:00:42,150 --> 00:00:44,780
This is about the networking stock, 

9
00:00:44,790 --> 00:00:46,100
the internet stock. 

10
00:00:47,190 --> 00:00:54,240
And as you can see the transport layer and if you remember sits on top

11
00:00:54,250 --> 00:00:55,520
of the network layer, 

12
00:00:56,700 --> 00:01:02,150
the transport layer it's implemented actually is the first layer if you go

13
00:01:02,160 --> 00:01:04,010
from bottom up, 

14
00:01:04,780 --> 00:01:11,080
which is only implemented by n hosts is not implemented by the network. 

15
00:01:12,460 --> 00:01:13,030
Okay. 

16
00:01:14,650 --> 00:01:22,720
And one of the key services that the transport layer is providing, 

17
00:01:22,730 --> 00:01:23,880
if you remember, 

18
00:01:24,610 --> 00:01:32,360
it's multiplexing and multiplexing connections on the same machines, 

19
00:01:33,000 --> 00:01:35,280
between the processes on the same machines. 

20
00:01:35,930 --> 00:01:36,140
Right? 

21
00:01:36,960 --> 00:01:41,510
The internet as another player doesn't differentiate between processes. 

22
00:01:41,760 --> 00:01:44,890
The letter blair addresses only machines, 

23
00:01:45,400 --> 00:01:46,470
only and hosts. 

24
00:01:47,150 --> 00:01:55,150
So nato clare is going to get take a packet and send it to another

25
00:01:56,100 --> 00:02:02,040
and host whose address is in the packet header as destination address. 

26
00:02:02,700 --> 00:02:07,050
But once the packet gets to the end to that end host, 

27
00:02:07,420 --> 00:02:11,460
it needs to be delivered to a particular process to particular application

28
00:02:13,920 --> 00:02:15,070
to being processed. 

29
00:02:16,360 --> 00:02:21,230
The way you differentiate between these different processes is using poor numbers. 

30
00:02:22,460 --> 00:02:27,460
The transporter is the one who uses four numbers to the multiplex of packet

31
00:02:27,470 --> 00:02:30,460
when it arrives of an host and deliver it

32
00:02:31,070 --> 00:02:33,780
to the proper process. 

33
00:02:35,070 --> 00:02:35,660
Okay? 

34
00:02:36,240 --> 00:02:38,190
As you again, if you remember,

35
00:02:38,200 --> 00:02:40,030
in the internet as a transport layer, 

36
00:02:40,040 --> 00:02:41,670
we have two protocols, 

37
00:02:41,680 --> 00:02:47,740
udp and dcp the user data ground protocol and transport control protocol. 

38
00:02:51,680 --> 00:02:58,930
The udp doesn't do much more besides multiplexing and many multiplexing of packets

39
00:03:00,740 --> 00:03:02,180
from and to processes. 

40
00:03:03,830 --> 00:03:07,050
So we are not going to talk more about that. 

41
00:03:07,490 --> 00:03:09,210
Now, the transfer control protocol,

42
00:03:09,220 --> 00:03:13,540
which is the one we are going to talk most. 

43
00:03:14,090 --> 00:03:19,360
Mostly in this lecture is providing two additional services flow control. 

44
00:03:20,160 --> 00:03:22,750
We talk a little bit at the end of the last lecture, 

45
00:03:22,760 --> 00:03:26,310
but I am a to start again talking about it. 

46
00:03:26,710 --> 00:03:28,390
We have more time during this lecture, 

47
00:03:28,400 --> 00:03:30,070
and it's a very important topic. 

48
00:03:30,970 --> 00:03:32,250
And congestion control. 

49
00:03:32,880 --> 00:03:36,370
The difference between the two is that the flow control. 

50
00:03:36,580 --> 00:03:39,930
The goal of the flow control is not overflow. 

51
00:03:40,490 --> 00:03:42,540
The receiver, a slower receiver,

52
00:03:42,550 --> 00:03:46,540
the congestion control is to the north of our flows and network. 

53
00:03:46,950 --> 00:03:52,350
Overflowing means that the sender sends more data than the receiver

54
00:03:52,360 --> 00:03:53,590
or the network can hand. 

55
00:03:56,040 --> 00:03:59,660
During this lecture, we are going to talk about flow control and condition.

56
00:04:02,450 --> 00:04:03,330
Any questions? 

57
00:04:06,730 --> 00:04:10,000
Again, from the last lecture and from many lectures ago,

58
00:04:10,540 --> 00:04:15,850
if you remember this producer consumer is a bounded buffer, 

59
00:04:15,860 --> 00:04:17,450
meaning that it has, 

60
00:04:17,830 --> 00:04:22,630
we can accept only a finer set of items in the buffer. 

61
00:04:24,390 --> 00:04:30,560
This is improvised implements a natural a form of flow control, 

62
00:04:30,570 --> 00:04:36,470
because if the consumer cannot consume as fast as a producer percents that

63
00:04:36,480 --> 00:04:37,870
I died into the buffer, 

64
00:04:39,110 --> 00:04:40,860
inserts item into the buffer, 

65
00:04:40,870 --> 00:04:42,650
the buffer will get feel. 

66
00:04:42,660 --> 00:04:46,410
And when they get when the gap buffer is full, 

67
00:04:46,710 --> 00:04:50,960
the producer can no longer add new items in the buffer. 

68
00:04:52,630 --> 00:04:54,520
So the producer has to stop. 

69
00:04:55,190 --> 00:05:01,720
It's going to slow down over time to match the speed that with a consumer

70
00:05:01,980 --> 00:05:04,090
can read the data from the buffer. 

71
00:05:05,960 --> 00:05:07,000
That makes sense. 

72
00:05:10,320 --> 00:05:12,500
So that's pretty much you. 

73
00:05:14,050 --> 00:05:15,180
So obviously, 

74
00:05:15,190 --> 00:05:19,820
the one problem you have with this one and we are going to discuss more

75
00:05:19,830 --> 00:05:21,900
about it is that

76
00:05:23,050 --> 00:05:26,550
if producer and consumer as a buffer on a single machine, 

77
00:05:26,560 --> 00:05:27,450
things are easy, 

78
00:05:27,460 --> 00:05:31,100
but here the producer and consumers are on different machines. 

79
00:05:31,620 --> 00:05:34,290
How do you now produce a being on one machine? 

80
00:05:34,300 --> 00:05:36,450
How does it now is a buffer on? 

81
00:05:36,820 --> 00:05:38,540
The consumer side is full? 

82
00:05:43,430 --> 00:05:48,780
He needs to somehow wait for some acknowledgment from the consumer that

83
00:05:49,590 --> 00:05:51,060
it's okay to send more data. 

84
00:05:53,690 --> 00:05:58,710
The simplest version of that is called stop and wait, 

85
00:05:58,720 --> 00:06:00,270
and is as simple as you can think of. 

86
00:06:01,180 --> 00:06:04,930
We are going to use a lot of this kind of diagram, 

87
00:06:04,940 --> 00:06:10,050
and you see you have sender and the receiver on both sides. 

88
00:06:10,780 --> 00:06:14,990
And then the time goes down. 

89
00:06:18,510 --> 00:06:20,660
The oldest time is at the top, 

90
00:06:20,670 --> 00:06:22,180
the newest time it is about. 

91
00:06:23,460 --> 00:06:25,060
So stop and why it is very simple. 

92
00:06:26,460 --> 00:06:27,500
You send a packet, 

93
00:06:29,680 --> 00:06:30,910
you wait for an acknowledgment, 

94
00:06:30,920 --> 00:06:34,790
and only after extent you got the acknowledgment, you send another pack.

95
00:06:38,340 --> 00:06:38,770
Okay. 

96
00:06:43,850 --> 00:06:47,480
Now, there are several important aspects in our metrics here.

97
00:06:47,490 --> 00:06:52,880
So it is this d which is a delay or one way delay. 

98
00:06:53,090 --> 00:06:58,680
How long it takes a packet to get to the receiver from the center? 

99
00:07:00,110 --> 00:07:00,450
Right? 

100
00:07:02,640 --> 00:07:03,910
It takes some time. 

101
00:07:04,400 --> 00:07:06,710
There are different overheads and at all, 

102
00:07:07,080 --> 00:07:08,320
on top of that, obviously,

103
00:07:08,330 --> 00:07:09,820
there is a speed of light. 

104
00:07:13,160 --> 00:07:15,710
So across the continent, I think, is what?

105
00:07:16,100 --> 00:07:19,740
Maybe than 20 millisecond in us something like that. 

106
00:07:22,970 --> 00:07:24,750
And now you need to wait for acknowledgment. 

107
00:07:24,760 --> 00:07:26,710
So acknowledgment, it might take another,

108
00:07:27,700 --> 00:07:28,900
the same amount of time, 

109
00:07:29,420 --> 00:07:32,040
assuming that asymmetric capacity metrics, 

110
00:07:32,130 --> 00:07:34,240
it's not necessary for the past to be symmetrics. 

111
00:07:35,320 --> 00:07:38,350
Because as the packet from the sender to the receiver, 

112
00:07:38,360 --> 00:07:42,110
can go on a different path from the sender to the back from the receiver

113
00:07:42,120 --> 00:07:42,830
to the sender. 

114
00:07:43,260 --> 00:07:45,270
Even if they go to on the same path, 

115
00:07:45,740 --> 00:07:48,650
there can be different level of congestion in the network is, 

116
00:07:49,020 --> 00:07:52,020
for instance, at a given time, in the day,

117
00:07:52,210 --> 00:07:56,390
is not taking you the same time to go from auckland to san jose, 

118
00:07:58,280 --> 00:08:00,660
as to go from san jose 2o'clock. 

119
00:08:01,690 --> 00:08:02,020
Right? 

120
00:08:02,920 --> 00:08:04,230
Different level of congestion. 

121
00:08:05,190 --> 00:08:06,820
But anyway, for simplicity,

122
00:08:06,830 --> 00:08:12,820
assuming assume that you have the same one way latency, 

123
00:08:13,290 --> 00:08:14,360
as this, assume no congestion.

124
00:08:14,370 --> 00:08:15,980
So if there are no congestion, 

125
00:08:15,990 --> 00:08:18,410
so it does take the same amount of time. 

126
00:08:19,210 --> 00:08:20,450
And now, 

127
00:08:22,140 --> 00:08:28,780
but then you need to wait for two times d in the best case scenario to get

128
00:08:28,790 --> 00:08:29,710
the acknowledgment back. 

129
00:08:30,940 --> 00:08:33,060
And these 2 times this round trip time, 

130
00:08:33,460 --> 00:08:34,630
it's called round trip time. 

131
00:08:34,640 --> 00:08:38,860
Round trip time is how long it takes a packet to travel from sender

132
00:08:38,870 --> 00:08:39,980
to receiver and back. 

133
00:08:42,240 --> 00:08:42,620
Okay. 

134
00:08:46,970 --> 00:08:48,910
Now, what is this throughput?

135
00:08:49,600 --> 00:08:50,910
How many packets you can send? 

136
00:08:52,720 --> 00:08:53,270
Let's say, 

137
00:08:54,160 --> 00:08:56,410
let me give you some numbers. 

138
00:08:57,420 --> 00:08:59,750
So say, is that one way latency?

139
00:09:00,290 --> 00:09:06,360
It's 1 million seconds using this protocol, 

140
00:09:08,160 --> 00:09:09,280
assuming that everything is symmetric, 

141
00:09:09,850 --> 00:09:13,200
all the one way latency are the same for all packets. 

142
00:09:13,930 --> 00:09:15,920
How many packets I can send in 1second? 

143
00:09:18,690 --> 00:09:20,480
I know latency is 1millisecond. 

144
00:09:22,510 --> 00:09:28,510
And I am asking you how many packets I can send in 1second? 

145
00:09:40,550 --> 00:09:41,480
500. 

146
00:09:42,540 --> 00:09:43,750
That's correct, simon.

147
00:09:46,420 --> 00:09:48,530
Indeed, that's the correct answer.

148
00:09:48,540 --> 00:09:49,890
And it's very simple, right?

149
00:09:49,900 --> 00:09:53,010
It's like we can send only one packet per round trip time, 

150
00:09:53,890 --> 00:09:57,520
because you need to wait for the acknowledgment before you send another packet. 

151
00:09:58,180 --> 00:10:01,470
The round trip time is twice the one way delay. 

152
00:10:02,090 --> 00:10:04,060
Latency is too many seconds. 

153
00:10:04,460 --> 00:10:07,610
So 1second over 2 million seconds. 

154
00:10:07,900 --> 00:10:12,370
It's1,000 million seconds over two is500. 

155
00:10:15,110 --> 00:10:15,660
Good. 

156
00:10:18,500 --> 00:10:19,230
Sounds good. 

157
00:10:20,960 --> 00:10:23,350
So how fast can you send data? 

158
00:10:23,360 --> 00:10:24,950
You answer that question? 

159
00:10:25,420 --> 00:10:30,570
Again, the little law applies on this case as a number of packets.

160
00:10:30,580 --> 00:10:35,530
It's be how many packets you have in the system times the round trip time. 

161
00:10:35,540 --> 00:10:40,920
And b will be the number of packets you have in the system. 

162
00:10:40,930 --> 00:10:43,450
Sorry, you the number of packets you have in the system.

163
00:10:43,460 --> 00:10:44,370
It's only one pack. 

164
00:10:45,200 --> 00:10:45,450
Right? 

165
00:10:46,340 --> 00:10:48,230
So you have one packet priority, 

166
00:10:50,190 --> 00:10:50,990
like we discuss. 

167
00:10:55,950 --> 00:10:56,340
Now, 

168
00:10:57,130 --> 00:10:59,030
let's do a little bit more complicated here. 

169
00:10:59,040 --> 00:10:59,990
Now you have, 

170
00:11:00,580 --> 00:11:02,170
in this particular case, 

171
00:11:02,550 --> 00:11:07,660
you'll have what is the throughput in terms of the number of bytes, 

172
00:11:07,670 --> 00:11:08,900
not in the number of packers? 

173
00:11:08,910 --> 00:11:11,800
Like I mentioned, I ask you a little bit earlier.

174
00:11:12,340 --> 00:11:15,280
If you have the round trip time of 100millisecond. 

175
00:11:15,720 --> 00:11:18,340
So one way the latency is 50millisecond, 

176
00:11:18,810 --> 00:11:20,550
a packet has100, 

177
00:11:21,030 --> 00:11:26,100
1,500bytes that what is a throughput in terms of bits per second? 

178
00:11:27,020 --> 00:11:28,290
It's very simple, right?

179
00:11:28,300 --> 00:11:37,830
You can send one packet means1,500×8beats in0.1seconds. 

180
00:11:37,840 --> 00:11:40,190
So it's 120 kilobits per second. 

181
00:11:41,660 --> 00:11:42,000
Okay. 

182
00:11:44,770 --> 00:11:46,480
The main.here, though,

183
00:11:46,490 --> 00:11:48,160
is that as you can see, 

184
00:11:48,720 --> 00:11:50,150
this is very simple protocol. 

185
00:11:50,160 --> 00:11:51,550
You can implement it right away. 

186
00:11:51,560 --> 00:11:54,720
So it's at the advantage of this protocol. 

187
00:11:58,160 --> 00:11:58,940
It's simplicity. 

188
00:11:59,700 --> 00:12:01,730
On the other hand, is very inefficient.

189
00:12:01,740 --> 00:12:02,390
You see, 

190
00:12:03,020 --> 00:12:09,000
he's taking, you cannot send more than at 120 kilobits per second.

191
00:12:09,290 --> 00:12:11,680
No matter how fast than a turkey is, 

192
00:12:15,380 --> 00:12:18,700
because because in this case, 

193
00:12:18,710 --> 00:12:20,660
a throughput is governed only, 

194
00:12:20,670 --> 00:12:21,820
by the one way letters. 

195
00:12:23,870 --> 00:12:27,580
The one way latency will not depend in moscow cases. 

196
00:12:27,590 --> 00:12:29,820
If you think about its mostly speed of light, 

197
00:12:30,310 --> 00:12:34,980
it will not depend if there's a speed of light component of the latency

198
00:12:34,990 --> 00:12:36,540
of how fast is a network. 

199
00:12:36,940 --> 00:12:37,830
How fast is the link? 

200
00:12:38,940 --> 00:12:42,540
If you have 100 megabytes per second or one gigabytes per second bit

201
00:12:42,550 --> 00:12:43,840
or ten gigabytes per second, 

202
00:12:44,440 --> 00:12:48,830
you can still only send at 120 kilobits per second. 

203
00:12:51,590 --> 00:12:52,730
So how can you send more? 

204
00:12:54,510 --> 00:12:57,250
How would you modify this protocol to send more

205
00:13:07,930 --> 00:13:09,050
batch acknowledgement? 

206
00:13:10,060 --> 00:13:11,380
So if you bat, it's true.

207
00:13:11,710 --> 00:13:13,300
But if you bat the acknowledgment, 

208
00:13:13,310 --> 00:13:18,170
this means that you have to send a packet before you receive

209
00:13:18,180 --> 00:13:19,450
the acknowledgment for that pack, 

210
00:13:20,630 --> 00:13:22,040
your intuition is correct. 

211
00:13:22,620 --> 00:13:27,180
But as you'll see, 

212
00:13:27,190 --> 00:13:30,260
and that's big part of the solution. 

213
00:13:30,570 --> 00:13:32,690
But as you see, things will not be as easy.

214
00:13:35,090 --> 00:13:37,910
It's exactly simon and allison. 

215
00:13:38,160 --> 00:13:39,390
It's the same. 

216
00:13:40,120 --> 00:13:41,390
You don't need to get block on act, 

217
00:13:41,400 --> 00:13:43,150
because if you get block on a knack, 

218
00:13:43,540 --> 00:13:47,430
then it's no longer you can send packets. 

219
00:13:48,800 --> 00:13:49,120
Right? 

220
00:13:53,530 --> 00:13:55,760
But the problem is the following. 

221
00:13:56,480 --> 00:13:59,390
Okay, you don't draw it's, they do it.

222
00:13:59,400 --> 00:14:01,150
Your intuition is absolutely correct. 

223
00:14:01,480 --> 00:14:05,270
The main problem here is that I need to wait for an acknowledgment

224
00:14:05,280 --> 00:14:08,130
from the previous packet before I can send the next packet. 

225
00:14:09,490 --> 00:14:10,870
And the solution is, okay,

226
00:14:11,310 --> 00:14:12,430
don't wait for that. 

227
00:14:12,700 --> 00:14:12,800
Right? 

228
00:14:12,810 --> 00:14:16,440
Send more packets as a problem. 

229
00:14:16,610 --> 00:14:19,720
And if you don't have losses, 

230
00:14:20,330 --> 00:14:21,290
that will be great. 

231
00:14:23,010 --> 00:14:24,980
But if the packets are lost, 

232
00:14:26,930 --> 00:14:33,370
then here the acknowledgment serves to proposes one to slow you down, 

233
00:14:33,380 --> 00:14:35,490
to slow the sender down, right?

234
00:14:36,380 --> 00:14:37,200
To block the sender. 

235
00:14:37,880 --> 00:14:39,860
But the other one is also to say, 

236
00:14:40,090 --> 00:14:42,760
there's a packet has been successfully receipt. 

237
00:14:45,080 --> 00:14:46,900
So let's talk about losses. 

238
00:14:47,520 --> 00:14:48,730
So in the internet, 

239
00:14:48,960 --> 00:14:51,770
you are going to have losses like we discussed last time. 

240
00:14:52,420 --> 00:14:52,770
Right? 

241
00:14:53,090 --> 00:14:53,680
And actually, 

242
00:14:53,690 --> 00:14:58,750
dcp transfer control protocol is going also to provide reliability

243
00:14:58,760 --> 00:15:00,790
besides flow control and congestion control. 

244
00:15:02,490 --> 00:15:02,650
Right? 

245
00:15:02,660 --> 00:15:04,450
But as another player, 

246
00:15:04,460 --> 00:15:08,810
you are going to have losses be because many reasons, 

247
00:15:09,150 --> 00:15:11,120
it's like we discussed in the past. 

248
00:15:11,480 --> 00:15:18,130
We have your microwave can corrupt your wireless link, 

249
00:15:19,530 --> 00:15:21,770
even in optical network, in optical networks,

250
00:15:21,780 --> 00:15:23,090
abyss can be corrupted. 

251
00:15:23,840 --> 00:15:26,180
The wire can be bad, 

252
00:15:26,190 --> 00:15:28,770
not very well connected. 

253
00:15:28,780 --> 00:15:29,610
And many reasons. 

254
00:15:29,990 --> 00:15:36,330
Or like we will see the buffers in the routers are going to overflow, 

255
00:15:36,340 --> 00:15:37,690
and you are going to draw packets. 

256
00:15:40,880 --> 00:15:41,330
Now, 

257
00:15:43,340 --> 00:15:43,950
we, 

258
00:15:44,560 --> 00:15:47,350
when you with a packet, 

259
00:15:47,360 --> 00:15:48,830
you have associated, 

260
00:15:54,260 --> 00:15:55,020
basically, 

261
00:15:57,820 --> 00:15:58,710
as we'll see, 

262
00:16:00,400 --> 00:16:02,330
there are two way, 

263
00:16:02,340 --> 00:16:03,370
two, 

264
00:16:03,380 --> 00:16:06,010
or two ways to lose a packet here. 

265
00:16:07,010 --> 00:16:10,960
First of all, the packet doesn't get to the destination at all,

266
00:16:12,190 --> 00:16:12,660
is lost. 

267
00:16:13,360 --> 00:16:16,770
The second one, the packet is corrupted.

268
00:16:18,200 --> 00:16:19,350
You get the packet, 

269
00:16:19,660 --> 00:16:21,970
but some bits are flipped. 

270
00:16:23,470 --> 00:16:23,900
Okay? 

271
00:16:26,100 --> 00:16:27,290
On the receiver side, 

272
00:16:27,300 --> 00:16:32,460
you need to know that you need to make sure that you get all the packets, 

273
00:16:33,780 --> 00:16:35,740
the package you got are not corrupted. 

274
00:16:36,730 --> 00:16:37,260
And by the way, 

275
00:16:37,270 --> 00:16:40,620
you also want to make sure that you get each package exactly once delivered

276
00:16:40,630 --> 00:16:41,460
to the application. 

277
00:16:47,020 --> 00:16:48,540
So this acknowledgment, 

278
00:16:48,550 --> 00:16:51,080
like we see by soft earlier on, 

279
00:16:51,590 --> 00:16:58,890
they also serve as an acknowledgement that the packet was delivered to the destination. 

280
00:17:04,270 --> 00:17:06,200
So basically, if I am the receiver,

281
00:17:06,210 --> 00:17:07,400
I get the packet. 

282
00:17:07,890 --> 00:17:09,130
I check the packet. 

283
00:17:09,630 --> 00:17:10,960
Whether is correct? 

284
00:17:10,970 --> 00:17:12,840
How do I check the package that is correct? 

285
00:17:13,090 --> 00:17:14,620
They have the correct information. 

286
00:17:15,120 --> 00:17:15,840
How you do it? 

287
00:17:19,670 --> 00:17:20,780
You are the designer. 

288
00:17:27,100 --> 00:17:29,390
That's you do have a check sum, 

289
00:17:30,640 --> 00:17:31,980
like the check sound like parity, 

290
00:17:31,990 --> 00:17:33,600
be something more sophisticated than that. 

291
00:17:33,610 --> 00:17:34,680
But that's the idea. 

292
00:17:36,920 --> 00:17:39,070
The packet has a data and has a check sound. 

293
00:17:41,950 --> 00:17:44,340
You take the data and you could compute the checks, 

294
00:17:44,350 --> 00:17:45,460
are using the same algorithm. 

295
00:17:45,590 --> 00:17:49,500
You compare that the computed checks out is the same as the jackson in the back. 

296
00:17:50,220 --> 00:17:51,280
If they are the same, 

297
00:17:52,230 --> 00:17:53,880
you say this packet, 

298
00:17:53,890 --> 00:17:55,400
the data is correct. 

299
00:17:56,050 --> 00:17:57,720
Otherwise, you drop the back.

300
00:18:02,270 --> 00:18:04,200
Now, if a packet is dropped,

301
00:18:04,210 --> 00:18:05,760
like in our previous case, 

302
00:18:06,440 --> 00:18:06,830
right? 

303
00:18:08,820 --> 00:18:11,780
The question is that i'm sending a packet. 

304
00:18:12,450 --> 00:18:13,460
The packet is lost, 

305
00:18:14,260 --> 00:18:14,840
for instance, 

306
00:18:16,750 --> 00:18:20,470
or it gets a packet is get to the destination this job. 

307
00:18:22,410 --> 00:18:23,310
What i'm going to do, 

308
00:18:23,320 --> 00:18:31,210
so what i'm going to do because i'm going through it indefinitely, 

309
00:18:31,220 --> 00:18:34,810
because i'm going to wait for a knack which will never come. 

310
00:18:36,060 --> 00:18:41,510
So what you do here is basically very simple solution. 

311
00:18:42,330 --> 00:18:47,430
Basically, you wait for a timeout is like you in real life.

312
00:18:48,050 --> 00:18:51,130
You are waiting for your friend to call. 

313
00:18:52,840 --> 00:18:58,480
And he doesn't call at When it was the time you expected. 

314
00:19:00,980 --> 00:19:01,560
What do you do? 

315
00:19:03,450 --> 00:19:06,990
After a while, you are calling your friend,

316
00:19:08,590 --> 00:19:08,910
right? 

317
00:19:09,430 --> 00:19:11,060
Or you go to meet someone. 

318
00:19:11,880 --> 00:19:13,360
And that person doesn't show up. 

319
00:19:14,180 --> 00:19:16,530
What do you wait for a while? 

320
00:19:16,810 --> 00:19:17,340
And then you leave. 

321
00:19:17,350 --> 00:19:19,300
All right. 

322
00:19:19,310 --> 00:19:23,710
So now, obviously,

323
00:19:26,760 --> 00:19:27,910
again, it's like,

324
00:19:29,060 --> 00:19:31,260
it's very important to notice here, 

325
00:19:32,940 --> 00:19:35,530
by the way, that if you don't get the acknowledgment,

326
00:19:36,330 --> 00:19:40,610
it doesn't mean that the receiver that it didn't give the original message. 

327
00:19:40,980 --> 00:19:41,760
Now, right?

328
00:19:42,040 --> 00:19:45,090
Can you give me an example in noisy receiver? 

329
00:19:45,310 --> 00:19:49,060
I didn't hear about the acknowledgment by the receiver got the packet, 

330
00:19:49,070 --> 00:19:50,180
and the packet is correct. 

331
00:19:54,620 --> 00:19:55,850
I send you the packet. 

332
00:19:55,860 --> 00:19:57,730
I I don't hear from you back. 

333
00:20:00,300 --> 00:20:00,780
Yes. 

334
00:20:01,390 --> 00:20:03,980
The acknowledgment is lost. 

335
00:20:04,270 --> 00:20:06,990
The acknowledgment is also packet that can be lost as far. 

336
00:20:08,030 --> 00:20:08,430
Right? 

337
00:20:12,860 --> 00:20:14,140
So basically, 

338
00:20:16,070 --> 00:20:17,580
you may send a packet. 

339
00:20:19,070 --> 00:20:20,530
Me maybe sends a packet, 

340
00:20:21,110 --> 00:20:23,380
because they don't get the acknowledgment on the timeout. 

341
00:20:25,300 --> 00:20:27,690
Now, the receiver gets an application of the packet.

342
00:20:27,820 --> 00:20:30,810
That's why the receiver has to have a way also to differentiate

343
00:20:30,820 --> 00:20:33,740
between duplicate as the original packet. 

344
00:20:34,270 --> 00:20:37,460
Because if the original packet was already delivered to the destination

345
00:20:37,470 --> 00:20:38,380
to the process, 

346
00:20:39,820 --> 00:20:43,130
you need to drop that the duplicate. 

347
00:20:48,160 --> 00:20:50,540
So this is an example. 

348
00:20:50,550 --> 00:20:51,940
When the ark is lost, 

349
00:20:51,950 --> 00:20:53,060
you resend the packet. 

350
00:20:53,070 --> 00:20:56,380
And now the receiver gets to packets right. 

351
00:20:58,900 --> 00:20:59,340
Now, 

352
00:21:02,300 --> 00:21:06,520
it's one of the challenge here is how you are going to pick the time out. 

353
00:21:09,890 --> 00:21:11,170
If the timeout is short, 

354
00:21:11,860 --> 00:21:13,530
you may get lots of applicants. 

355
00:21:16,750 --> 00:21:17,520
So why is that? 

356
00:21:20,830 --> 00:21:21,350
Right? 

357
00:21:21,360 --> 00:21:23,590
Remember that this, 

358
00:21:24,870 --> 00:21:26,620
like in our simple examples, 

359
00:21:26,630 --> 00:21:29,860
we assume that the one way latency is constant. 

360
00:21:30,530 --> 00:21:31,600
It's like in real life. 

361
00:21:33,090 --> 00:21:34,690
It's like, once a highway,

362
00:21:35,810 --> 00:21:38,980
like we discussed, the latency is not going to be the same.

363
00:21:40,620 --> 00:21:45,360
You are too trigger happy with the timeout and to resend the packet. 

364
00:21:45,370 --> 00:21:48,040
I wait just for that time out, 

365
00:21:48,050 --> 00:21:50,140
the minimal time out, right?

366
00:21:51,770 --> 00:21:54,150
That sort of the new as a minimum round trip time. 

367
00:21:55,150 --> 00:21:56,200
Then if I send, 

368
00:21:57,150 --> 00:21:58,710
I may send too early, 

369
00:22:00,020 --> 00:22:03,840
because I didn't give enough time to the packet to make the destination

370
00:22:03,850 --> 00:22:05,200
and the acknowledgment to come back. 

371
00:22:07,220 --> 00:22:08,620
Obviously, if it's a wait,

372
00:22:08,630 --> 00:22:14,600
it was too long than the performance offers. 

373
00:22:15,290 --> 00:22:16,730
For instance, around 3 times,

374
00:22:16,740 --> 00:22:18,760
it's 100 millisecond and the timeout. 

375
00:22:18,770 --> 00:22:19,340
It's 1. 

376
00:22:21,260 --> 00:22:21,710
Second, right?

377
00:22:25,770 --> 00:22:29,280
This means that if there is a timeout, 

378
00:22:29,290 --> 00:22:32,680
I lost the opportunity to send another line packets, 

379
00:22:33,260 --> 00:22:33,620
right? 

380
00:22:37,300 --> 00:22:42,970
Or ten depends how you count how you deal with the application. 

381
00:22:46,870 --> 00:22:52,270
Basically, you have somehow to put some sequence number in the packets.

382
00:22:52,280 --> 00:22:54,070
And these sequence numbers are unique. 

383
00:22:54,750 --> 00:22:57,530
And the acknowledgment will be for a particular sequence number. 

384
00:22:59,090 --> 00:22:59,540
Right? 

385
00:23:01,640 --> 00:23:03,440
And the sender, when you send,

386
00:23:03,450 --> 00:23:10,160
you keep the packets which are not acknowledged, 

387
00:23:12,470 --> 00:23:12,670
right? 

388
00:23:13,200 --> 00:23:14,950
About you still have the packets. 

389
00:23:15,310 --> 00:23:16,070
If they are lost, 

390
00:23:17,070 --> 00:23:18,940
if a packet is acknowledged, 

391
00:23:19,550 --> 00:23:23,470
the sender can remove that packet from his buffer. 

392
00:23:26,090 --> 00:23:27,340
And on the receiver side, 

393
00:23:27,350 --> 00:23:34,220
I also keep a track of the sql numbers of the packets. 

394
00:23:34,230 --> 00:23:34,860
I got. 

395
00:23:35,960 --> 00:23:38,790
If I get the duplicate the packet with the application number, 

396
00:23:38,800 --> 00:23:39,430
I can drop it. 

397
00:23:50,460 --> 00:23:54,050
You want to simplify it by having only one message at a time. 

398
00:23:55,230 --> 00:23:59,890
Again, and you just don't move until the message has been sent,

399
00:23:59,900 --> 00:24:03,080
has been received by the sender, by the receiver.

400
00:24:06,760 --> 00:24:06,810
Okay? 

401
00:24:07,150 --> 00:24:11,100
And this is exactly what we are talking about in our example. 

402
00:24:11,750 --> 00:24:13,000
The problem, obviously,

403
00:24:13,010 --> 00:24:19,290
that is slow and better perform us. 

404
00:24:23,240 --> 00:24:24,020
So now, 

405
00:24:25,460 --> 00:24:27,650
let's go back to solve our problem. 

406
00:24:27,660 --> 00:24:34,630
And our problem was that how we are going to improve the throughput

407
00:24:36,020 --> 00:24:37,170
over stop and write. 

408
00:24:38,820 --> 00:24:39,170
Right? 

409
00:24:39,660 --> 00:24:44,580
We said that in order to improve this report is quite easy. 

410
00:24:45,080 --> 00:24:49,870
Is basically don't we send packets without waiting for the acknowledgment? 

411
00:24:52,080 --> 00:24:57,470
And we saw that doing that won't be that easy, 

412
00:24:57,480 --> 00:25:00,990
because the acknowledgment also acknowledged whether the packet was

413
00:25:01,000 --> 00:25:03,900
received or not and leave the packets or lost. 

414
00:25:06,000 --> 00:25:07,160
Things get complicated. 

415
00:25:09,100 --> 00:25:09,380
Right? 

416
00:25:09,390 --> 00:25:10,620
But this being said, 

417
00:25:12,010 --> 00:25:13,160
this is a solution, right?

418
00:25:13,170 --> 00:25:15,940
For improving the performance. 

419
00:25:15,950 --> 00:25:22,600
You send a lot of packets without waiting for the acknowledgment. 

420
00:25:23,440 --> 00:25:24,830
So we pipeline the sending, 

421
00:25:25,500 --> 00:25:25,830
right? 

422
00:25:28,970 --> 00:25:30,000
That's very simple. 

423
00:25:38,040 --> 00:25:38,500
Now, 

424
00:25:39,300 --> 00:25:40,570
if you have this one, 

425
00:25:40,900 --> 00:25:45,690
the natural way to implement this and to implement this protocol, 

426
00:25:46,640 --> 00:25:49,560
is to call to have what is called a window. 

427
00:25:51,080 --> 00:25:58,940
A window is how many packets or how many bytes you can

428
00:25:58,950 --> 00:26:02,520
send without hearing for an acknowledgment. 

429
00:26:06,040 --> 00:26:07,270
If the window size, 

430
00:26:07,280 --> 00:26:09,470
let's think about in terms of packets, 

431
00:26:09,480 --> 00:26:11,430
and we say without missing in terms of bytes, 

432
00:26:12,750 --> 00:26:16,610
if a window size is ten packets, 

433
00:26:17,830 --> 00:26:20,160
this means that I can send ten packets. 

434
00:26:21,660 --> 00:26:23,660
Before I hear, 

435
00:26:23,830 --> 00:26:27,260
ii get back the acknowledgment from the first packet. 

436
00:26:27,270 --> 00:26:27,580
I said, 

437
00:26:30,950 --> 00:26:31,340
okay, 

438
00:26:34,150 --> 00:26:35,860
now, in a round trip time,

439
00:26:35,870 --> 00:26:38,340
I can send a window worth of packets, 

440
00:26:40,940 --> 00:26:41,120
right? 

441
00:26:41,130 --> 00:26:45,210
Because this is how many packets I can send without hearing for an average. 

442
00:26:48,190 --> 00:26:48,450
Right? 

443
00:26:48,460 --> 00:26:49,090
So therefore, 

444
00:26:51,380 --> 00:26:53,690
in the number of packets which are in flight, 

445
00:26:54,110 --> 00:26:56,700
are going to be without meaning in flight, 

446
00:26:56,710 --> 00:26:58,860
from packets, which are in flight.

447
00:26:58,870 --> 00:27:01,550
I haven't heard an acknowledgment for this package. 

448
00:27:01,560 --> 00:27:05,350
It yet is a window size over the packet size. 

449
00:27:11,330 --> 00:27:14,130
How long do you, does the sender need to seen packets around?

450
00:27:16,180 --> 00:27:17,070
What is your answer? 

451
00:27:17,490 --> 00:27:20,130
How many packets that the sender needs to skip around? 

452
00:27:21,010 --> 00:27:22,320
If the packets are lost? 

453
00:27:22,830 --> 00:27:28,850
Can still fix the loss. 

454
00:27:43,410 --> 00:27:44,600
Alison, this is good.

455
00:27:45,530 --> 00:27:48,320
You need to keep at least a number of packets, 

456
00:27:48,330 --> 00:27:52,850
which is equally the window size. 

457
00:27:56,270 --> 00:27:59,260
How long does the receiver have to keep the packet data? 

458
00:28:02,510 --> 00:28:05,740
Remember, the receiver needs to keep the log back as date hour,

459
00:28:05,750 --> 00:28:08,340
and these are a sequence number in order to avoid applications. 

460
00:28:21,800 --> 00:28:24,720
Until the packet in the window that is time out. 

461
00:28:32,150 --> 00:28:34,470
Let's think about forget about the protocol. 

462
00:28:38,500 --> 00:28:39,980
When can you remove a packet? 

463
00:28:39,990 --> 00:28:41,340
Think about your receiver packet? 

464
00:28:42,700 --> 00:28:45,350
When can you remove the information about that packet? 

465
00:28:46,930 --> 00:28:47,130
Again, 

466
00:28:47,140 --> 00:28:50,170
the main reason you are going to keep that information around is not going up. 

467
00:28:56,100 --> 00:28:57,200
So I send your packet. 

468
00:29:00,780 --> 00:29:05,600
When do you know that I am not going to send you again that packet? 

469
00:29:23,200 --> 00:29:26,260
When I send the next packet depends on the protocol, right?

470
00:29:26,270 --> 00:29:27,460
Is the next sequence number. 

471
00:29:28,220 --> 00:29:30,180
It's a little more complicated, but than that,

472
00:29:30,190 --> 00:29:31,580
I think we are close. 

473
00:29:32,350 --> 00:29:33,170
But fundamentally, 

474
00:29:33,180 --> 00:29:39,410
the answer to my question is that that you can remove the packet

475
00:29:42,270 --> 00:29:47,220
when I know that you got the packet, 

476
00:29:48,010 --> 00:29:49,710
once I know that I you got the packet, 

477
00:29:49,720 --> 00:29:51,690
i'm no longer going to send you the packet. 

478
00:29:57,350 --> 00:29:59,380
We'll see a little bit is how that is done. 

479
00:30:00,000 --> 00:30:01,390
It's not that easy, 

480
00:30:02,080 --> 00:30:05,790
but because you see if i'm getting user packet is an sequence number, 

481
00:30:08,630 --> 00:30:10,230
it's not necessarily the case, right?

482
00:30:10,240 --> 00:30:13,350
Because like here, 

483
00:30:13,360 --> 00:30:16,020
if you look at this in this figure, 

484
00:30:22,260 --> 00:30:23,540
a packet will be lost. 

485
00:30:24,190 --> 00:30:25,900
But back at the set packet is lost. 

486
00:30:33,850 --> 00:30:34,880
I get the next packet. 

487
00:30:34,890 --> 00:30:36,160
Actually, in some cases,

488
00:30:36,170 --> 00:30:38,430
you cannot return, 

489
00:30:38,440 --> 00:30:40,470
you cannot remove the packet one or two. 

490
00:30:42,350 --> 00:30:43,780
Because in some protocols, 

491
00:30:43,790 --> 00:30:47,060
the sender is going to start from the beginning to send all the packets. 

492
00:30:49,910 --> 00:30:52,780
Actually, in pcp and most version of this piece soon happen,

493
00:30:56,090 --> 00:30:58,910
what if the sender is sending back as faster than the receiver can process

494
00:30:58,920 --> 00:30:59,510
the data? 

495
00:31:09,780 --> 00:31:11,060
In this case, it's quite simple.

496
00:31:11,070 --> 00:31:13,410
You slow down the accomplishments. 

497
00:31:16,360 --> 00:31:18,800
If you cannot get more buffer about more packets, 

498
00:31:19,330 --> 00:31:20,090
you slow down. 

499
00:31:21,440 --> 00:31:21,650
Now, 

500
00:31:21,660 --> 00:31:24,730
we are going to talk about these are some good questions and to keep

501
00:31:24,740 --> 00:31:26,270
in mind and see how they are. 

502
00:31:26,280 --> 00:31:29,370
So in particular, the last one,

503
00:31:30,210 --> 00:31:33,240
how long does the receiver have to keep the packets data? 

504
00:31:33,250 --> 00:31:35,560
What if the standard is sending back as faster

505
00:31:35,570 --> 00:31:38,570
than the receiving receiver campus is a rate, 

506
00:31:38,930 --> 00:31:40,990
which is about exactly the flow control? 

507
00:31:43,520 --> 00:31:45,340
Now, the pcp again,

508
00:31:45,350 --> 00:31:46,640
I mentioned that last time, 

509
00:31:46,650 --> 00:31:52,060
but it was very quickly has a slide the window protocol at the bite, 

510
00:31:52,070 --> 00:31:53,060
not back at level. 

511
00:31:53,410 --> 00:31:54,960
So far we talk about packets. 

512
00:31:54,970 --> 00:31:57,450
It was easier to visualize. 

513
00:31:59,610 --> 00:32:01,870
And he has two ways to recover, go back.

514
00:32:01,880 --> 00:32:08,090
And is that if I miss some packets, 

515
00:32:09,590 --> 00:32:10,080
right? 

516
00:32:10,640 --> 00:32:11,870
I'm going to go back, 

517
00:32:11,880 --> 00:32:15,640
and i'm going to send the packets from the one in chinese

518
00:32:15,650 --> 00:32:17,360
and also the subsequent packets, 

519
00:32:17,370 --> 00:32:18,960
whether you receive them or not. 

520
00:32:20,250 --> 00:32:24,250
Selective repeat, you only send on the packets is called discipline sack.

521
00:32:24,580 --> 00:32:28,720
You only send all the only the packers which are lost, 

522
00:32:29,000 --> 00:32:30,190
all the bytes which are lost. 

523
00:32:35,510 --> 00:32:39,540
Qa the main way of this tcp implements, 

524
00:32:39,550 --> 00:32:41,900
the flow control is by the receiver, 

525
00:32:42,470 --> 00:32:45,500
telling the sender how many more bytes it can receive. 

526
00:32:45,510 --> 00:32:47,020
And this is called advertisement. 

527
00:32:49,120 --> 00:32:52,440
And the acknowledgment contains a sequence number, 

528
00:32:52,450 --> 00:32:57,280
and of the next by the receiver expects. 

529
00:33:00,540 --> 00:33:04,530
This means that the receiver has received all bytes in sequence up to

530
00:33:04,540 --> 00:33:05,970
and including n minus one. 

531
00:33:07,300 --> 00:33:08,570
If there is a gap, 

532
00:33:08,580 --> 00:33:11,630
I received the first 100 bytes, 

533
00:33:12,670 --> 00:33:14,260
then there is a gap of 50 bytes. 

534
00:33:14,270 --> 00:33:17,340
And then I received the buys from 150, 250.

535
00:33:18,420 --> 00:33:18,950
As a receiver. 

536
00:33:18,960 --> 00:33:21,110
I'm still going to send to the sender, 

537
00:33:23,020 --> 00:33:24,240
101, 

538
00:33:24,250 --> 00:33:26,520
which is the next byte in sequence. 

539
00:33:27,030 --> 00:33:27,670
I'm expecting. 

540
00:33:32,210 --> 00:33:40,940
So next we are going to go through a bunch of definitions about some variables. 

541
00:33:41,870 --> 00:33:43,050
There are six of them. 

542
00:33:43,610 --> 00:33:45,670
And then we are going to take an example, 

543
00:33:45,920 --> 00:33:46,940
a simple example. 

544
00:33:47,440 --> 00:33:49,960
So hopefully the examples will clarify things. 

545
00:33:52,040 --> 00:33:58,840
But it's please beer with me. 

546
00:34:00,780 --> 00:34:01,930
This is a bounding. 

547
00:34:02,420 --> 00:34:04,810
If i'm taking this bounding buffer example, 

548
00:34:04,820 --> 00:34:07,210
like I showed you earlier in the lecture, 

549
00:34:07,620 --> 00:34:13,430
I tried to map it on to hosts sender and the receiver. 

550
00:34:13,920 --> 00:34:18,240
This is one I will, or I I I can show I can do it.

551
00:34:18,250 --> 00:34:22,300
I can have a buffer on the receiving process. 

552
00:34:22,310 --> 00:34:23,380
That's a bounding buffer. 

553
00:34:23,390 --> 00:34:25,810
And the sending was going to send it to. 

554
00:34:26,360 --> 00:34:32,040
And these packets are going to be and curing in that buff

555
00:34:32,880 --> 00:34:35,290
and then delivered to the receiving process. 

556
00:34:38,720 --> 00:34:44,390
However, like I mentioned to you like we discussed last time,

557
00:34:46,500 --> 00:34:49,140
this is not going to work well in practice, 

558
00:34:49,150 --> 00:34:52,270
because this means that for each packet, 

559
00:34:52,880 --> 00:34:55,030
the sender process sends, 

560
00:34:55,300 --> 00:34:56,970
you need to have a course, a contact switching,

561
00:34:56,980 --> 00:35:02,060
because your operating system is going to be involved in the act of sending

562
00:35:02,590 --> 00:35:03,300
the packet, 

563
00:35:03,630 --> 00:35:07,950
because the tcpip is a network stack, 

564
00:35:07,960 --> 00:35:11,410
is implemented in the operating system. 

565
00:35:13,830 --> 00:35:17,580
If you do a context switching on sending every packet, like, for instance,

566
00:35:17,590 --> 00:35:19,100
in the case of the internet, 

567
00:35:19,680 --> 00:35:22,550
the packet size is typically 1,500 bytes. 

568
00:35:23,540 --> 00:35:28,530
Then in order to sustain the stroke of a one garbage per second

569
00:35:28,540 --> 00:35:30,410
or one garbage per second link, 

570
00:35:30,730 --> 00:35:37,980
you need to send a packet every 12 to 12 microsecond. 

571
00:35:40,090 --> 00:35:41,470
If the packet is small, smaller,

572
00:35:41,480 --> 00:35:43,630
like 100 bytes in less than one microsecond. 

573
00:35:45,440 --> 00:35:47,370
And this is too little for the contact switch. 

574
00:35:48,860 --> 00:35:49,210
Right? 

575
00:35:50,150 --> 00:35:51,740
Therefore, how you solve the problem,

576
00:35:51,750 --> 00:35:53,060
you have other buffers. 

577
00:35:53,900 --> 00:35:54,410
In general, 

578
00:35:54,420 --> 00:35:58,460
you have one buffer on the sender side and one buffer on the receiver side. 

579
00:36:00,230 --> 00:36:06,230
This is what operating system maintains and the processes themselves. 

580
00:36:06,240 --> 00:36:11,230
They can have other buffers, right?

581
00:36:11,970 --> 00:36:12,680
Actually, 

582
00:36:12,690 --> 00:36:17,750
the process of sending from one process towards another has three steps. 

583
00:36:18,700 --> 00:36:24,250
The sending process sends the data to the operating system or is buffered

584
00:36:25,750 --> 00:36:26,510
in the discipline. 

585
00:36:29,320 --> 00:36:32,520
The operating system is using the ip layer to send. 

586
00:36:33,120 --> 00:36:33,960
We chop the data, 

587
00:36:33,970 --> 00:36:41,130
you send the sender into packets and send it to the receiver operating system. 

588
00:36:41,140 --> 00:36:45,700
The receiver operating system will put the data it receives in a buffer. 

589
00:36:46,730 --> 00:36:50,420
And then from this buffer is going to deliver the data to the receiving process. 

590
00:36:57,380 --> 00:36:57,850
By the way, 

591
00:36:57,860 --> 00:37:01,980
the fact you see is I have a buffer allows me for something else. 

592
00:37:02,830 --> 00:37:06,630
The sending process can have a stream oriented protocol like we learned. 

593
00:37:07,690 --> 00:37:09,420
So I can send a stream of bytes, 

594
00:37:10,110 --> 00:37:11,390
1,000 bytes, 

595
00:37:11,400 --> 00:37:12,430
four kilobytes, 

596
00:37:13,110 --> 00:37:13,640
whatever. 

597
00:37:15,830 --> 00:37:17,660
Then the operating system, this buffer,

598
00:37:17,670 --> 00:37:19,420
I put all these data into the buffer, 

599
00:37:19,430 --> 00:37:23,260
and the operating system can then take the data and chop it in packets, 

600
00:37:23,270 --> 00:37:25,960
because that ip layer is not a streaming protocol. 

601
00:37:26,310 --> 00:37:27,540
You have to send packets. 

602
00:37:28,630 --> 00:37:31,020
I need to put take some piece of daytime, 

603
00:37:31,030 --> 00:37:32,060
putting the headers, 

604
00:37:32,690 --> 00:37:39,080
poor numbers for a source and destination ipip addresses. 

605
00:37:39,490 --> 00:37:40,930
Then at the lower level, 

606
00:37:40,940 --> 00:37:43,540
you put the mac addresses and things like that. 

607
00:37:48,780 --> 00:37:49,590
So now, 

608
00:37:51,110 --> 00:37:54,500
let's assume that the maximum ip packet size, 

609
00:37:54,510 --> 00:37:55,660
for this example, 

610
00:37:55,670 --> 00:37:56,940
is 100 bytes. 

611
00:37:57,630 --> 00:37:59,230
Again, in general, in practice,

612
00:37:59,240 --> 00:38:00,470
is 1,500 bytes. 

613
00:38:01,490 --> 00:38:04,600
In the size of the receiving buffer is 300 bytes, 

614
00:38:05,760 --> 00:38:07,970
the receiver, and this is a buffer.

615
00:38:08,250 --> 00:38:13,280
300 bytes also recalls as the acknowledgment indicates, 

616
00:38:13,290 --> 00:38:15,580
the next expected biting sequence, 

617
00:38:16,110 --> 00:38:17,590
knows the last three seat bikes. 

618
00:38:18,550 --> 00:38:21,240
Like as we discussed last time, we circular buffers.

619
00:38:22,080 --> 00:38:22,440
Right? 

620
00:38:23,910 --> 00:38:24,660
If you remember, 

621
00:38:26,730 --> 00:38:29,520
basically, a circular buffer is like, you see,

622
00:38:29,930 --> 00:38:33,090
here is basically goes around, 

623
00:38:33,800 --> 00:38:36,600
and you keep the head and the tail of the buffer. 

624
00:38:41,290 --> 00:38:43,600
So now, with all of these,

625
00:38:44,420 --> 00:38:45,580
let's see how things are working. 

626
00:38:45,960 --> 00:38:46,790
Like I mentioned, 

627
00:38:47,540 --> 00:38:50,860
we are going to decide to define six variables. 

628
00:38:52,020 --> 00:38:53,360
Last byte written. 

629
00:38:54,220 --> 00:38:58,110
This is a sequence of the last byte written by the sending process

630
00:38:58,120 --> 00:38:59,610
into the operating system buffer. 

631
00:39:02,180 --> 00:39:07,970
Last byte Send is the last by sent by the sender to the receiver. 

632
00:39:09,010 --> 00:39:11,140
Last by act is a last act, 

633
00:39:11,390 --> 00:39:13,260
received by sender from the receiver. 

634
00:39:14,340 --> 00:39:18,860
Last by the received is the last by the received by receiver from the sender. 

635
00:39:19,360 --> 00:39:22,990
Next byte expected is a lasting sequence byte expected by the receiver. 

636
00:39:28,370 --> 00:39:32,280
Is it a convention to start a circular buffer at one index? 

637
00:39:33,960 --> 00:39:38,110
It depends what language you are going to use if you see is probably zero. 

638
00:39:41,780 --> 00:39:42,160
Yeah. 

639
00:39:48,360 --> 00:39:52,790
Now let's take the examples and sorry the last by dread is the last

640
00:39:52,800 --> 00:39:54,510
by dread by this receiving process. 

641
00:39:54,740 --> 00:39:55,350
Okay. 

642
00:39:57,610 --> 00:40:05,550
So this basically says that you have in this blue area, 

643
00:40:06,160 --> 00:40:09,500
in the receiving buffer is how many bytes you have in the buffer

644
00:40:09,510 --> 00:40:10,540
in the receiving buffer. 

645
00:40:12,640 --> 00:40:13,830
You consumed from one end. 

646
00:40:14,110 --> 00:40:15,450
This is the start. 

647
00:40:15,460 --> 00:40:21,120
The last by dread is the start of the buffer of the data in the buffer. 

648
00:40:21,960 --> 00:40:28,460
Last byte received is the last byte in this data of the data in the buffer. 

649
00:40:28,850 --> 00:40:30,220
Next byte expected in this case, 

650
00:40:30,230 --> 00:40:32,060
is the last by the receipt+1, 

651
00:40:32,720 --> 00:40:34,140
because that's the one you expect. 

652
00:40:37,250 --> 00:40:37,790
Okay. 

653
00:40:39,220 --> 00:40:43,720
Now, the advertised window is, by definition, again,

654
00:40:44,360 --> 00:40:47,410
how many bytes, 

655
00:40:47,770 --> 00:40:49,020
the receiver, 

656
00:40:49,030 --> 00:40:54,840
the sender can send me without me overflowing? 

657
00:41:01,150 --> 00:41:01,940
Basically, 

658
00:41:03,350 --> 00:41:07,560
if i'm the receiver and my buffer size is 300 bytes, 

659
00:41:10,730 --> 00:41:11,920
the buffer is empty. 

660
00:41:12,790 --> 00:41:17,130
I tell you you can send me 300 bytes. 

661
00:41:21,030 --> 00:41:22,260
If my buffer, 

662
00:41:22,270 --> 00:41:25,580
I already have 100 by source of data in the buffer, 

663
00:41:26,770 --> 00:41:29,560
I tell you you can send me only $200. 

664
00:41:31,380 --> 00:41:34,340
This formula is computing exactly what I told you. 

665
00:41:34,350 --> 00:41:40,040
It's a massive zeta buffer minus how much data I have

666
00:41:40,050 --> 00:41:42,640
in this contiguous region in the buffer, 

667
00:41:43,680 --> 00:41:46,010
which is last by the received minus last by the red. 

668
00:41:50,110 --> 00:41:53,220
The same in the same thing. 

669
00:41:54,240 --> 00:41:57,860
It's on the sending side of similarities. 

670
00:41:58,400 --> 00:41:58,770
Right? 

671
00:42:01,270 --> 00:42:02,940
Here I have last bike act. 

672
00:42:06,100 --> 00:42:10,880
Here, if I get an acknowledgment in this protocol,

673
00:42:10,890 --> 00:42:14,930
if i'm going to get an acknowledgment for a byte, 

674
00:42:15,550 --> 00:42:18,940
this means that the receiving process receives a byte. 

675
00:42:19,540 --> 00:42:23,010
I know I no longer need to keep it in the buffer. 

676
00:42:24,010 --> 00:42:24,690
As a sender, 

677
00:42:26,050 --> 00:42:32,250
cried everything before after before last byte act can be dropped. 

678
00:42:33,400 --> 00:42:34,730
And then you have last by set. 

679
00:42:35,340 --> 00:42:36,830
What is last by act? 

680
00:42:36,840 --> 00:42:41,000
What is these things between us by act and last by cent? 

681
00:42:46,250 --> 00:42:47,640
This green area, 

682
00:42:50,830 --> 00:42:57,540
this is green area represents the data that the sending process send it

683
00:42:58,000 --> 00:42:59,190
without being acknowledged. 

684
00:43:01,390 --> 00:43:01,920
That's it. 

685
00:43:05,880 --> 00:43:10,320
So let me see. 

686
00:43:11,910 --> 00:43:13,300
It's exactly simon, yeah.

687
00:43:14,740 --> 00:43:18,340
The package we send that have not received an axe so they are not acknowledged. 

688
00:43:19,330 --> 00:43:21,190
So now think about sender window. 

689
00:43:21,200 --> 00:43:24,310
And this again, you have the formula you can look at the formula,

690
00:43:24,320 --> 00:43:25,510
but let's take an example. 

691
00:43:27,620 --> 00:43:30,470
Now let's think about from the receipt, 

692
00:43:30,480 --> 00:43:31,910
from the center perspective, 

693
00:43:34,510 --> 00:43:36,560
say the receiver, 

694
00:43:36,570 --> 00:43:38,500
you are the sender. 

695
00:43:39,340 --> 00:43:43,530
The receiver tells you my advertising window is 300 bytes. 

696
00:43:46,610 --> 00:43:48,720
And since I learned this information, 

697
00:43:49,780 --> 00:43:53,090
I already send you 100 bytes. 

698
00:43:55,070 --> 00:43:58,220
How many more bikes can I send you before i'm hearing back from? 

699
00:43:59,880 --> 00:44:01,760
So that I am absolutely certain. 

700
00:44:01,770 --> 00:44:10,330
I'm not going to overflow you, right?

701
00:44:11,630 --> 00:44:14,520
It's again, the receiver tells you,

702
00:44:14,960 --> 00:44:16,430
you can send me 300 bytes. 

703
00:44:16,440 --> 00:44:20,680
Since you heard that, then you heard that you send 100 bytes,

704
00:44:22,980 --> 00:44:24,760
still, nothing from the receiver.

705
00:44:25,690 --> 00:44:28,790
How many more bytes you can send before you hear from the receiver? 

706
00:44:36,690 --> 00:44:38,560
It's, in my example, was 200,

707
00:44:40,330 --> 00:44:40,770
right? 

708
00:44:41,840 --> 00:44:43,920
Receiver told you, you can send me 300 bytes,

709
00:44:43,930 --> 00:44:45,000
you send 100 bytes. 

710
00:44:45,010 --> 00:44:46,200
You haven't heard yet. 

711
00:44:46,680 --> 00:44:48,330
You can send another 200 bytes. 

712
00:44:48,980 --> 00:44:52,000
So then you send in total 300 by rights. 

713
00:44:52,350 --> 00:44:55,480
Before you hear back, you cannot send more.

714
00:44:59,350 --> 00:45:01,440
This is exactly this next formula. 

715
00:45:01,450 --> 00:45:06,020
The sender window is how many more bytes you can send without overflowing

716
00:45:06,030 --> 00:45:06,740
the receiver. 

717
00:45:07,540 --> 00:45:16,620
It's advertise window minus my number of bytes you send out without being acknowledged. 

718
00:45:17,530 --> 00:45:18,090
Is that radar? 

719
00:45:26,120 --> 00:45:27,130
It's still true. 

720
00:45:27,140 --> 00:45:29,170
There is a very important aspect. 

721
00:45:29,810 --> 00:45:32,320
This is still true if you miss the data, 

722
00:45:33,060 --> 00:45:33,930
these formulas, 

723
00:45:36,640 --> 00:45:39,990
because if you miss that data here on the receiver side, 

724
00:45:40,650 --> 00:45:42,260
the next byte expected, by the way,

725
00:45:43,080 --> 00:45:46,850
you see here, the next byte expected is the one which is in sequence.

726
00:45:47,830 --> 00:45:48,320
Right? 

727
00:45:48,840 --> 00:45:52,600
Because you have a gap, the gap doesn't matter for the next bikes expected,

728
00:45:52,610 --> 00:45:54,760
but for the last by the receive, it matters.

729
00:45:58,960 --> 00:46:06,500
So remember that these are the same formulas if you miss the data in the middle. 

730
00:46:09,020 --> 00:46:10,970
Now let's take a simple example. 

731
00:46:15,370 --> 00:46:18,800
Let's say the sending application since 350 bytes, 

732
00:46:21,020 --> 00:46:24,500
we assume the ip only accept package no larger than 100 bytes. 

733
00:46:24,510 --> 00:46:28,530
And let's say the max receives advertised window. 

734
00:46:28,830 --> 00:46:30,660
Mac receiving buffer is 300 bytes, 

735
00:46:30,670 --> 00:46:33,420
and advertising in the initial is one hundred three hundred bytes, 

736
00:46:35,830 --> 00:46:38,100
send the first send buffers packet, 

737
00:46:38,110 --> 00:46:39,940
how much we get the first packet? 

738
00:46:40,530 --> 00:46:41,410
100 bytes. 

739
00:46:42,210 --> 00:46:43,860
Because as a maximum size of the package, 

740
00:46:46,040 --> 00:46:50,440
we grain, I show the packet which are sand without being acknowledged.

741
00:46:52,270 --> 00:46:53,150
Here on his side, 

742
00:46:53,160 --> 00:46:59,990
i'm saying one one hundred between these square brackets is a by which had been sent. 

743
00:47:01,610 --> 00:47:02,730
I am starting from one. 

744
00:47:07,180 --> 00:47:08,310
So eventually, 

745
00:47:08,850 --> 00:47:11,320
the last by sent, when I am doing, when I am sending,

746
00:47:11,330 --> 00:47:12,680
initially the last by that, 

747
00:47:12,690 --> 00:47:15,980
it's is zero. 

748
00:47:15,990 --> 00:47:18,080
I no, nothing was active.

749
00:47:18,960 --> 00:47:20,390
As the last by cent. 

750
00:47:20,400 --> 00:47:21,430
It's 100, 

751
00:47:22,000 --> 00:47:23,580
because I send 100 bytes. 

752
00:47:24,410 --> 00:47:28,470
And I eventually this packet is delivered to the destination. 

753
00:47:28,480 --> 00:47:29,460
Last byte receives. 

754
00:47:29,470 --> 00:47:30,450
It's 100. 

755
00:47:30,820 --> 00:47:31,700
Next spike is expected. 

756
00:47:31,710 --> 00:47:32,860
It's 101. 

757
00:47:33,310 --> 00:47:33,650
Right? 

758
00:47:36,290 --> 00:47:37,230
Everything is good. 

759
00:47:40,340 --> 00:47:40,760
Now, 

760
00:47:41,770 --> 00:47:45,870
the sad receiver send back acknowledgment 101. 

761
00:47:46,130 --> 00:47:47,940
Advertising, don't know, is 200.

762
00:47:48,880 --> 00:47:49,000
Right? 

763
00:47:49,010 --> 00:47:52,000
Because I it was 300, I got 100.

764
00:47:52,010 --> 00:47:53,480
Now you can send me only 200. 

765
00:47:56,920 --> 00:47:57,400
Okay? 

766
00:47:59,620 --> 00:48:01,940
Before receiving this acknowledgment, 

767
00:48:02,740 --> 00:48:04,640
because the window advertising, 

768
00:48:04,650 --> 00:48:07,320
there is 300 bytes and I sent only 100 bytes. 

769
00:48:08,140 --> 00:48:11,160
I went to send the next packet me being the sender. 

770
00:48:13,460 --> 00:48:17,210
The bytes are between a one on one and 200. 

771
00:48:18,600 --> 00:48:19,020
Right? 

772
00:48:19,660 --> 00:48:22,890
Again, sorry, here I am saying all the packets which are being sent,

773
00:48:23,360 --> 00:48:24,690
all the bytes which have been sent. 

774
00:48:25,140 --> 00:48:27,600
Now I sent from the center between 1 and 200. 

775
00:48:33,180 --> 00:48:34,850
This packet is going to, 

776
00:48:35,540 --> 00:48:37,510
now the last by cent is 200. 

777
00:48:38,790 --> 00:48:41,180
It's going to get to the receiver and the receiver. 

778
00:48:41,190 --> 00:48:42,740
You have lost by the receipt 200, 

779
00:48:42,750 --> 00:48:44,580
next by the expected 201. 

780
00:48:45,070 --> 00:48:49,700
I'm going to now201. 

781
00:48:51,360 --> 00:48:53,520
Now assume that next thing is what happened, 

782
00:48:53,530 --> 00:48:54,840
the receiving process. 

783
00:48:55,330 --> 00:48:57,930
There is some data, let's say it is 100 bytes,

784
00:48:59,060 --> 00:49:00,730
the first 100 bytes. 

785
00:49:01,630 --> 00:49:04,920
So now, in the receiving window,

786
00:49:06,330 --> 00:49:07,480
in the receiving buffer, 

787
00:49:07,490 --> 00:49:09,280
I only have 100 bytes, 

788
00:49:09,290 --> 00:49:12,640
because 100 bytes already were required processed by the receiver, 

789
00:49:13,540 --> 00:49:15,360
were already delivered to the receiver process. 

790
00:49:17,060 --> 00:49:22,840
And i'm going to send back an acknowledgment. 

791
00:49:22,850 --> 00:49:24,640
I'm going to include the next sequence, 

792
00:49:24,650 --> 00:49:26,280
the next flight expected, 

793
00:49:26,290 --> 00:49:27,400
which is 201. 

794
00:49:29,560 --> 00:49:31,480
And then advertising window, 

795
00:49:31,490 --> 00:49:32,560
it's again 200. 

796
00:49:33,370 --> 00:49:34,590
Because in the buffer, 

797
00:49:34,600 --> 00:49:36,270
I have only 100 bytes. 

798
00:49:36,590 --> 00:49:37,960
The buffer is 300 bytes. 

799
00:49:41,970 --> 00:49:42,390
Now, 

800
00:49:43,210 --> 00:49:46,500
the sender is, again,

801
00:49:46,510 --> 00:49:49,190
I still have, 

802
00:49:49,400 --> 00:49:52,270
I know that I ii send only 200 bytes. 

803
00:49:53,310 --> 00:49:56,620
The receiver told me initially that I can send 300 bytes. 

804
00:49:56,990 --> 00:49:58,410
I still can send 100 buy. 

805
00:49:58,420 --> 00:49:59,880
So let me send the next pack. 

806
00:50:01,990 --> 00:50:05,600
But let's assume now to make things more interesting that this packet

807
00:50:05,610 --> 00:50:06,320
has been lost. 

808
00:50:08,770 --> 00:50:09,180
Okay? 

809
00:50:11,170 --> 00:50:11,970
That's fine. 

810
00:50:13,230 --> 00:50:14,420
In the meantime, 

811
00:50:14,430 --> 00:50:19,260
as I have and the last by set sent as on the understanding on the standard

812
00:50:19,270 --> 00:50:20,300
to 300, 

813
00:50:21,360 --> 00:50:22,630
in the meantime, 

814
00:50:23,460 --> 00:50:25,770
and the sending window now is zero. 

815
00:50:25,780 --> 00:50:30,500
I can no longer send you see the sending window magically now is zero

816
00:50:30,510 --> 00:50:32,950
because I sent 300 bytes. 

817
00:50:32,960 --> 00:50:35,230
I knew that the advertising noise, 300 bytes,

818
00:50:35,240 --> 00:50:37,550
I haven't heard anything from the receiver. 

819
00:50:37,700 --> 00:50:39,750
So that for I have to stop sending. 

820
00:50:45,680 --> 00:50:47,340
Now, in the meantime,

821
00:50:47,350 --> 00:50:50,740
I get the first acknowledgment back. 

822
00:50:52,830 --> 00:50:55,110
The fact that nourishment back is telling me, 

823
00:50:55,120 --> 00:50:58,180
I have 101 the economy is 1, 01,

824
00:50:58,190 --> 00:50:59,780
and advertising window is 200. 

825
00:51:01,870 --> 00:51:02,030
Right? 

826
00:51:02,200 --> 00:51:03,710
The first packet was acknowledged, 

827
00:51:07,460 --> 00:51:07,820
right? 

828
00:51:08,430 --> 00:51:10,700
Because the first packet was acknowledge, 

829
00:51:11,470 --> 00:51:17,320
it was acknowledged and also indicates an expected to send. 

830
00:51:18,300 --> 00:51:21,700
So the receiver no longer needs the first 100 bytes. 

831
00:51:21,710 --> 00:51:24,300
So i'm going to remove these from the receiver, 

832
00:51:24,310 --> 00:51:25,850
but from the sender buffer. 

833
00:51:26,660 --> 00:51:30,260
Because the receiver told me that it got the first 100 bytes. 

834
00:51:30,940 --> 00:51:31,400
Okay? 

835
00:51:33,160 --> 00:51:36,070
I am going to ask advance last byte act 100, 

836
00:51:39,130 --> 00:51:42,420
but the sender window is still zero. 

837
00:51:45,630 --> 00:51:45,930
Right? 

838
00:51:45,940 --> 00:51:49,040
Because I I ii send said, 

839
00:51:49,050 --> 00:51:51,000
iii send 300 bytes. 

840
00:51:54,080 --> 00:51:57,110
Now the sender told me I got 100 bytes, 

841
00:51:57,120 --> 00:51:58,990
but I can receive only 200 bytes, 

842
00:51:59,570 --> 00:52:01,000
2 or 200 more bytes. 

843
00:52:05,360 --> 00:52:12,220
I I removed the 100 bytes at sanders and told that the receiver told me

844
00:52:12,230 --> 00:52:13,300
that they receive. 

845
00:52:14,570 --> 00:52:18,300
But still, I have 200 bytes which are not acknowledged.

846
00:52:18,940 --> 00:52:25,120
And the receiver told me that it can only send receive bytes without being acknowledged. 

847
00:52:26,860 --> 00:52:29,430
So I cannot send anything. 

848
00:52:32,140 --> 00:52:34,740
But finally, now I get the second acknowledgment.

849
00:52:35,810 --> 00:52:38,170
And their second acknowledgment tells me, 

850
00:52:38,180 --> 00:52:43,430
tells the receiver that the get us to the sender that the receiver got

851
00:52:43,440 --> 00:52:44,870
the first 200 bytes. 

852
00:52:46,090 --> 00:52:48,880
The next expected byte is 201, 

853
00:52:49,570 --> 00:52:51,600
and the advertising window is 200. 

854
00:52:52,240 --> 00:52:54,470
Now you're on your computer advertise window. 

855
00:52:54,480 --> 00:53:01,680
You get 100 because it's 200 advertiser window. 

856
00:53:02,810 --> 00:53:04,550
Now I have in flight, 

857
00:53:04,970 --> 00:53:06,060
only 100 bytes, 

858
00:53:06,070 --> 00:53:07,860
so I can send another 100 bytes. 

859
00:53:08,950 --> 00:53:10,630
I don't have 100 bytes to send. 

860
00:53:10,640 --> 00:53:12,670
I only have 50, 

861
00:53:15,040 --> 00:53:15,260
right? 

862
00:53:15,270 --> 00:53:18,380
Because I I wanted to send 350 bytes. 

863
00:53:18,750 --> 00:53:22,980
I'm going to send this By few the last 50 bytes. 

864
00:53:23,680 --> 00:53:27,840
And then they are going to be received by the receiver. 

865
00:53:27,990 --> 00:53:31,300
But now I have a gap, and the gap is a third packet which is lost.

866
00:53:34,500 --> 00:53:34,920
You see it? 

867
00:53:34,930 --> 00:53:37,560
Now, next byte expected is still 201,

868
00:53:39,680 --> 00:53:40,050
right? 

869
00:53:42,510 --> 00:53:44,500
The last byte receive now is 350. 

870
00:53:46,010 --> 00:53:48,040
Now I sent back to the receiver and say, 

871
00:53:52,010 --> 00:53:54,320
I got the next bite. 

872
00:53:54,330 --> 00:53:56,240
I am expecting these 201, 

873
00:53:56,570 --> 00:53:58,500
but the advertiser on one window is 50. 

874
00:54:07,650 --> 00:54:09,660
If the advertiser window is 50, 

875
00:54:12,390 --> 00:54:14,140
what is the sending process going to do? 

876
00:54:27,410 --> 00:54:27,760
Right? 

877
00:54:34,380 --> 00:54:35,020
Yes. 

878
00:54:35,620 --> 00:54:37,110
You can send, in this case,

879
00:54:37,870 --> 00:54:39,110
you can send the packet. 

880
00:54:39,120 --> 00:54:39,860
We just lost. 

881
00:54:40,160 --> 00:54:41,610
Why you can send this packet. 

882
00:54:41,620 --> 00:54:42,410
We just lost. 

883
00:54:50,880 --> 00:54:57,230
We'll do more about this in a while is still in the green region. 

884
00:54:57,520 --> 00:54:58,190
It's exact

885
00:55:16,770 --> 00:55:18,950
by the sending window is less, 

886
00:55:20,360 --> 00:55:23,600
it's good by the sending leno is less than zero. 

887
00:55:25,030 --> 00:55:26,900
Is very good observation. 

888
00:55:27,630 --> 00:55:30,460
But the point here that I can descend the packet, 

889
00:55:30,470 --> 00:55:33,140
because I already sent that packet, it doesn't count.

890
00:55:33,150 --> 00:55:34,900
I can all always, 

891
00:55:35,370 --> 00:55:39,860
he sent aa lost a packet which had previously ii previously sent, 

892
00:55:41,140 --> 00:55:41,490
right? 

893
00:55:42,270 --> 00:55:44,290
Because in the worst case, it should be the duplicate.

894
00:55:46,090 --> 00:55:47,330
In the best case, 

895
00:55:47,920 --> 00:55:49,210
in the worst case will be duplicate. 

896
00:55:49,220 --> 00:55:51,330
In the best case, it's going to repair the loss.

897
00:55:53,010 --> 00:55:59,750
You see, the receiver by this gap already accounted for the loss packet.

898
00:56:03,350 --> 00:56:04,280
That's a key. 

899
00:56:07,040 --> 00:56:08,430
You see, it's already accounted.

900
00:56:08,440 --> 00:56:11,380
The next expected byte is 350. 

901
00:56:12,480 --> 00:56:15,950
Therefore, if i'm going to send a packet,

902
00:56:16,550 --> 00:56:18,840
that's not going to change the window on anything, 

903
00:56:21,110 --> 00:56:23,150
it's again, either is going to repair a loss,

904
00:56:23,160 --> 00:56:24,310
what is going to be dedicated. 

905
00:56:26,590 --> 00:56:30,270
So that's why I can send the packet and why i'm going to send now. 

906
00:56:30,510 --> 00:56:35,320
In this particular circle is aaaa particular case. 

907
00:56:35,720 --> 00:56:39,750
I am going to send it because you see, 

908
00:56:41,000 --> 00:56:42,390
is the second time, 

909
00:56:42,870 --> 00:56:49,090
I get acknowledgment sender. 

910
00:56:49,600 --> 00:56:53,030
The receiver told me that the acknowledgment is the next sequence number, 

911
00:56:53,640 --> 00:56:55,150
it's expecting is 201. 

912
00:56:56,970 --> 00:57:00,320
Basically, if and we'll see this next,

913
00:57:00,940 --> 00:57:03,660
this is a way to detect a failure. 

914
00:57:06,110 --> 00:57:07,900
I can't aa packet loss. 

915
00:57:08,530 --> 00:57:14,060
One way to detect a packet loss is that if the receiver tells me multiple times, 

916
00:57:14,070 --> 00:57:16,820
I am waiting for this sequence number, next sequence number,

917
00:57:18,310 --> 00:57:21,300
because this means that it gets the reason in the receiver. 

918
00:57:21,590 --> 00:57:25,440
Can you tell me that it twice for the same sequence number over and over again, 

919
00:57:25,450 --> 00:57:28,380
is that I sent him a next pack, another packet,

920
00:57:28,390 --> 00:57:30,390
but it's a gap is not in sequence. 

921
00:57:31,170 --> 00:57:32,360
Because if it's in sequence, 

922
00:57:32,690 --> 00:57:33,690
the next sequence number, 

923
00:57:33,700 --> 00:57:38,200
the receiver will tell me will advance as well. 

924
00:57:41,090 --> 00:57:41,560
Anyway, 

925
00:57:44,180 --> 00:57:45,650
now, if you have,

926
00:57:47,170 --> 00:57:49,480
if finally you get the next packet, 

927
00:57:50,990 --> 00:57:52,060
the loss packet, 

928
00:57:52,500 --> 00:57:54,530
the receiver gets a loss packet. 

929
00:57:55,860 --> 00:57:58,920
Everything gets got up to 350. 

930
00:57:59,140 --> 00:58:03,490
Is going that acknowledgment or contains 351 with the next sequence number

931
00:58:03,500 --> 00:58:04,650
is going to wait for. 

932
00:58:05,000 --> 00:58:06,970
Advertising window is still 50. 

933
00:58:07,300 --> 00:58:08,670
And now, 

934
00:58:09,060 --> 00:58:10,140
and the receiver, 

935
00:58:10,150 --> 00:58:12,100
the sender gets acknowledgment, 

936
00:58:12,660 --> 00:58:13,910
351. 

937
00:58:13,920 --> 00:58:17,210
It can remove every everything from its buffer, 

938
00:58:17,220 --> 00:58:19,610
because all the data I sent was acknowledged. 

939
00:58:22,630 --> 00:58:23,340
Now we are done. 

940
00:58:26,920 --> 00:58:27,810
Any questions? 

941
00:58:36,570 --> 00:58:37,120
So please, 

942
00:58:38,250 --> 00:58:39,120
you can go through. 

943
00:58:39,130 --> 00:58:46,060
This example is very revealing, 

944
00:58:46,700 --> 00:58:49,740
but you need to go a few times to really feel it, 

945
00:58:51,420 --> 00:58:52,090
understand it. 

946
00:58:54,570 --> 00:58:57,660
So let's have a short discussion before remove. 

947
00:59:05,620 --> 00:59:06,290
Yes. 

948
00:59:07,300 --> 00:59:08,890
Almost everything we talked, 

949
00:59:09,620 --> 00:59:12,530
it goes to back and selective repeat. 

950
00:59:12,950 --> 00:59:15,630
The only difference is like it was said, 

951
00:59:16,120 --> 00:59:17,920
someone said, for instance,

952
00:59:18,320 --> 00:59:19,480
the difference here, 

953
00:59:20,450 --> 00:59:27,300
This was mostly I shown you about selective acknowledgment. 

954
00:59:27,310 --> 00:59:29,730
So i'm telling you what is a difference. 

955
00:59:32,930 --> 00:59:34,070
So we go back. 

956
00:59:35,520 --> 00:59:40,930
And that is the sender is going to send everything up from 2001, 

957
00:59:40,940 --> 00:59:45,710
including the last 50 bytes which are already received by the receiver. 

958
00:59:47,150 --> 00:59:51,280
You only already go from the first sequence number, 

959
00:59:51,610 --> 00:59:55,240
which was expected by of the missing packet. 

960
00:59:57,170 --> 00:59:57,640
Okay? 

961
00:59:58,330 --> 01:00:01,890
In the case of selective acknowledgment, 

962
01:00:02,510 --> 01:00:04,870
the recess sender is like, in this case,

963
01:00:04,880 --> 01:00:08,810
is going only to send out the missing packets. 

964
01:00:09,200 --> 01:00:09,600
The missing

965
01:00:21,490 --> 01:00:27,590
information would last bite read calls a bottleneck on how is the question

966
01:00:27,600 --> 01:00:28,640
from my assignment? 

967
01:00:29,280 --> 01:00:30,910
Would last by read, 

968
01:00:32,330 --> 01:00:36,590
brad, cause a bottleneck on how fast we can clear the buffer.

969
01:00:36,600 --> 01:00:42,510
If we are not spending enough cycles to man copy from buffer from to process, 

970
01:00:42,520 --> 01:00:47,390
we cannot advance last by dread as fast so that limits our advertising know. 

971
01:00:47,610 --> 01:00:53,210
Absolutely and that exactly the proposal the goal of his having

972
01:00:53,220 --> 01:00:54,450
this last bite read. 

973
01:00:55,110 --> 01:01:04,350
The goal is basically he had the ultimate receiver is a perceiving process. 

974
01:01:04,360 --> 01:01:06,350
So the receiving process, for some reason,

975
01:01:06,360 --> 01:01:10,170
cannot consume data with the sender shouldn't send faster. 

976
01:01:17,650 --> 01:01:18,720
So let's move on. 

977
01:01:20,020 --> 01:01:20,710
Let's go. 

978
01:01:20,720 --> 01:01:24,910
So why not have a huge buffer at the receiver memory ship? 

979
01:01:24,920 --> 01:01:25,610
After all? 

980
01:01:41,900 --> 01:01:43,180
A huge buffer is a receiver, 

981
01:01:43,190 --> 01:01:45,260
also means a huge buffer is a sender. 

982
01:01:46,620 --> 01:01:47,030
Right? 

983
01:01:48,080 --> 01:01:49,630
We'll see that huge buffer actually, 

984
01:01:49,640 --> 01:01:51,750
also in the network organization control, 

985
01:01:51,760 --> 01:01:55,990
means as a latency is going to increase significantly. 

986
01:01:56,710 --> 01:01:59,310
Because the latency is going to increase significantly, 

987
01:01:59,320 --> 01:02:04,000
because it's going to take more to send to clear the buffer. 

988
01:02:10,730 --> 01:02:13,440
It's like a large transmissions that the round trip time, 

989
01:02:13,450 --> 01:02:15,840
the transmission time is going to grow up a lot. 

990
01:02:19,250 --> 01:02:22,480
Ascending window also depend on at a congestion is that are going to go

991
01:02:22,490 --> 01:02:23,200
to do next. 

992
01:02:23,210 --> 01:02:24,680
There are a lot of details about, 

993
01:02:24,690 --> 01:02:28,320
if you are interesting about networking takes cs on 3.68. 

994
01:02:29,560 --> 01:02:30,070
By the way, 

995
01:02:30,080 --> 01:02:34,150
we talk about a few buffer to buffers here in the operating systems. 

996
01:02:34,740 --> 01:02:36,490
For the sender and the receiver side. 

997
01:02:36,500 --> 01:02:38,230
In practice, there are more buffers.

998
01:02:38,690 --> 01:02:40,550
There are network artist buffers, 

999
01:02:40,560 --> 01:02:42,230
buffering the network and everything. 

1000
01:02:45,090 --> 01:02:47,750
Let's announcements. 

1001
01:02:48,540 --> 01:02:49,660
Meters three is tomorrow. 

1002
01:02:49,670 --> 01:02:55,380
What they've done over today in the lecture is not for next, 

1003
01:02:55,630 --> 01:02:57,910
for is not included in the material. 

1004
01:02:59,400 --> 01:03:00,380
For the exam, 

1005
01:03:00,940 --> 01:03:04,160
for the last meter on sunday, 

1006
01:03:05,040 --> 01:03:08,440
we are going this project three party between 10:00 and 2:00

1007
01:03:08,450 --> 01:03:12,950
pm the discussions will be converted in

1008
01:03:12,960 --> 01:03:16,270
office hours to help you with the projects last project. 

1009
01:03:17,170 --> 01:03:18,790
With the exam, if you have, well,

1010
01:03:18,800 --> 01:03:20,470
is it will be after the exam. 

1011
01:03:20,480 --> 01:03:22,610
So it don't help you as much. 

1012
01:03:23,840 --> 01:03:27,590
The office hours also will continue into that week again to help you

1013
01:03:27,600 --> 01:03:28,510
with the projects. 

1014
01:03:29,030 --> 01:03:37,070
How much c six is due friday and next friday and project. 

1015
01:03:37,360 --> 01:03:38,220
No, this friday.

1016
01:03:38,230 --> 01:03:39,570
So next friday. 

1017
01:03:40,120 --> 01:03:41,630
And the project through three, 

1018
01:03:41,640 --> 01:03:45,920
it's due as you now on december 8. 

1019
01:03:49,480 --> 01:03:51,910
Now we have another 15 minutes. 

1020
01:03:52,720 --> 01:03:55,020
Let me tell you a little bit about the congestion control. 

1021
01:03:56,200 --> 01:03:57,370
Flow control, 

1022
01:03:57,380 --> 01:03:58,550
don't overflow, 

1023
01:03:58,560 --> 01:04:00,910
the receiver congestion control, 

1024
01:04:01,580 --> 01:04:03,410
don't overflow the network. 

1025
01:04:03,750 --> 01:04:06,060
The network has routers has buffers in between. 

1026
01:04:07,820 --> 01:04:09,480
So now the question is, 

1027
01:04:09,810 --> 01:04:14,540
how you are going to detect the congestion is an adult. 

1028
01:04:15,240 --> 01:04:19,290
And remember the congestion i'm going to detect as a transfer level. 

1029
01:04:19,550 --> 01:04:19,630
Player. 

1030
01:04:19,640 --> 01:04:21,790
There is no transfer layer in the network. 

1031
01:04:21,800 --> 01:04:23,410
It's only between two and host. 

1032
01:04:23,420 --> 01:04:25,650
So I can only observe the network. 

1033
01:04:27,020 --> 01:04:28,990
There are a few ways to detect the congestions. 

1034
01:04:30,120 --> 01:04:31,990
One, a packet is dropped.

1035
01:04:32,810 --> 01:04:35,240
You interpret this to be a sign of congestion, 

1036
01:04:35,250 --> 01:04:39,350
because you assume there's the reason a packet has been dropped is

1037
01:04:39,360 --> 01:04:42,740
that because a buffer of the router was overflow, 

1038
01:04:44,030 --> 01:04:50,510
filled in the router can no longer cannot send packets as fast as you get

1039
01:04:50,520 --> 01:04:52,310
the buffer fields in packers at all. 

1040
01:04:53,760 --> 01:04:55,390
There is a modified version, 

1041
01:04:55,400 --> 01:04:57,150
early congestion amplification. 

1042
01:04:57,160 --> 01:04:59,310
So when the buffer is a router, 

1043
01:05:00,770 --> 01:05:03,010
increases of over some threshold, 

1044
01:05:03,410 --> 01:05:07,400
the router set up a bit is called easy and bit in the packet. 

1045
01:05:08,890 --> 01:05:13,560
And then the receiver sends back to the sender saying, hey,

1046
01:05:14,820 --> 01:05:16,060
don't send a slowdown, 

1047
01:05:16,070 --> 01:05:21,320
because this router it's about to be is congested. 

1048
01:05:22,500 --> 01:05:24,360
The other one is the light packets. 

1049
01:05:24,840 --> 01:05:26,070
When the buffer grows, 

1050
01:05:26,080 --> 01:05:30,380
the late entrance latency growth is like on the highway. 

1051
01:05:32,250 --> 01:05:34,280
If I see that the delay has increased, 

1052
01:05:34,290 --> 01:05:35,560
maybe I need to slow down. 

1053
01:05:37,790 --> 01:05:39,030
The simplest one. 

1054
01:05:39,960 --> 01:05:41,630
It's drop packets. 

1055
01:05:41,640 --> 01:05:43,270
And this is what we are going to assume, 

1056
01:05:43,710 --> 01:05:47,050
is the most use sign of congestion today. 

1057
01:05:48,800 --> 01:05:52,590
Like we discussed, there are two ways what to detect these drawbacks.

1058
01:05:52,600 --> 01:05:53,790
Again, the question is,

1059
01:05:53,800 --> 01:05:55,320
how do you detect a drawback? 

1060
01:05:57,790 --> 01:05:58,180
Right? 

1061
01:05:59,650 --> 01:06:02,970
Congestion means the router buffer is full, 

1062
01:06:04,160 --> 01:06:06,580
and then because it's full, the bakery is dropped.

1063
01:06:06,590 --> 01:06:07,340
But now, 

1064
01:06:08,610 --> 01:06:09,610
if i'm the sender, 

1065
01:06:09,620 --> 01:06:13,960
how i'm going to know that's a packet of stock, 

1066
01:06:15,860 --> 01:06:17,830
how i'm going to decide a packet of stock. 

1067
01:06:19,230 --> 01:06:23,690
One way is like we discussed earlier on timeout. 

1068
01:06:24,200 --> 01:06:25,440
I wait for some time, 

1069
01:06:25,450 --> 01:06:28,000
which is significantly larger than round 3 time. 

1070
01:06:28,010 --> 01:06:29,480
I don't get an acknowledgment. 

1071
01:06:29,490 --> 01:06:31,610
I assume the packet is lost, 

1072
01:06:32,300 --> 01:06:33,460
even if it was. 

1073
01:06:33,470 --> 01:06:36,670
So I resent it. 

1074
01:06:36,680 --> 01:06:39,530
And the other one I just alluded to you earlier on. 

1075
01:06:40,430 --> 01:06:44,320
It's when I received the same acknowledgment, 

1076
01:06:45,400 --> 01:06:48,400
the same sequence number in the acknowledgment, the next sequence number,

1077
01:06:48,410 --> 01:06:50,440
expected sequence number over and over again. 

1078
01:06:53,120 --> 01:06:54,600
Because again, in this case,

1079
01:06:54,930 --> 01:06:56,830
i'm going to send yourself, in this case,

1080
01:06:56,840 --> 01:06:59,800
I send you the packet200, 

1081
01:07:01,490 --> 01:07:02,000
right? 

1082
01:07:02,230 --> 01:07:03,590
From 100 to 200. 

1083
01:07:03,600 --> 01:07:06,830
So you tell me the next sequence number i'm going to, 

1084
01:07:06,840 --> 01:07:10,130
I ii am expecting from you is 201. 

1085
01:07:10,140 --> 01:07:10,390
Now. 

1086
01:07:11,030 --> 01:07:13,980
I'm sending you the next packet with a bias 200 to 300. 

1087
01:07:16,130 --> 01:07:16,580
You lost. 

1088
01:07:17,360 --> 01:07:18,300
You don't tell me anything. 

1089
01:07:19,230 --> 01:07:21,370
Now i'm sending the next packet 300 to 400. 

1090
01:07:22,880 --> 01:07:24,660
You give me the acknowledgment for that packet, 

1091
01:07:24,670 --> 01:07:25,780
but is the sequence number. 

1092
01:07:25,790 --> 01:07:29,690
Next sequence, expected sequence number is still to 100,

1093
01:07:29,970 --> 01:07:32,300
because you are telling me about the in sequence, 

1094
01:07:33,130 --> 01:07:35,590
next expected in sequencing number. 

1095
01:07:37,450 --> 01:07:40,320
Now, you told me 2 times 206,

1096
01:07:40,330 --> 01:07:41,440
the next sequence. 

1097
01:07:41,890 --> 01:07:43,050
In sequence number, 

1098
01:07:43,060 --> 01:07:45,790
you expect this 201. 

1099
01:07:46,400 --> 01:07:48,170
I'm sending you another packet. 

1100
01:07:48,410 --> 01:07:50,990
Now between 400 and $500. 

1101
01:07:52,250 --> 01:07:56,150
Again, you tell me the next bike in sequence,

1102
01:07:56,160 --> 01:07:57,670
i'm expecting is 201. 

1103
01:07:58,510 --> 01:08:01,770
Again, an acknowledgment which is duplicate.

1104
01:08:02,020 --> 01:08:03,730
This is what they called applicant acknowledgment, 

1105
01:08:03,740 --> 01:08:06,530
because you tell me repeatedly over and over, I call you,

1106
01:08:06,540 --> 01:08:09,250
don't they told me over and over again. 

1107
01:08:09,380 --> 01:08:10,990
Beyond the next equal number, 

1108
01:08:11,000 --> 01:08:13,030
i'm expecting is 201. 

1109
01:08:14,090 --> 01:08:15,460
So after a few of those, 

1110
01:08:15,470 --> 01:08:19,580
I decide that packet was lost. 

1111
01:08:19,590 --> 01:08:22,780
And i'm going to resent this is the applicant acknowledge. 

1112
01:08:28,090 --> 01:08:28,740
Make sense? 

1113
01:08:33,860 --> 01:08:35,250
Congestion control. 

1114
01:08:35,260 --> 01:08:41,000
The key idea is a standard increase to increase ascending rate

1115
01:08:41,010 --> 01:08:43,700
if the network until congestion, 

1116
01:08:43,710 --> 01:08:47,900
if the network is not congested, 

1117
01:08:48,410 --> 01:08:50,830
individuals ascending ratings and turkeys congest, 

1118
01:08:53,590 --> 01:08:55,440
how does the sender control sending rate? 

1119
01:08:56,360 --> 01:09:00,240
Send their it's called window size, the sending window size,

1120
01:09:00,770 --> 01:09:03,590
which is called right now in this context, 

1121
01:09:03,600 --> 01:09:05,110
congestion and window size. 

1122
01:09:13,260 --> 01:09:15,300
Here is a great question from allison. 

1123
01:09:15,760 --> 01:09:18,070
About the previous case. 

1124
01:09:18,510 --> 01:09:19,600
What I mentioned to you, 

1125
01:09:20,400 --> 01:09:22,310
the question from allison is the following. 

1126
01:09:23,270 --> 01:09:26,500
Can you not conclude it was lost? 

1127
01:09:26,510 --> 01:09:29,060
The packet was lost after the first duplicate act? 

1128
01:09:36,850 --> 01:09:39,040
Tell me why you wouldn't do that. 

1129
01:09:40,350 --> 01:09:42,220
You could do that, but why you wouldn't do it.

1130
01:09:59,690 --> 01:10:00,810
May be out of order. 

1131
01:10:01,300 --> 01:10:04,030
It's exactly out of order arrivals. 

1132
01:10:04,700 --> 01:10:05,310
You see, 

1133
01:10:05,700 --> 01:10:11,560
look at this figure and assume that these packets which is lost

1134
01:10:11,570 --> 01:10:12,720
instead of being lost. 

1135
01:10:13,400 --> 01:10:18,460
It travels on a different passenger network and arrives

1136
01:10:18,470 --> 01:10:22,820
actually as a destination after the packet, 

1137
01:10:24,580 --> 01:10:25,620
the force packet, 

1138
01:10:27,150 --> 01:10:33,780
the one, which right after the last packet, right?

1139
01:10:34,630 --> 01:10:35,880
Which was sent by the sender. 

1140
01:10:37,630 --> 01:10:40,360
The third packet is lost in this example, 

1141
01:10:40,370 --> 01:10:41,600
but assume is not lost, 

1142
01:10:42,150 --> 01:10:43,760
but it arrives after the force packet. 

1143
01:10:45,590 --> 01:10:46,780
If that's the case, 

1144
01:10:48,250 --> 01:10:50,330
the sender will see the same things. 

1145
01:10:50,340 --> 01:10:52,620
It cannot differentiate between the two. 

1146
01:10:55,160 --> 01:10:57,280
So waiting for more duplicate acknowledgments, 

1147
01:10:57,290 --> 01:11:01,600
it's a way to make it more sure that the packet was really lost. 

1148
01:11:02,570 --> 01:11:04,360
It's not because the packets are ordered, 

1149
01:11:04,370 --> 01:11:05,520
and the packets are reordered, 

1150
01:11:05,530 --> 01:11:08,800
because every packet can take a different route in the network, 

1151
01:11:12,010 --> 01:11:19,770
which means also is through a dialogue that street applicant acknowledgment missing a city that became $1 million

1152
01:11:19,780 --> 01:11:24,550
are not necessarily always guarantee a back at has been lost. 

1153
01:11:25,850 --> 01:11:26,410
It's correct. 

1154
01:11:26,720 --> 01:11:30,990
It just increase the probability that a session to be correct. 

1155
01:11:33,170 --> 01:11:33,620
Okay. 

1156
01:11:35,800 --> 01:11:37,670
How does the sender control sending? 

1157
01:11:37,680 --> 01:11:38,070
Right? 

1158
01:11:38,080 --> 01:11:40,550
It's as easy in account as again, a window.

1159
01:11:40,890 --> 01:11:44,300
It's called congestion window size and congestion window size. 

1160
01:11:45,530 --> 01:11:50,740
It's going to take the minimum between the sending window size

1161
01:11:51,060 --> 01:11:54,840
and this congestion window site, 

1162
01:11:54,850 --> 01:11:56,880
which is computed in the network. 

1163
01:11:59,010 --> 01:12:01,940
And obviously, it might be less than the receiver advertising, though,

1164
01:12:02,600 --> 01:12:07,340
and increase the size of the windows and until congestion and reduce

1165
01:12:07,350 --> 01:12:09,060
the size of the window if congestion. 

1166
01:12:09,390 --> 01:12:09,810
Right? 

1167
01:12:10,030 --> 01:12:11,050
Because the window size, 

1168
01:12:11,060 --> 01:12:12,790
it tells me how many packets, 

1169
01:12:13,130 --> 01:12:18,460
how many buys I can send without being acknowledged. 

1170
01:12:20,310 --> 01:12:20,710
Right? 

1171
01:12:21,970 --> 01:12:23,920
Bigger window means higher throughput. 

1172
01:12:23,930 --> 01:12:29,750
I can send more data before being acknowledged smaller window size. 

1173
01:12:30,200 --> 01:12:31,640
I can send, if it's unpack it,

1174
01:12:31,650 --> 01:12:33,280
I can it's stop and wait. 

1175
01:12:36,610 --> 01:12:37,670
So finally, 

1176
01:12:37,950 --> 01:12:41,020
let me tell you, i'm going to spend a few minutes on this plot.

1177
01:12:41,340 --> 01:12:46,610
And this is just to give you a taste about how is the tcp

1178
01:12:46,620 --> 01:12:47,910
it's working and congestion control. 

1179
01:12:48,970 --> 01:12:49,680
What is working? 

1180
01:12:50,000 --> 01:12:50,940
This is one, right?

1181
01:12:53,340 --> 01:12:54,330
First of all, 

1182
01:12:54,340 --> 01:13:01,390
I don't know how much when I am starting to send data as a receiver as a sender, 

1183
01:13:01,800 --> 01:13:02,720
sorry, as a sender.

1184
01:13:03,350 --> 01:13:08,750
I know how much the receiver can handle, 

1185
01:13:08,760 --> 01:13:11,070
because the receiver there is a initially, 

1186
01:13:11,080 --> 01:13:14,790
when I established a connection and a three way handshake protocol, 

1187
01:13:14,800 --> 01:13:16,870
and the receiver tell me about the advertisement. 

1188
01:13:17,200 --> 01:13:17,570
It's advertising. 

1189
01:13:17,580 --> 01:13:21,590
So I I know how much to send result of applying this. 

1190
01:13:21,600 --> 01:13:22,550
That is very simple. 

1191
01:13:23,000 --> 01:13:26,230
But they don't know about how much I can send without overflowing is

1192
01:13:26,730 --> 01:13:30,240
a network that what i'm sending, 

1193
01:13:30,250 --> 01:13:33,240
i'm going to send a start with a congestion window of one. 

1194
01:13:33,610 --> 01:13:34,870
Let's again, 

1195
01:13:34,880 --> 01:13:36,770
think about our congestion window, 

1196
01:13:36,780 --> 01:13:39,560
one packet to simplify the discussion. 

1197
01:13:40,480 --> 01:13:46,010
I'm moving from one from window measuring and bytes into packs to pack us again. 

1198
01:13:47,020 --> 01:13:49,420
I'm sending one packet and i'm waiting for acknowledgment. 

1199
01:13:49,430 --> 01:13:51,040
So i'm sending only one packet. 

1200
01:13:52,060 --> 01:13:53,210
So it's like stop. 

1201
01:13:53,220 --> 01:13:55,510
And now, 

1202
01:13:55,520 --> 01:13:57,310
when i'm getting the first acknowledgment, 

1203
01:13:57,320 --> 01:13:59,110
I saw I sent a packet. 

1204
01:13:59,120 --> 01:14:00,010
It went through. 

1205
01:14:00,630 --> 01:14:02,030
Let me be more aggressive. 

1206
01:14:02,040 --> 01:14:02,310
Now. 

1207
01:14:03,090 --> 01:14:06,980
I'm going to increase the congestion window when I get the acknowledgment

1208
01:14:06,990 --> 01:14:07,580
by one. 

1209
01:14:08,350 --> 01:14:10,150
Now i'm going to send two packets. 

1210
01:14:12,130 --> 01:14:16,570
And each acknowledgment I get, 

1211
01:14:17,780 --> 01:14:20,830
I add another one to the congestion window. 

1212
01:14:21,710 --> 01:14:23,230
Now, this is called slow start.

1213
01:14:23,740 --> 01:14:25,410
Slow start is a terrible name, 

1214
01:14:25,420 --> 01:14:26,450
because actually, 

1215
01:14:26,750 --> 01:14:33,310
if you think about in the slow start by cw is a congestion window here, 

1216
01:14:35,240 --> 01:14:36,520
if you increase a congestion window, 

1217
01:14:36,530 --> 01:14:38,600
every time you get a knock by one, 

1218
01:14:39,210 --> 01:14:41,930
you double the congestion into every rounded time. 

1219
01:14:42,250 --> 01:14:43,480
In the first round of time, 

1220
01:14:43,490 --> 01:14:44,680
I sent one packet. 

1221
01:14:44,690 --> 01:14:46,680
I got one acknowledgment. 

1222
01:14:46,770 --> 01:14:47,120
Now. 

1223
01:14:47,130 --> 01:14:48,200
In the second round of time, 

1224
01:14:48,210 --> 01:14:49,560
I sent two packets. 

1225
01:14:49,990 --> 01:14:52,780
I get two acknowledgment for each acknowledgment I get

1226
01:14:52,790 --> 01:14:55,420
in the second round trip time. 

1227
01:14:55,430 --> 01:14:59,580
I'm going to increase the window size by one from two is going to go to four. 

1228
01:15:00,290 --> 01:15:01,730
Now, in the third condition,

1229
01:15:01,740 --> 01:15:03,050
in a round of time, 

1230
01:15:03,060 --> 01:15:05,110
i'm going to send four packets. 

1231
01:15:05,560 --> 01:15:08,330
For each acknowledgment, i'm going to increase the condition by one,

1232
01:15:08,340 --> 01:15:09,690
so i'm going to have eight. 

1233
01:15:10,890 --> 01:15:12,330
This is what you see. 

1234
01:15:12,340 --> 01:15:15,390
The congestion window side is on the vertical. 

1235
01:15:15,990 --> 01:15:19,140
It's going from small a double every time. 

1236
01:15:19,550 --> 01:15:20,660
And at some point, 

1237
01:15:21,590 --> 01:15:25,560
I am going probably to lose a packet, 

1238
01:15:26,390 --> 01:15:27,510
because I sent too much. 

1239
01:15:28,990 --> 01:15:30,320
This is when the packet is lost. 

1240
01:15:31,150 --> 01:15:34,190
So what i'm going to do when that happened, 

1241
01:15:37,130 --> 01:15:38,570
you need to be very aggressive, 

1242
01:15:38,990 --> 01:15:42,550
because it turns out that if you are not very aggressive, 

1243
01:15:42,560 --> 01:15:45,000
and this is it's a queuing theory properly. 

1244
01:15:45,010 --> 01:15:46,840
We don't have time to go into it. 

1245
01:15:47,440 --> 01:15:51,170
But if you don't reduce a sending rate very fast, 

1246
01:15:51,990 --> 01:15:54,030
you cannot be relieved the congestion. 

1247
01:15:57,120 --> 01:15:57,420
Right? 

1248
01:15:57,890 --> 01:15:59,770
So in this case, you are very dramatic.

1249
01:16:00,250 --> 01:16:04,750
They are going to go in the congestion window all the way to one reduce it. 

1250
01:16:05,170 --> 01:16:07,490
And then you go, again, slow start,

1251
01:16:07,710 --> 01:16:08,840
the gain, exponential increase.

1252
01:16:08,850 --> 01:16:11,720
But now you go through until to this threshold. 

1253
01:16:13,740 --> 01:16:18,260
And this threshold is the last a is a congestion window. 

1254
01:16:19,520 --> 01:16:20,950
In the previous slow start, 

1255
01:16:21,870 --> 01:16:23,020
you are still successful. 

1256
01:16:23,030 --> 01:16:24,470
All the packers made it. 

1257
01:16:26,510 --> 01:16:26,960
Right? 

1258
01:16:27,390 --> 01:16:28,040
Congestion window. 

1259
01:16:28,050 --> 01:16:29,030
It was eight. 

1260
01:16:29,040 --> 01:16:30,350
I sent eight packets. 

1261
01:16:30,360 --> 01:16:31,670
I got eight acknowledgment. 

1262
01:16:32,210 --> 01:16:35,230
Then and then when I conditional increase to 16, 

1263
01:16:35,240 --> 01:16:38,560
I got I lost by I lost packets. 

1264
01:16:38,890 --> 01:16:40,340
I'm going the next time. 

1265
01:16:40,550 --> 01:16:43,020
I am only going to stop this slow start. 

1266
01:16:43,720 --> 01:16:44,800
What aggressive start? 

1267
01:16:45,500 --> 01:16:46,630
2~8. 

1268
01:16:48,160 --> 01:16:50,480
Because I know that kind of a successful last time. 

1269
01:16:50,490 --> 01:16:57,380
And then i'm going to be much more timidly explore how increase and explore

1270
01:16:57,390 --> 01:16:58,930
the capacity of the network. 

1271
01:16:59,650 --> 01:17:00,040
Right? 

1272
01:17:00,650 --> 01:17:06,660
So i'm going to increase now with one i'm going only to increase is that I

1273
01:17:06,670 --> 01:17:07,420
was talking about. 

1274
01:17:07,430 --> 01:17:12,330
And now i'm going to increase only the condition we know by one

1275
01:17:13,080 --> 01:17:13,840
by round trip time. 

1276
01:17:14,330 --> 01:17:16,180
So this means that in now, 

1277
01:17:17,030 --> 01:17:19,020
when i'm going to get an acknowledgment, 

1278
01:17:19,030 --> 01:17:23,570
i'm going to increase a congestion window by one over n where n Is

1279
01:17:23,580 --> 01:17:25,290
a current congestion window size. 

1280
01:17:26,250 --> 01:17:28,680
If I have the congestion window site is stand, 

1281
01:17:28,690 --> 01:17:31,360
and every acknowledgment I'm going to increase, 

1282
01:17:31,740 --> 01:17:33,700
the window sized by 1/10. 

1283
01:17:33,980 --> 01:17:35,750
Now, in one round of time,

1284
01:17:35,760 --> 01:17:39,210
I'm going to increase a condition from 10 to 11. 

1285
01:17:41,280 --> 01:17:42,380
You get this one. 

1286
01:17:42,670 --> 01:17:43,780
This is additive increase. 

1287
01:17:43,790 --> 01:17:44,900
It's called additive increase. 

1288
01:17:45,380 --> 01:17:45,740
Right? 

1289
01:17:46,280 --> 01:17:47,390
Then I get the loss here. 

1290
01:17:47,400 --> 01:17:50,630
If I lost here, maybe I is because cw get acknowledgment.

1291
01:17:50,640 --> 01:17:51,870
Now I'm going back. 

1292
01:17:52,250 --> 01:17:53,790
If it's really double, we get acknowledgment.

1293
01:17:53,800 --> 01:17:55,870
I'm going to get back to the threshold. 

1294
01:17:56,650 --> 01:17:56,980
Right? 

1295
01:17:57,440 --> 01:17:59,860
And then I go, I grow again and things like that.

1296
01:18:05,250 --> 01:18:06,460
So that's basically what it is. 

1297
01:18:06,810 --> 01:18:09,410
So there is an early stage, 

1298
01:18:09,800 --> 01:18:12,830
you grow very fast to explore the limits of the network. 

1299
01:18:13,710 --> 01:18:14,810
Then after that, 

1300
01:18:14,820 --> 01:18:17,400
you get into this regime, which is,

1301
01:18:17,410 --> 01:18:18,510
at the end, 

1302
01:18:18,810 --> 01:18:20,580
you additive increase, 

1303
01:18:21,550 --> 01:18:23,810
then the window size, and you get a loss,

1304
01:18:23,820 --> 01:18:25,370
you multiply to be decrease. 

1305
01:18:25,690 --> 01:18:27,290
This is called multiplying degrees. 

1306
01:18:27,300 --> 01:18:29,050
Basically, you're cutting to half.

1307
01:18:29,270 --> 01:18:29,660
In general, 

1308
01:18:30,980 --> 01:18:32,090
you grow linearly, 

1309
01:18:32,100 --> 01:18:34,970
you cut it to half, you grow linearly, you cut it to half.

1310
01:18:37,360 --> 01:18:38,110
That's pretty much. 

1311
01:18:38,600 --> 01:18:38,870
Again. 

1312
01:18:38,880 --> 01:18:39,950
It's fascinating. 

1313
01:18:41,910 --> 01:18:44,780
Algorithm is very simple, but in dynamics,

1314
01:18:44,790 --> 01:18:46,300
the dynamics are fascinating. 

1315
01:18:47,700 --> 01:18:49,050
I'm going to stop here, 

1316
01:18:49,060 --> 01:18:52,490
and we talk about the network. 

1317
01:18:52,980 --> 01:18:57,180
The networking summary we will talk about at least we talk about networking. 

1318
01:18:58,120 --> 01:19:00,400
We have a few lecture on that. 

1319
01:19:01,700 --> 01:19:04,950
Remember the internet has five layers, physical layer, data link,

1320
01:19:04,960 --> 01:19:05,830
layer network layer, 

1321
01:19:05,840 --> 01:19:07,390
transporter application layer. 

1322
01:19:09,160 --> 01:19:12,910
We talk about and to end argument and to our argument is saying

1323
01:19:12,920 --> 01:19:16,070
that if higher layers can implement functionally correctly, 

1324
01:19:17,950 --> 01:19:21,510
you should implement the functionality as a lower layer only if it improves

1325
01:19:21,520 --> 01:19:25,750
the performance significantly for applications that needs a function ID

1326
01:19:25,760 --> 01:19:29,990
and it does not impose burden on applications that do not require this functionality. 

1327
01:19:31,230 --> 01:19:32,780
We discuss flow control, 

1328
01:19:32,790 --> 01:19:35,510
which is whose goal is not overflows. 

1329
01:19:35,520 --> 01:19:37,100
The receiver buffer. 

1330
01:19:37,850 --> 01:19:39,520
Congestion control is the main goal, 

1331
01:19:39,530 --> 01:19:40,720
is to not overflowing it. 

1332
01:19:41,980 --> 01:19:42,490
Thank you. 

1333
01:19:42,500 --> 01:19:43,570
And next lecture, 

1334
01:19:43,580 --> 01:19:46,250
I'm going to do its special topics. 

1335
01:19:46,580 --> 01:19:50,780
I'm going to tell you a little bit about some of the research which we

1336
01:19:50,790 --> 01:19:53,100
have been doing at rice lab and envelope. 

1337
01:19:54,510 --> 01:19:55,740
Okay, see you all.

1338
01:19:58,770 --> 01:19:59,910
I'm going to stop here. 

1339
01:19:59,920 --> 01:20:02,660
And there is a question I'm going to take. 


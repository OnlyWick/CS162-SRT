1
00:00:07,100 --> 00:00:08,330
Hello, everyone.

2
00:00:08,340 --> 00:00:12,730
So today we are going to talk about a few things. 

3
00:00:12,780 --> 00:00:15,210
I think all very interesting topics. 

4
00:00:15,910 --> 00:00:20,810
In particular, you are going to talk about transactions how in general,

5
00:00:20,820 --> 00:00:25,360
how do different computers can agree with each other? 

6
00:00:26,650 --> 00:00:29,480
And then we are going to talk quite a bit about networking. 

7
00:00:32,290 --> 00:00:34,280
Let's start, if you remember,

8
00:00:34,290 --> 00:00:35,600
from last time, 

9
00:00:37,080 --> 00:00:41,230
we discussed about we touch on the protocols and protocol is

10
00:00:41,240 --> 00:00:45,030
a fundamental concept when

11
00:00:45,790 --> 00:00:47,910
two parties are communicating, 

12
00:00:48,540 --> 00:00:53,480
because you need a protocol to see how everyone is going to perform

13
00:00:53,490 --> 00:00:56,780
the communication and how is going to interpret the communication. 

14
00:00:58,010 --> 00:01:00,150
And like we discussed last time, 

15
00:01:00,160 --> 00:01:03,850
there are two parts of a protocol is a syntax. 

16
00:01:04,400 --> 00:01:09,260
And the syntax is basically describe the structure, 

17
00:01:09,270 --> 00:01:13,200
the comments of the communication protocol. 

18
00:01:13,640 --> 00:01:17,570
Then there is a semantics which describe the meaning of, 

19
00:01:19,010 --> 00:01:22,350
say, the messages of the meaning of the comments.

20
00:01:24,890 --> 00:01:29,240
And these are typically implemented by state machines. 

21
00:01:30,080 --> 00:01:31,350
You send a message. 

22
00:01:31,360 --> 00:01:33,910
What is the same machine means here? 

23
00:01:33,920 --> 00:01:38,480
Is that you are going in initial state and from initial state, 

24
00:01:38,490 --> 00:01:40,840
you are going to send a message. 

25
00:01:41,090 --> 00:01:42,810
And then you made transition in a state, 

26
00:01:43,300 --> 00:01:44,970
and you are waiting for a reply. 

27
00:01:45,350 --> 00:01:45,540
Right? 

28
00:01:45,550 --> 00:01:46,780
That's a different state. 

29
00:01:47,400 --> 00:01:49,110
If you wait for the reply, 

30
00:01:49,120 --> 00:01:50,510
the reply doesn't come, 

31
00:01:50,520 --> 00:01:52,510
then you may have experience a time out, 

32
00:01:52,520 --> 00:01:54,310
and you are going to go into another state. 

33
00:01:54,320 --> 00:01:56,230
And maybe you are going to, 

34
00:01:56,640 --> 00:01:58,180
he sent the original message, 

35
00:01:58,720 --> 00:01:58,910
right? 

36
00:01:58,920 --> 00:02:00,070
Just to give you a sense. 

37
00:02:03,420 --> 00:02:10,750
And also, if you want to the protocol to be for tolerant,

38
00:02:11,110 --> 00:02:13,900
one way to do it is to start its state, 

39
00:02:14,210 --> 00:02:15,770
the current state of the protocol. 

40
00:02:16,450 --> 00:02:17,840
So that when you are going, 

41
00:02:17,850 --> 00:02:23,370
when you come back up after the failures where you left, 

42
00:02:28,010 --> 00:02:30,310
here is a very simple class example. 

43
00:02:30,650 --> 00:02:31,630
This is about, 

44
00:02:33,450 --> 00:02:34,000
for instance, 

45
00:02:34,010 --> 00:02:37,360
when you talk with someone with telephone or by telephone by phone, 

46
00:02:38,810 --> 00:02:40,640
you pick up the phone, 

47
00:02:41,080 --> 00:02:46,650
but I do open it and listen for dial tone today on the cell phones that are

48
00:02:46,660 --> 00:02:48,170
no longer dial phones. 

49
00:02:48,180 --> 00:02:53,440
But if you used one of these older phones that it's a dial phone, 

50
00:02:53,450 --> 00:02:58,170
dial down and dial down meanings that the phone it's available, 

51
00:02:58,180 --> 00:03:01,850
you can dial in the number. 

52
00:03:02,310 --> 00:03:05,020
If it's busy signals and you cannot, well, you can,

53
00:03:05,030 --> 00:03:06,180
but if nothing will happen, 

54
00:03:06,800 --> 00:03:09,720
so you dial a phone is aa number, 

55
00:03:09,730 --> 00:03:11,920
and then you hear the ringing. 

56
00:03:12,430 --> 00:03:12,900
Right? 

57
00:03:13,350 --> 00:03:15,300
This means that the other person, 

58
00:03:15,310 --> 00:03:16,500
the founding store, 

59
00:03:16,510 --> 00:03:17,980
the other person, 

60
00:03:18,660 --> 00:03:22,250
and then colleagues and is going to answer hello. 

61
00:03:22,700 --> 00:03:26,390
And then you are going to start a conversation. 

62
00:03:29,800 --> 00:03:31,390
Then typically, 

63
00:03:31,440 --> 00:03:34,310
there is some kind of the protocol, right?

64
00:03:34,320 --> 00:03:35,430
What is this is, again,

65
00:03:35,440 --> 00:03:36,670
describes a protocol. 

66
00:03:37,770 --> 00:03:40,960
Then typically, when you wait for an answer, what do you do?

67
00:03:41,490 --> 00:03:42,440
You pause, right?

68
00:03:42,450 --> 00:03:43,760
You don't continue speaking. 

69
00:03:44,340 --> 00:03:45,340
You ask a question, 

70
00:03:45,350 --> 00:03:50,400
and then you are opposing what you want to give the other party a chance to

71
00:03:50,410 --> 00:03:50,720
talk. 

72
00:03:53,070 --> 00:03:55,670
And then when the conversation ends, 

73
00:03:55,680 --> 00:04:00,150
you say something like buy or see you soon, 

74
00:04:00,680 --> 00:04:02,670
then you hang up, right?

75
00:04:03,740 --> 00:04:06,000
This is an example of protocol, right?

76
00:04:06,010 --> 00:04:10,540
And we are going to talk about some of the most important protocols

77
00:04:10,550 --> 00:04:12,360
networking next lecture. 

78
00:04:12,370 --> 00:04:17,460
In particular, we are going to talk about dcb transfer control protocol.

79
00:04:20,210 --> 00:04:20,980
Any questions? 

80
00:04:25,400 --> 00:04:25,930
Okay. 

81
00:04:27,970 --> 00:04:28,280
Again, 

82
00:04:28,290 --> 00:04:33,240
these are red lines represent the basically the communication exchange

83
00:04:33,250 --> 00:04:35,080
of the information between the two parts. 

84
00:04:35,690 --> 00:04:36,290
To part of this. 

85
00:04:39,130 --> 00:04:47,500
The first group of adults exchange represent setting up the connection, 

86
00:04:48,570 --> 00:04:49,520
setting up the call, 

87
00:04:51,000 --> 00:04:51,300
right? 

88
00:04:51,310 --> 00:04:52,260
If you ring. 

89
00:04:52,970 --> 00:04:57,360
And then the other party answers that from that point you can start communicating. 

90
00:04:58,450 --> 00:05:02,250
Then the second group of arrows represent the communication. 

91
00:05:02,630 --> 00:05:05,870
Once the after the connection has been established, 

92
00:05:07,300 --> 00:05:09,490
the last group, it's obviously closing the connection.

93
00:05:11,620 --> 00:05:12,470
Last two arrows. 

94
00:05:15,940 --> 00:05:16,660
So now, 

95
00:05:17,310 --> 00:05:18,810
so fundamentally, 

96
00:05:18,820 --> 00:05:22,970
now we are having an adult and we are having different machines. 

97
00:05:23,820 --> 00:05:25,410
Like we discussed last time, 

98
00:05:25,420 --> 00:05:28,290
many of the applications are running on different machines. 

99
00:05:31,040 --> 00:05:33,770
All of these your client, 

100
00:05:34,260 --> 00:05:35,310
facebook client. 

101
00:05:35,740 --> 00:05:39,630
And back end of facebook is the same application. 

102
00:05:40,410 --> 00:05:45,880
The back end of face facebook or google consist of many machines, 

103
00:05:45,890 --> 00:05:50,350
but I don't know serena queries that are a large number of machines which

104
00:05:50,360 --> 00:05:55,030
are going to contribute to provide you with the answer. 

105
00:05:56,750 --> 00:06:02,180
This machine somehow needs to communicate and needs to synchronize among themselves. 

106
00:06:03,450 --> 00:06:07,200
And the biggest challenge here is that it's, again,

107
00:06:07,210 --> 00:06:14,270
it's like you need to on a single machines, 

108
00:06:14,280 --> 00:06:21,200
we have the same problem to synchronize multiple threads in the case

109
00:06:21,210 --> 00:06:22,440
of a single machine. 

110
00:06:23,550 --> 00:06:28,370
We've done that at the end of the day by using this kind of harder primitives, 

111
00:06:28,380 --> 00:06:29,730
like test and set, 

112
00:06:29,740 --> 00:06:31,090
which are atomic slide, 

113
00:06:31,100 --> 00:06:33,470
checking a value and setting a value. 

114
00:06:33,570 --> 00:06:35,020
And that operation is atomic. 

115
00:06:35,430 --> 00:06:36,580
If you remember, it's all very,

116
00:06:36,590 --> 00:06:42,520
very helpful to build also the higher level, communicate,

117
00:06:42,970 --> 00:06:44,160
synchronization, primitives,

118
00:06:44,170 --> 00:06:45,680
like pnb and things like that. 

119
00:06:46,320 --> 00:06:48,010
Or locks and summer force. 

120
00:06:49,750 --> 00:06:54,530
The problem a a a in a distributed system. 

121
00:06:54,750 --> 00:06:56,160
That's the only way to, 

122
00:06:56,170 --> 00:07:02,830
but to application process is running on different machines, 

123
00:07:03,120 --> 00:07:06,500
can communicate is through sending a receiving message. 

124
00:07:06,730 --> 00:07:14,670
That's the only say thing you have and sending and receiving

125
00:07:14,680 --> 00:07:18,930
a message is atomic in the sense that typically the receiver gets

126
00:07:18,940 --> 00:07:20,730
the entire message you send by, 

127
00:07:20,740 --> 00:07:22,230
the sender don't send, 

128
00:07:22,240 --> 00:07:24,030
you don't get half a message, 

129
00:07:30,230 --> 00:07:31,850
but not you don't have more than that. 

130
00:07:32,400 --> 00:07:32,860
Right? 

131
00:07:33,540 --> 00:07:33,940
Anyway, 

132
00:07:35,590 --> 00:07:43,470
if you can think about what the abstraction looks like to

133
00:07:43,480 --> 00:07:48,110
exchange information between two processes running on different machines, 

134
00:07:49,280 --> 00:07:51,010
sending and receiving message. 

135
00:07:51,020 --> 00:07:53,450
Abstraction is like a mailbox, right?

136
00:07:54,080 --> 00:07:55,690
A you send a letter, 

137
00:07:55,700 --> 00:07:58,570
the recipient gets a letter and send you back. 

138
00:07:58,980 --> 00:07:59,340
Right? 

139
00:08:00,670 --> 00:08:05,450
You have a send primitive and receive primitive. 

140
00:08:05,840 --> 00:08:07,030
That's pretty much what you have. 

141
00:08:09,030 --> 00:08:09,920
So now, 

142
00:08:10,810 --> 00:08:15,450
let's think about how we are going to use these primitives to build

143
00:08:15,460 --> 00:08:17,090
higher level primitives. 

144
00:08:17,990 --> 00:08:20,200
One of the most basic primitives. 

145
00:08:20,210 --> 00:08:21,310
It's about consensus. 

146
00:08:21,570 --> 00:08:29,300
So basically, what consensus about is that you want multiple nodes,

147
00:08:30,630 --> 00:08:34,830
multiple parties to agree on a value. 

148
00:08:38,110 --> 00:08:40,730
This is what consensus means to agree on something, 

149
00:08:41,590 --> 00:08:42,020
right? 

150
00:08:43,540 --> 00:08:46,050
To pick one choice from multiple choices. 

151
00:08:51,380 --> 00:08:53,620
You need to do this in an environment, 

152
00:08:53,630 --> 00:08:56,330
in which different notes may fail, 

153
00:08:56,340 --> 00:09:01,540
a stop responding and messages can be lost. 

154
00:09:02,250 --> 00:09:04,430
And also, the message,

155
00:09:04,940 --> 00:09:07,760
how long it takes a message to be delivered, 

156
00:09:08,180 --> 00:09:09,220
can be unbounded. 

157
00:09:18,430 --> 00:09:19,410
So this is a problem, 

158
00:09:20,190 --> 00:09:20,630
right? 

159
00:09:21,050 --> 00:09:24,080
And just to simplify the problem, actually,

160
00:09:24,090 --> 00:09:28,930
you just think about that are two parties which wants to choose

161
00:09:29,220 --> 00:09:30,430
between train force. 

162
00:09:31,340 --> 00:09:31,640
Right? 

163
00:09:32,050 --> 00:09:36,910
And if they choose have the same choice, 

164
00:09:37,210 --> 00:09:38,890
they commit, otherwise they are boss.

165
00:09:42,260 --> 00:09:43,520
And, 

166
00:09:44,040 --> 00:09:47,080
again, need to do that in a globally scalable system.

167
00:09:47,440 --> 00:09:49,950
And the decision shouldn't be forgotten, 

168
00:09:50,380 --> 00:09:52,420
especially when there is a failure. 

169
00:09:52,950 --> 00:09:53,350
Right? 

170
00:09:53,690 --> 00:09:55,520
You need to have some sort of durability. 

171
00:09:56,980 --> 00:09:58,490
Here is the example, 

172
00:09:58,500 --> 00:10:00,010
is this general paradox. 

173
00:10:00,020 --> 00:10:05,850
This is us one formulation of the problem to just illustrated the point. 

174
00:10:06,790 --> 00:10:10,640
So he has assumed that you have two generals who want to attack, 

175
00:10:11,430 --> 00:10:13,790
who must attack the enemy. 

176
00:10:14,670 --> 00:10:17,610
In this case, the red enemy,

177
00:10:17,620 --> 00:10:18,890
the red castle in the middle. 

178
00:10:20,240 --> 00:10:20,640
Now, 

179
00:10:21,320 --> 00:10:24,570
if boss of these armies on his side, 

180
00:10:25,810 --> 00:10:27,230
attack at the same time, 

181
00:10:27,600 --> 00:10:28,680
they are going to win. 

182
00:10:31,760 --> 00:10:37,430
If the attack had different times that going to lose, 

183
00:10:38,520 --> 00:10:40,840
because the enemy will be is powerful, 

184
00:10:41,590 --> 00:10:43,670
is more powerful than a single army, 

185
00:10:45,430 --> 00:10:47,750
but it's less powerful than two army put together. 

186
00:10:49,480 --> 00:10:51,430
As such in this case, 

187
00:10:51,830 --> 00:11:00,420
the two armies need and the generals of the two armies need to agree, 

188
00:11:01,500 --> 00:11:02,140
went to attack. 

189
00:11:04,120 --> 00:11:05,840
Now, the biggest problem and obviously,

190
00:11:05,850 --> 00:11:09,430
here think about all times we need to send messengers, 

191
00:11:10,390 --> 00:11:12,990
but the messenger can be intercepted by the enemy, 

192
00:11:13,250 --> 00:11:15,170
because the enemy is in the valley. 

193
00:11:15,180 --> 00:11:16,570
So say, in this case,

194
00:11:16,790 --> 00:11:18,320
between the two arms, 

195
00:11:25,700 --> 00:11:31,620
this is it was aaa real similar situation like this custard in

196
00:11:35,440 --> 00:11:37,540
in the history of the united states. 

197
00:11:37,810 --> 00:11:42,740
That was about a little big horn when she arrived earlier, 

198
00:11:43,210 --> 00:11:44,960
and he engaged earlier, 

199
00:11:44,970 --> 00:11:47,110
and I believe he died. 

200
00:11:48,820 --> 00:11:49,690
But it's a problem. 

201
00:11:49,700 --> 00:11:50,350
There's a power. 

202
00:11:51,850 --> 00:11:59,540
What we need to do here is to develop a solution in which

203
00:11:59,550 --> 00:12:04,090
the two generals are going to agree on the time when to attack. 

204
00:12:05,650 --> 00:12:06,400
That's a problem. 

205
00:12:13,240 --> 00:12:21,070
Can you develop a such a protocol in an environment in which the messages

206
00:12:21,080 --> 00:12:21,950
can be lost? 

207
00:12:22,240 --> 00:12:23,450
Can be arbitrarily related? 

208
00:12:26,970 --> 00:12:29,740
It turns out that is the answer is no. 

209
00:12:35,420 --> 00:12:36,730
Fundamentally, it's again,

210
00:12:36,740 --> 00:12:37,930
say one general, 

211
00:12:37,940 --> 00:12:44,120
say I want to attack at 11:00 am the other ones say11:00 am works. 

212
00:12:44,870 --> 00:12:46,030
But then the second one, 

213
00:12:46,680 --> 00:12:51,840
who said that how he knows that the third general got his message, 

214
00:12:51,850 --> 00:12:52,680
the confirmation. 

215
00:12:53,910 --> 00:12:54,840
Because if he didn't, 

216
00:12:55,630 --> 00:12:55,950
right? 

217
00:12:55,960 --> 00:12:58,640
If he didn't get the confirmation, 

218
00:12:59,070 --> 00:13:01,130
then it's not going to attack. 

219
00:13:01,840 --> 00:13:02,230
Right? 

220
00:13:03,320 --> 00:13:04,910
And the second general attack alone, 

221
00:13:06,270 --> 00:13:06,520
right? 

222
00:13:06,530 --> 00:13:07,480
And so forth. 

223
00:13:09,360 --> 00:13:15,120
I told you that there is already no solution. 

224
00:13:15,130 --> 00:13:18,020
Now, I just want you to think a little bit.

225
00:13:18,840 --> 00:13:25,130
Here is an example about an instance, right?

226
00:13:25,600 --> 00:13:28,380
But can you think about, 

227
00:13:28,860 --> 00:13:32,540
and can you argue convincingly, 

228
00:13:33,260 --> 00:13:39,090
there is no protocol such that under these conditions, 

229
00:13:39,340 --> 00:13:43,000
the messages can be lost and can be arbitrary delayed. 

230
00:13:44,170 --> 00:13:48,010
The two generals can agree on the time to attack. 

231
00:13:50,220 --> 00:13:52,800
Why don't you take a few seconds, 

232
00:13:52,810 --> 00:13:59,100
maybe half a minute to think about this problem. 

233
00:14:00,370 --> 00:14:02,800
During this time, i'll get some

234
00:14:26,540 --> 00:14:26,930
other. 

235
00:14:35,090 --> 00:14:36,000
Any idea? 

236
00:14:48,080 --> 00:14:50,950
Yes, there is always a final message required.

237
00:14:50,960 --> 00:14:55,750
Allison said there is always a final message required to terminate the protocol. 

238
00:14:55,760 --> 00:14:59,480
And if that message is delayed or does not arrive the or cannot terminate, 

239
00:15:09,460 --> 00:15:10,820
this is pretty good answer. 

240
00:15:12,920 --> 00:15:15,230
Anyone wants to charming? 

241
00:15:24,940 --> 00:15:28,510
The more formal proof is the following. 

242
00:15:30,520 --> 00:15:33,480
Assume that the protocol, 

243
00:15:34,210 --> 00:15:35,370
a protocol exist, 

244
00:15:38,630 --> 00:15:42,590
and assume that the protocol has m messages. 

245
00:15:43,900 --> 00:15:44,340
Right? 

246
00:15:44,530 --> 00:15:47,360
Any protocol a has to terminate. 

247
00:15:48,730 --> 00:15:51,440
He has must have a finite number of messages. 

248
00:15:52,970 --> 00:15:54,740
Otherwise, if he never terminates,

249
00:15:54,980 --> 00:15:56,950
the general, by definition, will never agree.

250
00:15:59,800 --> 00:16:01,350
But now think about the last message. 

251
00:16:04,420 --> 00:16:07,920
I i'm sending the last message to you. 

252
00:16:08,420 --> 00:16:09,190
So you want to agree. 

253
00:16:09,200 --> 00:16:12,970
So I send the message, 

254
00:16:12,980 --> 00:16:14,130
but that's the last message. 

255
00:16:15,700 --> 00:16:21,810
I have no idea whether that message was received by you or it

256
00:16:21,820 --> 00:16:22,850
wasn't received by you. 

257
00:16:25,150 --> 00:16:26,750
So from my perspective, 

258
00:16:27,370 --> 00:16:29,250
that message it's useless, 

259
00:16:33,830 --> 00:16:36,820
and it shouldn't be needed for the agreement. 

260
00:16:40,540 --> 00:16:43,530
Then this means that the protocol doesn't have a messages. 

261
00:16:45,070 --> 00:16:47,540
Is the protocol is a-1 messages, 

262
00:16:47,970 --> 00:16:49,070
is going to be good enough. 

263
00:16:54,040 --> 00:16:57,970
But then if it's you go so that the protocol has a minus on messages, 

264
00:16:58,700 --> 00:16:59,040
right? 

265
00:16:59,520 --> 00:17:00,990
You cannot go recursive, 

266
00:17:01,000 --> 00:17:03,070
because now a-1, 

267
00:17:03,080 --> 00:17:05,590
the last message doesn't have any value for you. 

268
00:17:06,400 --> 00:17:08,100
It should be n minus the messages. 

269
00:17:13,650 --> 00:17:15,870
That's kind of the way to think about it. 

270
00:17:16,700 --> 00:17:18,420
But it's allison, 

271
00:17:20,420 --> 00:17:21,090
it's correct. 

272
00:17:21,100 --> 00:17:22,850
It's about thinking about the last message. 

273
00:17:23,920 --> 00:17:24,300
Right? 

274
00:17:25,900 --> 00:17:29,980
All is the last message for the person who is going to send it. 

275
00:17:29,990 --> 00:17:32,820
It's useless because they don't know whether it was received

276
00:17:32,830 --> 00:17:34,180
or not by the other party. 

277
00:17:37,310 --> 00:17:39,220
Now, this is a hard problem, right?

278
00:17:40,200 --> 00:17:41,540
It's really hard problem. 

279
00:17:45,050 --> 00:17:47,360
In real life, you can use other things.

280
00:17:48,050 --> 00:17:49,500
But how do we get out of it? 

281
00:17:50,260 --> 00:17:50,620
Right? 

282
00:17:55,540 --> 00:18:01,910
Because we still need different parties to agree to build any useful applications. 

283
00:18:02,240 --> 00:18:02,600
Right? 

284
00:18:05,420 --> 00:18:07,270
And this is where it comes. 

285
00:18:11,020 --> 00:18:12,370
The two face commit protocol, 

286
00:18:15,810 --> 00:18:20,470
because they cannot solve this general problem or general paradox. 

287
00:18:22,480 --> 00:18:23,840
We solve a related problem. 

288
00:18:24,850 --> 00:18:25,880
Before going here. 

289
00:18:25,890 --> 00:18:27,480
Any questions so far? 

290
00:18:28,280 --> 00:18:29,800
About the general paradox, 

291
00:18:29,810 --> 00:18:31,150
the general problem? 

292
00:18:41,920 --> 00:18:49,780
So the way to do so is that you to get around the problem

293
00:18:49,790 --> 00:18:56,240
is that now the challenges of the general paradox is that you still have

294
00:18:56,250 --> 00:18:57,280
the same problem, 

295
00:18:57,290 --> 00:19:05,430
oh you have more than one parties agree on something, 

296
00:19:07,420 --> 00:19:14,620
but you remove that is a time during which they must agree. 

297
00:19:16,480 --> 00:19:19,650
So you basically say there are no constraints on time. 

298
00:19:19,660 --> 00:19:21,730
They just eventually will happen, 

299
00:19:21,740 --> 00:19:23,020
eventually will agree. 

300
00:19:25,380 --> 00:19:25,770
Right? 

301
00:19:27,410 --> 00:19:29,160
That's kind of the big deal. 

302
00:19:29,770 --> 00:19:32,000
This is a two phase coming protocol. 

303
00:19:32,570 --> 00:19:34,930
It was developed by jim dray, 

304
00:19:34,940 --> 00:19:37,490
who has huge influences. 

305
00:19:37,500 --> 00:19:39,170
He was the first berkeley, 

306
00:19:40,300 --> 00:19:41,700
phd student computer science, 

307
00:19:41,710 --> 00:19:43,380
phd in 69, 

308
00:19:44,160 --> 00:19:50,850
and has a huge impact on databases. 

309
00:19:51,740 --> 00:19:56,400
And many important database breakthrough are going back to gym. 

310
00:19:56,950 --> 00:20:01,260
Unfortunately, he disappeared several years back while sailing.

311
00:20:05,410 --> 00:20:06,540
So what is that to face coming? 

312
00:20:06,550 --> 00:20:08,180
Protocol is very simple. 

313
00:20:09,300 --> 00:20:11,500
First of all, you do have a persistent storage,

314
00:20:12,270 --> 00:20:13,760
so you can save the state. 

315
00:20:15,600 --> 00:20:18,080
And then you have two phases, 

316
00:20:18,810 --> 00:20:20,830
prepare face and commit face. 

317
00:20:24,020 --> 00:20:26,780
Also, not all members are equal.

318
00:20:26,790 --> 00:20:28,380
You have a coordinator, 

319
00:20:29,060 --> 00:20:30,650
You have a bunch of workers. 

320
00:20:31,510 --> 00:20:33,660
And the coordinator executes a protocol. 

321
00:20:34,470 --> 00:20:36,670
It basically sends to every worker, 

322
00:20:38,230 --> 00:20:46,160
a message basically asking to agree with something or not, 

323
00:20:46,170 --> 00:20:49,110
or whether it or not agree. 

324
00:20:50,420 --> 00:20:55,530
If every worker response that is, 

325
00:20:55,540 --> 00:20:56,590
they agreed, 

326
00:20:57,290 --> 00:21:04,050
you are the coordinator is going to tell to tell in the commit phase, 

327
00:21:04,060 --> 00:21:05,700
all the workers to commit. 

328
00:21:07,780 --> 00:21:12,010
If at least one worker says abort, 

329
00:21:12,780 --> 00:21:15,510
then all the workers will abort. 

330
00:21:16,130 --> 00:21:20,440
And that entire operation is about it. 

331
00:21:22,620 --> 00:21:24,690
Again, to take a step back here,

332
00:21:25,080 --> 00:21:30,650
we want here that another way to think about it's all workers. 

333
00:21:30,940 --> 00:21:33,750
They must execute an operation. 

334
00:21:34,990 --> 00:21:37,070
These are all of them, the executive operation,

335
00:21:37,360 --> 00:21:39,240
for none of them execute the operation. 

336
00:21:40,750 --> 00:21:43,670
In the case of databases that operation is a transaction. 

337
00:21:45,770 --> 00:21:47,340
So either all of them, 

338
00:21:47,650 --> 00:21:50,930
do you know exactly transaction or none of them? 

339
00:21:52,920 --> 00:21:53,430
Okay. 

340
00:21:53,990 --> 00:21:56,880
If all of them are ready at a big degree, 

341
00:21:56,890 --> 00:22:00,220
the transaction say we are ready, 

342
00:22:00,230 --> 00:22:03,990
we then coordinators they sent, 

343
00:22:04,390 --> 00:22:05,500
that to coordinators, 

344
00:22:05,510 --> 00:22:07,300
a coordinator will send back on it, 

345
00:22:07,310 --> 00:22:11,450
so everyone will commit the transaction. 

346
00:22:12,930 --> 00:22:14,000
Otherwise, 

347
00:22:15,120 --> 00:22:18,600
the coordinator will send aboard and everyone will abort the transaction. 

348
00:22:21,670 --> 00:22:22,190
Make sense? 

349
00:22:25,460 --> 00:22:26,600
And like you still, now,

350
00:22:26,610 --> 00:22:31,640
you'll see the locks will be fundamental to guarantee that this protocol

351
00:22:31,650 --> 00:22:32,840
is going to a correctly, 

352
00:22:32,850 --> 00:22:38,190
which means that either all workers commit or abort the transaction. 

353
00:22:45,010 --> 00:22:47,320
Again, you have one coordinator, in summary,

354
00:22:47,330 --> 00:22:48,880
you have n workers. 

355
00:22:49,500 --> 00:22:51,300
The high level algorithms is the following. 

356
00:22:51,310 --> 00:22:53,460
The coordinator ask all workers, 

357
00:22:53,470 --> 00:22:54,500
if they can commit, 

358
00:22:55,180 --> 00:22:57,200
if all workers reply, 

359
00:22:57,790 --> 00:22:59,150
yes, we can commit,

360
00:22:59,540 --> 00:23:03,030
then the coordinator broadcast to everyone commit. 

361
00:23:04,010 --> 00:23:07,080
Otherwise, a coordinator broadcast abort,

362
00:23:08,020 --> 00:23:10,390
because there is at least one worker you cannot commit. 

363
00:23:11,340 --> 00:23:15,540
And the worker just obey these global messages where there is committee

364
00:23:15,550 --> 00:23:16,180
and abort. 

365
00:23:17,930 --> 00:23:18,500
That's it. 

366
00:23:19,040 --> 00:23:23,060
We use persistent log in order to make sure that the protocol

367
00:23:23,070 --> 00:23:26,090
or correctly when machines fail. 

368
00:23:27,380 --> 00:23:32,470
Now, here we assume that the machine fails is going to eventually come up,

369
00:23:32,940 --> 00:23:35,000
look at the log and continue the protocol. 

370
00:23:40,150 --> 00:23:40,560
But again, 

371
00:23:40,570 --> 00:23:48,270
we don't put any bound in terms of the time that this protocol it takes to finish. 

372
00:23:54,970 --> 00:23:55,330
It's again, 

373
00:23:55,340 --> 00:24:01,920
there are only two possible votes a worker can make and can do commit and abort. 

374
00:24:03,670 --> 00:24:04,780
Committees are not. 

375
00:24:05,190 --> 00:24:07,500
It only happens if anonymously. 

376
00:24:07,510 --> 00:24:08,780
Everyone says for me, 

377
00:24:21,110 --> 00:24:23,310
in the preparing phase, you remember,

378
00:24:23,320 --> 00:24:31,020
the preparing phase is a phase in which you the coordinator ask every worker, 

379
00:24:31,030 --> 00:24:33,100
whether they can commit or they need, 

380
00:24:33,110 --> 00:24:35,110
or they are going to, they can commit.

381
00:24:38,640 --> 00:24:42,910
If a worker says that it can commit, 

382
00:24:43,310 --> 00:24:44,690
then it means it makes, 

383
00:24:44,700 --> 00:24:46,370
it means it needs. 

384
00:24:46,750 --> 00:24:51,140
It can do that only if it's sure they can accept the transaction. 

385
00:24:52,610 --> 00:24:55,010
And this assurance, 

386
00:24:56,130 --> 00:24:59,430
this vote is must be recorded in the stable lock. 

387
00:25:03,160 --> 00:25:06,490
If the worker votes abroad, 

388
00:25:07,630 --> 00:25:10,880
it must guarantee that will never accept the transaction. 

389
00:25:12,680 --> 00:25:19,470
This also is going to be a recorded in the lock and finishing. 

390
00:25:20,590 --> 00:25:24,030
It's all the machines have agreed to commit. 

391
00:25:24,520 --> 00:25:26,870
Then if all the machines have agreed to commit, 

392
00:25:28,570 --> 00:25:33,320
you record the decisions the committee in the local log. 

393
00:25:33,330 --> 00:25:35,850
And this is for the coordinator, 

394
00:25:35,860 --> 00:25:38,570
and then the coordinator inform everybody to commit. 

395
00:25:39,400 --> 00:25:40,350
Otherwise, 

396
00:25:41,820 --> 00:25:44,400
the coordinator logs, 

397
00:25:45,160 --> 00:25:50,010
the decision to abort and send that is abort to every work. 

398
00:25:53,700 --> 00:25:56,940
The machine remembered the workers from the previous life. 

399
00:25:56,950 --> 00:25:59,060
They cannot take back its decision. 

400
00:25:59,970 --> 00:26:00,350
Right? 

401
00:26:00,870 --> 00:26:04,160
So we are guaranteed that exactly one of this will happen. 

402
00:26:05,140 --> 00:26:11,030
So basically, if if a worker says I can commit this transaction,

403
00:26:11,040 --> 00:26:14,890
you cannot later say I cannot accept the transaction. 

404
00:26:16,930 --> 00:26:20,440
The other way, if the worker says I bought this transaction,

405
00:26:20,450 --> 00:26:21,840
he cannot later say, 

406
00:26:22,220 --> 00:26:24,460
I changed my mind, I am committing this feather.

407
00:26:27,880 --> 00:26:30,420
Here is another way to look at the algorithms. 

408
00:26:31,650 --> 00:26:33,450
You have coordinator on the left, 

409
00:26:33,460 --> 00:26:34,610
work on the light. 

410
00:26:35,530 --> 00:26:38,710
The coordinator sends fold request to all the workers. 

411
00:26:40,240 --> 00:26:44,840
The workers are waiting for this vote request message. 

412
00:26:45,940 --> 00:26:47,100
If they are ready, 

413
00:26:47,670 --> 00:26:50,190
they are going to send to vote, commit to coordinator.

414
00:26:50,200 --> 00:26:52,150
So this means that they can commit. 

415
00:26:52,670 --> 00:26:57,930
Otherwise, they send both aboard and are going to abort.

416
00:27:01,040 --> 00:27:04,120
The coordinator collects all the boats. 

417
00:27:04,940 --> 00:27:06,640
If all the votes are commit, 

418
00:27:07,180 --> 00:27:08,880
they send it sends a global commit. 

419
00:27:09,920 --> 00:27:12,700
If at least a vote is aboard, 

420
00:27:14,090 --> 00:27:20,180
then the coordinator sends a board to every other worker. 

421
00:27:22,020 --> 00:27:22,500
Okay? 

422
00:27:25,650 --> 00:27:28,320
If the worker then become, 

423
00:27:28,330 --> 00:27:30,240
receives global commits and commits. 

424
00:27:30,250 --> 00:27:31,400
Otherwise, therefore,

425
00:27:32,600 --> 00:27:33,670
any questions here? 

426
00:27:34,860 --> 00:27:36,100
Pretty simple, probable, right?

427
00:27:47,280 --> 00:27:47,800
Okay. 

428
00:27:49,680 --> 00:27:53,550
Now, although despite the fact that this protocol is simple,

429
00:27:54,240 --> 00:27:57,740
it's two questions. 

430
00:28:01,640 --> 00:28:04,120
Alice on question is that so it's okay. 

431
00:28:04,130 --> 00:28:05,640
If the algorithm thanks forever. 

432
00:28:07,640 --> 00:28:08,730
In theory, 

433
00:28:09,150 --> 00:28:10,550
theoretically, it can hang,

434
00:28:10,560 --> 00:28:11,670
it can take forever. 

435
00:28:12,380 --> 00:28:15,730
I'll show you how later. 

436
00:28:18,410 --> 00:28:19,880
Actually, let me give you an example,

437
00:28:19,890 --> 00:28:26,780
one example in which you can hang forever is that a machine fails

438
00:28:27,650 --> 00:28:32,790
before getting the global commit. 

439
00:28:32,800 --> 00:28:34,790
It says commit everything, 

440
00:28:35,090 --> 00:28:36,690
everyone for votes for commit. 

441
00:28:37,310 --> 00:28:39,910
The coordinator is going to send everyone for me, 

442
00:28:39,920 --> 00:28:43,630
but that machine or the coordinator, 

443
00:28:44,000 --> 00:28:45,020
the coordinator gets, 

444
00:28:45,460 --> 00:28:47,170
let's do this example. 

445
00:28:47,970 --> 00:28:50,120
The coordinator collects all the votes, 

446
00:28:52,420 --> 00:28:56,100
but before and write the result of the vote. 

447
00:28:58,070 --> 00:29:05,770
But before going replying global with a global message or sending

448
00:29:05,780 --> 00:29:07,530
a global message to every worker, 

449
00:29:07,930 --> 00:29:08,630
it fails. 

450
00:29:11,100 --> 00:29:12,090
Now we come back. 

451
00:29:12,600 --> 00:29:19,450
We're looking at the global storage in the log that it has as a result

452
00:29:19,460 --> 00:29:20,650
of the vote says from it. 

453
00:29:21,600 --> 00:29:22,680
But before again, 

454
00:29:23,340 --> 00:29:26,970
ken a has a chance to send a global commit fails again. 

455
00:29:28,160 --> 00:29:30,100
This can come and can happen indefinitely, 

456
00:29:31,090 --> 00:29:31,240
right? 

457
00:29:31,250 --> 00:29:32,200
For the coordinator. 

458
00:29:33,180 --> 00:29:34,940
Come up, see the results of the vote,

459
00:29:35,520 --> 00:29:40,770
but before has a chance to broadcast the global message to everyone. 

460
00:29:41,090 --> 00:29:41,600
Once again. 

461
00:29:43,090 --> 00:29:43,470
Now, 

462
00:29:44,180 --> 00:29:45,580
this is unlikely to happen. 

463
00:29:46,380 --> 00:29:47,450
So in life, 

464
00:29:47,460 --> 00:29:49,250
everything is probabilistic, right?

465
00:29:49,740 --> 00:29:53,910
So the probability for this to happen every time, it's extremely low,

466
00:29:53,920 --> 00:29:58,460
unless there is some persistent bug, 

467
00:29:59,850 --> 00:30:00,530
in the program. 

468
00:30:06,160 --> 00:30:09,440
Since messages are unreliable, does the work?

469
00:30:09,450 --> 00:30:13,460
Is the next question from michael? 

470
00:30:13,900 --> 00:30:15,100
Since messages are unreliable, 

471
00:30:15,110 --> 00:30:19,910
does a worker keep sending his vote until it gets a global decision? 

472
00:30:25,320 --> 00:30:28,230
Yes, the workers can do that.

473
00:30:28,240 --> 00:30:33,840
But if the messages are unreliable, 

474
00:30:33,850 --> 00:30:35,120
the coordinator like, 

475
00:30:35,290 --> 00:30:36,360
we'll see next. 

476
00:30:38,130 --> 00:30:45,090
If he, if the coordinator didn't hear from the worker for some time,

477
00:30:45,550 --> 00:30:46,290
the time out, 

478
00:30:47,160 --> 00:30:54,350
then it can declare that worker or is not able to accept the

479
00:30:54,360 --> 00:31:00,450
transaction and is going to log the result of the boat as being aboard. 

480
00:31:01,180 --> 00:31:02,760
And as everyone else to aboard, 

481
00:31:04,750 --> 00:31:06,350
that protocol is still caught. 

482
00:31:12,470 --> 00:31:15,580
What about when the worker doesn't hear from the coordinator? 

483
00:31:19,640 --> 00:31:23,280
So in that particular case, 

484
00:31:23,290 --> 00:31:29,480
it you eat the workers has to wait for the protocol to be correct, 

485
00:31:31,520 --> 00:31:33,450
because the worker doesn't know as that, 

486
00:31:33,460 --> 00:31:35,090
especially for a worker. 

487
00:31:35,100 --> 00:31:40,060
I hear you are talking about a worker who can who said that it can commit it. 

488
00:31:42,690 --> 00:31:48,970
We cannot finish the protocol until it gets a message from the coordinator, 

489
00:31:48,980 --> 00:31:51,930
because it doesn't know what to do. 

490
00:31:52,510 --> 00:31:54,660
It doesn't know whether the vote is committed above. 

491
00:31:59,250 --> 00:32:00,320
So in this case, 

492
00:32:00,330 --> 00:32:06,470
you have to ask to retransmit the court guaranteed for to retransmit

493
00:32:06,480 --> 00:32:08,860
the global commit or global. 

494
00:32:12,930 --> 00:32:14,080
But it's, again,

495
00:32:14,570 --> 00:32:17,210
the probability is to happen is very low. 

496
00:32:21,910 --> 00:32:23,180
In practice, is working.

497
00:32:23,190 --> 00:32:24,140
It's a very good protocol. 

498
00:32:29,070 --> 00:32:31,140
It will go through a little bit of these questions. 

499
00:32:31,150 --> 00:32:34,710
Next is here is a failure for examples. 

500
00:32:34,720 --> 00:32:37,110
This is a timeline on the horizontal axis. 

501
00:32:37,120 --> 00:32:39,110
You have one coordinator, three workers,

502
00:32:39,430 --> 00:32:41,450
the coordinators and vote requests, 

503
00:32:41,840 --> 00:32:44,720
then say every workers and vote commit, 

504
00:32:45,080 --> 00:32:47,560
and then the coordinator sends global commit. 

505
00:32:48,210 --> 00:32:49,150
Very simple. 

506
00:32:49,490 --> 00:32:51,170
Now failures easy. 

507
00:32:52,890 --> 00:32:54,850
Remember, you are discussing these protocols,

508
00:32:54,860 --> 00:32:56,050
you have a state machines. 

509
00:32:56,970 --> 00:32:58,790
This is a coordinator state machines. 

510
00:32:59,390 --> 00:33:00,740
You are in any state. 

511
00:33:02,750 --> 00:33:03,520
When you receive start, 

512
00:33:03,530 --> 00:33:06,560
the next thing we are going to do a coordinator what it is. 

513
00:33:06,810 --> 00:33:09,640
You send the vote request when you send the vote request, 

514
00:33:10,000 --> 00:33:14,220
you go to a different state because you need to wait for the votes

515
00:33:14,230 --> 00:33:15,060
from the workers. 

516
00:33:16,640 --> 00:33:17,190
Okay? 

517
00:33:17,870 --> 00:33:20,630
So you receive all about commits or right. 

518
00:33:20,930 --> 00:33:22,740
And if you receive all about commits, 

519
00:33:22,990 --> 00:33:25,710
now you go and you are going to go into different. 

520
00:33:25,720 --> 00:33:26,910
You are going to record. 

521
00:33:27,250 --> 00:33:29,680
Now, this is the result of about this commit.

522
00:33:30,410 --> 00:33:35,250
You send the global commitment now you go to the commit is a committee state. 

523
00:33:38,470 --> 00:33:38,500
Right? 

524
00:33:38,510 --> 00:33:39,820
Otherwise, 

525
00:33:40,760 --> 00:33:47,840
you allow the results of the boat as being abort and go send a global abort

526
00:33:47,850 --> 00:33:49,160
and go into the abort state. 

527
00:33:51,370 --> 00:33:52,890
While you are in the state, 

528
00:33:52,900 --> 00:33:56,180
if the worker blows a message, 

529
00:33:56,810 --> 00:33:58,260
like we discussed earlier, 

530
00:33:58,850 --> 00:34:05,930
and wants to get sends a a request for

531
00:34:07,040 --> 00:34:09,550
for the coordinator to resend the decision. 

532
00:34:10,340 --> 00:34:12,480
The coordinator knows exactly what to send, 

533
00:34:12,490 --> 00:34:15,070
because based on where it was, they did this.

534
00:34:15,080 --> 00:34:16,070
It's committed about. 

535
00:34:18,900 --> 00:34:20,270
The workers is similar. 

536
00:34:21,380 --> 00:34:23,190
They diagram, they machine.

537
00:34:23,950 --> 00:34:26,470
It's again, it says in it, I am in it.

538
00:34:27,430 --> 00:34:30,240
And i'm starting and they need, 

539
00:34:32,270 --> 00:34:34,510
I am waiting for receiving the vote request. 

540
00:34:36,070 --> 00:34:37,810
And from here from the vote request, 

541
00:34:37,820 --> 00:34:39,010
I can do two things. 

542
00:34:39,520 --> 00:34:43,350
I can say I want to abort case in which i'm going

543
00:34:43,360 --> 00:34:47,940
directly into the abort state and i'm sending both abort, 

544
00:34:49,090 --> 00:34:51,210
or i'm going to go to commit. 

545
00:34:53,440 --> 00:34:56,000
And then i'm going to vote to commit. 

546
00:34:56,920 --> 00:35:01,100
Then i'm going to go to the door in a ready state. 

547
00:35:01,110 --> 00:35:02,140
I'm ready to commit. 

548
00:35:02,150 --> 00:35:04,920
And here i'm going to wait for what? 

549
00:35:05,590 --> 00:35:08,020
To receive either global abort or global commit. 

550
00:35:08,030 --> 00:35:09,700
I'm going to receive global abort. 

551
00:35:09,710 --> 00:35:11,340
I'm going to go to a birthday. 

552
00:35:11,690 --> 00:35:13,100
I'm going to receive a global committee. 

553
00:35:13,110 --> 00:35:15,020
I'm going to go to the committee state. 

554
00:35:21,740 --> 00:35:24,290
Let's see dealing first to his oracle failures. 

555
00:35:25,080 --> 00:35:26,820
When I can be affected, 

556
00:35:26,830 --> 00:35:28,570
if I am the coordinator, 

557
00:35:29,400 --> 00:35:32,170
when can I be affected about a failure? 

558
00:35:34,750 --> 00:35:38,160
It's really only when I am waiting for something with a waste it. 

559
00:35:38,810 --> 00:35:39,780
Because for in need, 

560
00:35:39,790 --> 00:35:45,470
i'm just sending about request and for commit and abort. 

561
00:35:46,480 --> 00:35:51,070
I just sent transition to the transition to go to these states. 

562
00:35:51,300 --> 00:35:52,740
It's by sending a message. 

563
00:35:53,540 --> 00:35:55,870
So here I when as a coordinator, 

564
00:35:55,880 --> 00:35:58,590
i'm going to be impacted when i'm in the way state. 

565
00:36:03,150 --> 00:36:05,980
In a way, if it doesn't receive any votes,

566
00:36:06,630 --> 00:36:07,670
like I mentioned, 

567
00:36:07,680 --> 00:36:11,230
you can time out the coordinator of time out and send global awards. 

568
00:36:11,240 --> 00:36:12,670
This will work perfectly fine. 

569
00:36:13,300 --> 00:36:14,080
It'll be correct. 

570
00:36:18,250 --> 00:36:19,920
Here is what the examples, 

571
00:36:20,450 --> 00:36:22,350
coordinators and vote requests. 

572
00:36:23,440 --> 00:36:28,970
But somehow worker three didn't send welcoming to where it the message was lost. 

573
00:36:33,250 --> 00:36:38,600
So coordinator waits for some time to get the commit, 

574
00:36:39,180 --> 00:36:40,770
the vote from workers three. 

575
00:36:41,800 --> 00:36:43,080
But if it doesn't get it, 

576
00:36:43,750 --> 00:36:45,220
when the timeout expires, 

577
00:36:45,710 --> 00:36:50,410
it sends global award to all workers. 

578
00:36:52,330 --> 00:36:53,210
And that's ended. 

579
00:36:55,390 --> 00:36:57,530
Now let's look at the coordinator failure, 

580
00:36:57,540 --> 00:37:00,920
the coordinator failures. 

581
00:37:01,980 --> 00:37:05,420
When you can be impacted as a worker. 

582
00:37:06,330 --> 00:37:06,660
It's again, 

583
00:37:06,670 --> 00:37:11,370
you are impacted by the failures when you are waiting for something

584
00:37:11,730 --> 00:37:13,810
from the party which can fail, 

585
00:37:14,630 --> 00:37:18,940
you are waiting as a worker from coordinators for two messages, 

586
00:37:19,380 --> 00:37:20,400
vote request. 

587
00:37:20,410 --> 00:37:24,620
This is in any state and global commuter global abort. 

588
00:37:25,180 --> 00:37:26,730
So here where you can be affected. 

589
00:37:27,690 --> 00:37:28,960
So here you need to look at. 

590
00:37:29,740 --> 00:37:30,150
Right? 

591
00:37:32,520 --> 00:37:33,110
Now, 

592
00:37:33,120 --> 00:37:37,850
this is the answer I gave to the question of what happens on coordinator fail, 

593
00:37:38,250 --> 00:37:38,710
fails. 

594
00:37:39,480 --> 00:37:40,800
So if coordinator fails, 

595
00:37:40,810 --> 00:37:45,200
worker must block waiting for the coordinator to recover and sends

596
00:37:45,210 --> 00:37:46,990
a global message. 

597
00:37:48,490 --> 00:37:48,810
Right? 

598
00:37:49,570 --> 00:37:50,850
Like we discussed before, 

599
00:37:51,770 --> 00:37:53,990
the worker has no choice, 

600
00:37:54,380 --> 00:37:56,560
but to wait for coordinator. 

601
00:37:58,910 --> 00:38:02,510
Anyway, let's see the as a failure happening in it,

602
00:38:03,050 --> 00:38:07,630
the coordinators somehow doesn't send about requests, 

603
00:38:08,120 --> 00:38:11,370
because it fails before the vote request is sent out. 

604
00:38:11,960 --> 00:38:13,670
The workers will time out. 

605
00:38:14,190 --> 00:38:15,890
They can now send both of us. 

606
00:38:16,270 --> 00:38:17,890
They can time out and send both of us. 

607
00:38:19,250 --> 00:38:25,660
Now you are in the ready in the registered worker ways for the global messages, 

608
00:38:29,120 --> 00:38:30,110
vote request. 

609
00:38:30,950 --> 00:38:34,780
And somehow you have all required for commit, 

610
00:38:34,790 --> 00:38:37,790
but now the coordinator failed. 

611
00:38:39,910 --> 00:38:41,820
Now, the worker, in this case,

612
00:38:41,830 --> 00:38:48,100
have to wait for the coordinator to restart and to send the global abort of, 

613
00:38:48,510 --> 00:38:49,480
in this case. 

614
00:38:49,900 --> 00:38:52,420
And in this example, 

615
00:38:52,820 --> 00:38:54,850
and only and then they can finish. 

616
00:39:04,290 --> 00:39:04,880
But it's again, 

617
00:39:04,890 --> 00:39:10,290
the reason for the worker that while the worker needs to wait for the coordinator, 

618
00:39:10,680 --> 00:39:10,920
again, 

619
00:39:10,930 --> 00:39:14,670
it's very simple because if the worker decided to say that I can commit it, 

620
00:39:18,280 --> 00:39:19,640
doesn't know what to do, 

621
00:39:20,360 --> 00:39:22,420
because the boss choices are valid. 

622
00:39:24,100 --> 00:39:26,810
Geezer has to abort or he has to commit. 

623
00:39:27,330 --> 00:39:30,670
He must know exactly what has to be done has to do. 

624
00:39:31,200 --> 00:39:34,020
Because he has to be consistent. 

625
00:39:34,030 --> 00:39:37,420
The season has to be the same decision as all the other workers. 

626
00:39:44,350 --> 00:39:48,340
Obviously, you need to keep the lock in a stable storage.

627
00:39:48,660 --> 00:39:54,720
You need to provide your ability and the coordinator or saying, say,

628
00:39:54,730 --> 00:39:56,120
is going to restart, 

629
00:39:56,390 --> 00:40:02,670
is going to find the the accurate state in the stable story. 

630
00:40:05,660 --> 00:40:07,920
That's basically what it is. 

631
00:40:08,870 --> 00:40:10,420
And open recovery, 

632
00:40:10,430 --> 00:40:11,940
you have this set of rules. 

633
00:40:12,230 --> 00:40:15,300
The coordinators, if they cover supports, if it's in,

634
00:40:15,310 --> 00:40:17,380
the you need weight or abort state. 

635
00:40:18,010 --> 00:40:19,050
The coordinator committee, 

636
00:40:19,060 --> 00:40:20,800
this is a committee state. 

637
00:40:21,260 --> 00:40:21,560
Right? 

638
00:40:21,570 --> 00:40:24,500
So they are right as a worker aborts. 

639
00:40:24,940 --> 00:40:29,010
If it's any need and a border state and committee in the committee state, 

640
00:40:30,480 --> 00:40:33,370
If it's a coordinator is a worker, it's in ready.

641
00:40:33,380 --> 00:40:37,910
So it's asking for which is exactly the question we had before. 

642
00:40:38,190 --> 00:40:40,590
If the coworker is in the ready state, 

643
00:40:41,390 --> 00:40:45,210
when it fails and it comes back and see how you it was in the ready state, 

644
00:40:45,510 --> 00:40:48,190
it has the way it has to ask again, 

645
00:40:48,410 --> 00:40:50,960
the coordinator whether to commit or trouble. 

646
00:40:54,150 --> 00:40:55,010
Any questions? 

647
00:41:09,680 --> 00:41:10,270
Miles, 

648
00:41:11,740 --> 00:41:13,490
ask the following question. 

649
00:41:14,360 --> 00:41:19,470
If only one global commit message from the coordinator to worker fails

650
00:41:20,110 --> 00:41:21,140
will be in trouble. 

651
00:41:23,200 --> 00:41:25,720
Yeah, so let's see what happens.

652
00:41:25,730 --> 00:41:31,500
So assume that the water cutter, 

653
00:41:31,800 --> 00:41:33,710
so it's the coordinator said again, 

654
00:41:33,920 --> 00:41:36,510
in the previous example is that we had three workers. 

655
00:41:37,250 --> 00:41:39,800
So assume that two messages get through, 

656
00:41:39,810 --> 00:41:41,640
but one global message, 

657
00:41:41,650 --> 00:41:43,440
global community message doesn't get through. 

658
00:41:45,960 --> 00:41:47,440
They said the worker didn't get it. 

659
00:41:48,070 --> 00:41:49,300
What will happen in that case? 

660
00:41:53,530 --> 00:41:54,850
Why do you think it should happen? 

661
00:41:55,770 --> 00:41:57,730
If you design the protocol, implement the protocol?

662
00:41:57,740 --> 00:41:58,850
What do you do? 

663
00:42:00,530 --> 00:42:01,570
What do you think we should do? 

664
00:42:06,170 --> 00:42:08,170
Sell the car blocks for how long

665
00:42:19,910 --> 00:42:22,880
a certain amount of time and that amount of time expires what you

666
00:42:22,890 --> 00:42:23,880
are going to do

667
00:42:30,890 --> 00:42:32,020
if you have to implement it. 

668
00:42:39,670 --> 00:42:41,170
So what is the natural thing to do? 

669
00:42:41,570 --> 00:42:43,570
Maybe it wasn't in the previous diagrams, 

670
00:42:43,580 --> 00:42:45,050
but that is the natural things to do. 

671
00:42:47,720 --> 00:42:52,520
I don't know how the coordinator decided what i'm going to do. 

672
00:42:58,710 --> 00:42:59,830
Don't do anything. 

673
00:42:59,840 --> 00:43:00,790
You are block that. 

674
00:43:02,430 --> 00:43:03,600
But what else can you do? 

675
00:43:03,980 --> 00:43:04,240
That? 

676
00:43:04,250 --> 00:43:05,480
Certainly you can do that. 

677
00:43:05,750 --> 00:43:09,960
No, don't, I think a a it's a valid option.

678
00:43:15,590 --> 00:43:18,570
Another thing you can do is ask against a coordinator what? 

679
00:43:18,840 --> 00:43:19,460
That's good. 

680
00:43:19,470 --> 00:43:19,870
Actually, 

681
00:43:20,520 --> 00:43:22,880
you can ask, again, the coordinator, what you decide.

682
00:43:23,220 --> 00:43:23,770
That's correct. 

683
00:43:24,580 --> 00:43:28,090
That's what you'll do if you implement this product. 

684
00:43:32,740 --> 00:43:38,630
So let's go for have this short discussion. 

685
00:43:40,710 --> 00:43:44,200
So why do you need dcbc decision making? 

686
00:43:45,330 --> 00:43:52,710
Well, you need it because you aren't in four different programs,

687
00:43:52,720 --> 00:43:56,910
you want different parts of the program which run on different machines to agree. 

688
00:43:57,570 --> 00:44:02,390
A a very simple example is that you want to replicate the state

689
00:44:02,930 --> 00:44:05,770
for your ability on different machines. 

690
00:44:06,200 --> 00:44:06,690
Right? 

691
00:44:06,910 --> 00:44:08,460
So you need, for instance,

692
00:44:08,470 --> 00:44:12,200
to the that's one example. 

693
00:44:23,240 --> 00:44:23,910
By the way, 

694
00:44:23,920 --> 00:44:27,510
a group of machines can come to a decision if any one or more of them fail

695
00:44:27,520 --> 00:44:28,470
during the process. 

696
00:44:28,480 --> 00:44:28,750
Right? 

697
00:44:28,760 --> 00:44:29,910
In that particular case, 

698
00:44:30,400 --> 00:44:31,990
if some process fails, 

699
00:44:32,360 --> 00:44:35,080
the other can still come to a decision. 

700
00:44:35,910 --> 00:44:36,160
Right? 

701
00:44:37,170 --> 00:44:39,420
Because they are okay to record, say,

702
00:44:40,050 --> 00:44:41,280
to commit the transaction. 

703
00:44:41,290 --> 00:44:47,860
So if the third worker fails to can still commit to commit the transaction. 

704
00:44:49,220 --> 00:44:51,130
And maybe the other one, the third worker,

705
00:44:51,140 --> 00:44:52,170
and when it fails, 

706
00:44:52,180 --> 00:44:53,250
it comes back. 

707
00:44:53,510 --> 00:44:55,020
And as a coordinator, 

708
00:44:55,410 --> 00:44:56,880
and accordingly safe to commit, 

709
00:44:56,890 --> 00:44:59,080
and it's going eventually also to commit the transaction. 

710
00:45:02,300 --> 00:45:05,970
We said we discussed that just to emphasize why do pc is working

711
00:45:05,980 --> 00:45:09,810
in generals paradox doesn't is because to

712
00:45:09,820 --> 00:45:17,310
bc relaxes the problem in that it

713
00:45:17,320 --> 00:45:23,270
doesn't require the notes to agree by a certain time. 

714
00:45:24,800 --> 00:45:26,800
They only say that eventually, 

715
00:45:27,560 --> 00:45:28,420
there will be agreement. 

716
00:45:30,160 --> 00:45:35,710
And it also allows us that's why to reboot and continue

717
00:45:40,140 --> 00:45:41,100
announcements. 

718
00:45:41,410 --> 00:45:44,360
Homework five is due on monday. 

719
00:45:45,100 --> 00:45:50,830
Midterm three grades will close on sunday by the end of the day. 

720
00:45:53,400 --> 00:45:56,940
Any more questions about consensus, 

721
00:45:56,950 --> 00:46:04,140
general paradox and the two bc protocol? 

722
00:46:10,550 --> 00:46:13,060
If not, we are really going to switch gears.

723
00:46:13,070 --> 00:46:13,380
Now. 

724
00:46:14,370 --> 00:46:18,600
We are going to talk about networking is obviously a fundamental part

725
00:46:18,610 --> 00:46:20,200
of the operating system, 

726
00:46:20,450 --> 00:46:23,300
especially today where everything is connected, 

727
00:46:24,610 --> 00:46:26,420
like we discussed so many times. 

728
00:46:28,880 --> 00:46:32,650
So here are the main concepts need to keep in mind. 

729
00:46:34,660 --> 00:46:36,580
First is a network interfaces. 

730
00:46:37,010 --> 00:46:38,400
Each of your machines, 

731
00:46:38,410 --> 00:46:40,200
the machines you are watching now, 

732
00:46:41,760 --> 00:46:43,640
as a network cards, 

733
00:46:43,650 --> 00:46:45,020
i'm a network or another cheap. 

734
00:46:46,360 --> 00:46:46,730
Right? 

735
00:46:47,860 --> 00:46:51,030
And that's a cheap which communicates the outside world, 

736
00:46:51,700 --> 00:46:53,370
sending physical signals, 

737
00:46:54,810 --> 00:46:56,030
radio signals, 

738
00:46:56,570 --> 00:46:57,250
and so forth, 

739
00:46:58,370 --> 00:46:59,710
or signals through the wire. 

740
00:47:01,530 --> 00:47:02,010
Okay? 

741
00:47:04,200 --> 00:47:05,440
These are the network cards. 

742
00:47:07,150 --> 00:47:09,840
One computer can have multiple network cards, 

743
00:47:11,450 --> 00:47:14,110
because a computer can communicate multiple ways. 

744
00:47:16,950 --> 00:47:20,360
Can you give examples about a few ways the computer can communicate? 

745
00:47:26,790 --> 00:47:29,350
How can you have a computer communicate with some other computer? 

746
00:47:41,620 --> 00:47:43,580
Lan, wireless, optical, copper.

747
00:47:44,190 --> 00:47:44,900
This is good. 

748
00:47:46,240 --> 00:47:46,480
Right? 

749
00:47:46,490 --> 00:47:48,040
Wireless wifi, right?

750
00:47:48,520 --> 00:47:49,380
Sounds good. 

751
00:47:49,390 --> 00:47:50,380
That's a good one. 

752
00:47:51,260 --> 00:47:52,620
Bluetooth is another one, 

753
00:47:52,630 --> 00:47:55,080
bluetooth wifi and so forth, right?

754
00:47:56,830 --> 00:47:57,500
Ethernet. 

755
00:47:58,090 --> 00:47:58,680
You may have heard. 

756
00:47:59,910 --> 00:48:01,140
So therefore it again, 

757
00:48:02,570 --> 00:48:04,290
one machine can have multiple cards. 

758
00:48:04,710 --> 00:48:08,220
Remember that there's no talk. 

759
00:48:14,060 --> 00:48:14,600
Okay? 

760
00:48:16,960 --> 00:48:20,080
Typically, it's not a card is associated to addresses.

761
00:48:24,470 --> 00:48:25,270
One, 

762
00:48:26,040 --> 00:48:28,310
it's a media access control, 

763
00:48:28,690 --> 00:48:31,040
address or mac address. 

764
00:48:31,050 --> 00:48:33,680
This is a physical address. 

765
00:48:34,860 --> 00:48:40,710
And this is burned into the cart by

766
00:48:43,630 --> 00:48:47,190
the company which produces these cards when a card was produced. 

767
00:48:48,170 --> 00:48:49,880
It comes with among others. 

768
00:48:51,470 --> 00:48:53,150
Like we'll see it's 48 beats. 

769
00:48:54,360 --> 00:48:56,250
And then there is an ip address, 

770
00:48:57,500 --> 00:48:59,170
the internet protocol address. 

771
00:49:00,150 --> 00:49:06,040
This is the address to which when we send a packet operating system, 

772
00:49:06,050 --> 00:49:06,920
send a packet, 

773
00:49:08,330 --> 00:49:10,970
is going to send to one of these ip addresses, 

774
00:49:11,650 --> 00:49:12,780
not to the mac address. 

775
00:49:13,400 --> 00:49:16,050
We learn more about how they map to each other. 

776
00:49:21,700 --> 00:49:22,440
This is what you have. 

777
00:49:24,240 --> 00:49:25,780
My address, like I mentioned,

778
00:49:25,790 --> 00:49:28,060
is 48 bit unique identifier. 

779
00:49:28,670 --> 00:49:31,660
It's assigned by the current vendor. 

780
00:49:34,420 --> 00:49:35,430
Ip address, 

781
00:49:36,130 --> 00:49:37,640
used to be 32 bits. 

782
00:49:39,400 --> 00:49:45,900
It's assigned by the network administrator or who is dynamically in connect

783
00:49:45,910 --> 00:49:46,540
to the network. 

784
00:49:48,880 --> 00:49:54,530
Typically, today, almost everyone is dynamically connected.

785
00:49:55,730 --> 00:49:56,430
Your laptop, 

786
00:49:57,010 --> 00:49:58,430
your phone. 

787
00:49:59,040 --> 00:50:02,120
When you get an ip address that's dynamically allocated to you. 

788
00:50:03,360 --> 00:50:03,530
Right? 

789
00:50:03,540 --> 00:50:06,730
When you connect to wifi that in a wifi network, 

790
00:50:07,200 --> 00:50:12,270
someone is there is a process by which you are going to get an ip address

791
00:50:12,280 --> 00:50:14,270
without an ip address you cannot communicate. 

792
00:50:17,190 --> 00:50:18,820
Right now is ipv six. 

793
00:50:19,880 --> 00:50:21,770
You have 128 bits. 

794
00:50:22,270 --> 00:50:23,630
That's the length of the others. 

795
00:50:29,540 --> 00:50:30,850
Then you have a connection. 

796
00:50:30,860 --> 00:50:33,530
The connection happens between two processes. 

797
00:50:35,520 --> 00:50:37,720
Now, on one process, on one machine,

798
00:50:37,730 --> 00:50:39,560
you can have multiple processes. 

799
00:50:41,280 --> 00:50:42,000
One machine, 

800
00:50:42,010 --> 00:50:47,460
you can identify it remotely by this ip address or a mac address. 

801
00:50:49,330 --> 00:50:53,000
But how you are going to identify when you send a message that you

802
00:50:53,010 --> 00:50:57,240
want to send a particular process out of men is running on the

803
00:50:57,250 --> 00:51:01,310
same machine that is done using a poor numbers. 

804
00:51:01,320 --> 00:51:03,950
A poor number is a 16 bit identifier. 

805
00:51:05,020 --> 00:51:09,760
It has local scope to that operating machine or to an operating system

806
00:51:09,770 --> 00:51:12,320
to them on with the process is running

807
00:51:13,680 --> 00:51:15,050
local scope to the machine. 

808
00:51:16,720 --> 00:51:21,180
Therefore, a connection is identified by two end points.

809
00:51:21,630 --> 00:51:25,430
Each endpoint is identified by aip address and a partner. 

810
00:51:27,490 --> 00:51:30,250
And this is how to processes communicate. 

811
00:51:30,260 --> 00:51:33,190
This is how your application communicates. 

812
00:51:44,160 --> 00:51:45,780
So you have mac addresses, 

813
00:51:46,030 --> 00:51:47,710
which comes with each card. 

814
00:51:48,410 --> 00:51:51,080
Is that assigned? 

815
00:51:51,430 --> 00:51:52,790
And they cannot be changed. 

816
00:51:53,970 --> 00:51:56,000
They're assigned by the vendor car vendor. 

817
00:51:56,590 --> 00:51:57,610
You have ip addresses, 

818
00:51:57,620 --> 00:52:00,770
which in general are assigned dynamical. 

819
00:52:02,810 --> 00:52:05,960
Then you have four numbers which are assigned by the operating system

820
00:52:06,600 --> 00:52:07,530
to the process. 

821
00:52:09,370 --> 00:52:10,040
Now, 

822
00:52:11,190 --> 00:52:14,620
in order to identify to send a package to one process, 

823
00:52:14,630 --> 00:52:20,610
you need to specify both the ip address of the node on which the process runs. 

824
00:52:21,230 --> 00:52:23,170
And the port numbers are all the process. 

825
00:52:24,520 --> 00:52:27,250
The poor numbers are, again,

826
00:52:27,580 --> 00:52:31,800
used to differentiate between different processes on the same machine. 

827
00:52:35,350 --> 00:52:37,180
What is the main natural functionality? 

828
00:52:38,410 --> 00:52:39,570
The main natural function, 

829
00:52:39,580 --> 00:52:47,370
it is delivery of a packet from between two hosts across the globe. 

830
00:52:48,810 --> 00:52:49,630
That's a problem. 

831
00:52:51,180 --> 00:52:53,120
It as a service with implement, 

832
00:52:55,600 --> 00:52:56,670
what do you need to look for? 

833
00:52:58,790 --> 00:53:03,890
What are some properties of such service function id? 

834
00:53:06,220 --> 00:53:08,090
You certainly may want to be reliable. 

835
00:53:10,180 --> 00:53:11,470
The packet may be lost, 

836
00:53:12,190 --> 00:53:14,030
maybe loss for different reasons. 

837
00:53:15,170 --> 00:53:20,410
Can you think about actually some reasons why packets can be lost

838
00:53:24,450 --> 00:53:25,310
in the network? 

839
00:53:32,300 --> 00:53:33,850
If it's on wifi, 

840
00:53:34,680 --> 00:53:38,910
but I do interference and disturbance very good. 

841
00:53:41,020 --> 00:53:43,060
Someone turned on the microwave. 

842
00:53:45,590 --> 00:53:48,130
That's definitely can happen. 

843
00:53:51,770 --> 00:53:53,270
Corridor was none plug. 

844
00:53:55,020 --> 00:53:59,630
I they will all see in the packet. 

845
00:53:59,640 --> 00:54:01,590
They can, even in the wire metals,

846
00:54:02,300 --> 00:54:03,610
they can be still lost. 

847
00:54:04,400 --> 00:54:05,590
If, for instance,

848
00:54:06,490 --> 00:54:09,850
there are too many packets arriving at the routers more than the router

849
00:54:09,860 --> 00:54:10,410
can handle. 

850
00:54:11,410 --> 00:54:12,200
Therefore, 

851
00:54:13,080 --> 00:54:16,740
the buffer, the router is full,

852
00:54:17,180 --> 00:54:18,770
then you have to drop packets. 

853
00:54:20,780 --> 00:54:21,550
So that's one. 

854
00:54:22,900 --> 00:54:26,440
Now, this is what we are talking about is another thing is a flow control.

855
00:54:27,720 --> 00:54:31,120
The flow control is avoid overflowing the receiver buffer. 

856
00:54:32,460 --> 00:54:36,850
Say you have a cell phone or whatever, 

857
00:54:36,860 --> 00:54:38,290
which is our cell phone, 

858
00:54:38,300 --> 00:54:42,430
which you can get data only at one, 

859
00:54:42,650 --> 00:54:44,210
say, one megabit per second.

860
00:54:45,640 --> 00:54:47,000
And I am a big server. 

861
00:54:47,260 --> 00:54:50,930
I can send you back as I can blast you to 100 megabits per second, 

862
00:54:51,710 --> 00:54:54,390
100 times faster than you can receive. 

863
00:54:55,760 --> 00:54:56,830
What you are going to do. 

864
00:54:57,120 --> 00:54:59,170
There is no way you can get at that rate. 

865
00:54:59,180 --> 00:55:00,270
Many packets will be lost. 

866
00:55:01,420 --> 00:55:02,630
So therefore, 

867
00:55:03,350 --> 00:55:04,620
what you have to do, 

868
00:55:04,630 --> 00:55:11,000
you need to push back on the sender and tell the sender don't send that fast. 

869
00:55:11,800 --> 00:55:13,970
Jason say, at one megabit per second,

870
00:55:17,030 --> 00:55:18,340
this is what you need to do. 

871
00:55:19,280 --> 00:55:20,310
This is flow control. 

872
00:55:21,140 --> 00:55:24,840
The receiver pushing back to the server do not send to fast. 

873
00:55:25,970 --> 00:55:27,640
There is a congestion control. 

874
00:55:28,300 --> 00:55:30,540
The congestion control is avoid overflowing. 

875
00:55:30,550 --> 00:55:35,960
The buffering, the routers that ii we discuss that.

876
00:55:36,650 --> 00:55:39,020
If the buffer in a router overflows, 

877
00:55:39,370 --> 00:55:41,150
you lose back as a packets are dropped. 

878
00:55:46,980 --> 00:55:52,050
Congestion control is making sure that the sender doesn't send

879
00:55:53,500 --> 00:55:54,730
too much data so

880
00:55:54,740 --> 00:55:58,220
that the router is overwhelmed, 

881
00:55:58,830 --> 00:56:00,220
these buffers are overflowing. 

882
00:56:00,230 --> 00:56:01,620
So packets are lost. 

883
00:56:03,560 --> 00:56:05,340
So flow control is slowing down, 

884
00:56:05,350 --> 00:56:09,820
because the sale receiver congestion control is slowing down, 

885
00:56:09,830 --> 00:56:11,300
because the routers is another. 

886
00:56:11,990 --> 00:56:12,830
There's a difference. 

887
00:56:16,790 --> 00:56:17,280
Now, 

888
00:56:19,400 --> 00:56:20,790
we have to have right now. 

889
00:56:20,800 --> 00:56:24,870
Today we have different notes communicating between themselves. 

890
00:56:25,820 --> 00:56:27,340
Each of them executing the protocol. 

891
00:56:27,350 --> 00:56:31,890
It has a the syntax will describe what is a packet format? 

892
00:56:33,480 --> 00:56:34,480
Packet types, 

893
00:56:36,750 --> 00:56:37,100
right? 

894
00:56:37,840 --> 00:56:39,950
And the syntax would specify. 

895
00:56:40,670 --> 00:56:45,320
I get this packet, what i'm going to do is it what action I should take?

896
00:56:49,520 --> 00:56:51,760
This means that the two parties, 

897
00:56:52,370 --> 00:56:53,940
they have to speak the same language, 

898
00:56:54,450 --> 00:56:56,730
have to understand and execute the same probable. 

899
00:56:58,230 --> 00:57:02,290
So we need to standardize if you want to come here with someone, 

900
00:57:03,020 --> 00:57:04,500
they have to run the same protocol. 

901
00:57:06,120 --> 00:57:06,460
Right? 

902
00:57:08,870 --> 00:57:13,990
I if you want to speak with someone else that person should speak english

903
00:57:15,500 --> 00:57:16,810
or maybe another language, 

904
00:57:16,820 --> 00:57:19,710
both of okay. 

905
00:57:20,950 --> 00:57:23,000
So how does the standardization happen? 

906
00:57:26,300 --> 00:57:27,380
There are multiple ways. 

907
00:57:27,390 --> 00:57:34,950
One is there is a standard out there and every software

908
00:57:35,730 --> 00:57:39,960
developers follow the standard when it writes the application. 

909
00:57:41,050 --> 00:57:44,320
Of course, the other one is basically have only one person,

910
00:57:44,330 --> 00:57:48,060
only one or only company producing the entire software, 

911
00:57:48,070 --> 00:57:51,900
but I think the entire software is not desirable and is not realistic. 

912
00:57:54,610 --> 00:57:57,010
So that's why internally have the standard bodies. 

913
00:57:57,350 --> 00:57:58,390
For the internet. 

914
00:57:58,770 --> 00:58:03,850
The standard bodies is iatf internet engineering task force. 

915
00:58:06,460 --> 00:58:10,280
And typically the standardization happens for a new protocol. 

916
00:58:10,970 --> 00:58:13,030
Someone's write a document. 

917
00:58:13,400 --> 00:58:14,650
We specify the protocol, 

918
00:58:14,660 --> 00:58:19,750
syntax and semantics and send to the other members of the task force

919
00:58:20,050 --> 00:58:21,770
requesting for comments

920
00:58:23,730 --> 00:58:25,020
is called request for comments. 

921
00:58:26,390 --> 00:58:28,060
After multiple rounds, 

922
00:58:28,400 --> 00:58:36,090
that can become us can be approved to a become a standard in idea if you

923
00:58:36,100 --> 00:58:36,990
don't need consensus. 

924
00:58:37,940 --> 00:58:38,230
Right? 

925
00:58:38,240 --> 00:58:40,720
It's not like to bc to face from it. 

926
00:58:40,730 --> 00:58:43,780
The majority has to agree. 

927
00:58:43,990 --> 00:58:48,020
But one thing that always required an idea is to have running code

928
00:58:48,850 --> 00:58:51,680
to demonstrate which demonstrate that the protocol is feasible. 

929
00:58:51,690 --> 00:58:55,300
And typically, you are asked for two implementation,

930
00:58:55,310 --> 00:58:57,060
different implementation of the same product. 

931
00:59:02,010 --> 00:59:06,520
There are also other ways to have de facto standards when some software

932
00:59:06,530 --> 00:59:07,760
becomes so popular. 

933
00:59:08,320 --> 00:59:10,140
It becomes the factor standard. 

934
00:59:12,600 --> 00:59:15,090
And as I will follow after it like linux, 

935
00:59:15,830 --> 00:59:17,300
there is no standard body for linux, 

936
00:59:17,310 --> 00:59:18,800
but it's an effect of standard. 

937
00:59:19,660 --> 00:59:24,740
So everyone follows that standard or writing the application. 

938
00:59:29,970 --> 00:59:33,890
One thing about and this is the title of this networking section. 

939
00:59:35,300 --> 00:59:38,440
We are learning during this class during this lecture. 

940
00:59:38,880 --> 00:59:39,620
Is larry. 

941
00:59:40,810 --> 00:59:41,920
What about larry? 

942
00:59:42,240 --> 00:59:43,150
What is a problem? 

943
00:59:47,990 --> 00:59:49,980
The layering is a problem here, 

944
00:59:49,990 --> 00:59:51,990
is that think about. 

945
00:59:52,790 --> 00:59:53,340
You're right. 

946
00:59:53,870 --> 00:59:57,540
You want to send a message from your application, 

947
00:59:58,250 --> 00:59:59,720
from one process to another. 

948
01:00:01,610 --> 01:00:04,440
And that is what you like some instructions. 

949
01:00:06,730 --> 01:00:09,160
High level language may be sent, received.

950
01:00:10,040 --> 01:00:14,520
That will be compiled down in machine code and will be executed by the processor. 

951
01:00:16,300 --> 01:00:18,630
And now you send it, but then you send it.

952
01:00:19,720 --> 01:00:22,460
Eventually, that information you send,

953
01:00:22,470 --> 01:00:24,620
it needs to go all the way to the wire, 

954
01:00:25,370 --> 01:00:30,380
or all the way to be transformed in a physical signal. 

955
01:00:31,770 --> 01:00:38,890
So there are many kind of steps from a sent to all the way

956
01:00:38,900 --> 01:00:41,690
to that information to be sent on a wire, 

957
01:00:41,700 --> 01:00:45,660
on radio, 

958
01:00:47,620 --> 01:00:51,460
and then to be received the signal to be received on the other side

959
01:00:51,470 --> 01:00:55,590
and to measure its way back to the receiving process, 

960
01:00:58,620 --> 01:01:04,540
which invokes probably I receive comment and ultimately get the date. 

961
01:01:07,980 --> 01:01:10,570
The problem here also is like we discussed. 

962
01:01:11,760 --> 01:01:14,870
There is not only a one way to send a signal. 

963
01:01:14,880 --> 01:01:16,870
There are many ways you can send the signals. 

964
01:01:17,390 --> 01:01:20,590
You can use blue stars, radio signals, wifi,

965
01:01:22,460 --> 01:01:24,100
you can use optical networks, 

966
01:01:24,110 --> 01:01:25,460
you can optical signals. 

967
01:01:25,470 --> 01:01:28,740
You can use electrical signals like in wire networks. 

968
01:01:31,020 --> 01:01:32,130
You have many of these things. 

969
01:01:33,060 --> 01:01:40,150
So you need to organize all of these carrier pigeon. 

970
01:01:41,320 --> 01:01:42,270
That's a very good one. 

971
01:01:42,920 --> 01:01:43,930
You can do that as well. 

972
01:01:46,360 --> 01:01:47,700
You can send the information, 

973
01:01:49,670 --> 01:01:50,070
right? 

974
01:01:50,550 --> 01:01:55,740
This is a problem just thinking about application and transmission media, 

975
01:01:56,810 --> 01:02:00,860
how we are going to do it like one way to do it. 

976
01:02:00,870 --> 01:02:04,960
It's basically for your application, 

977
01:02:05,240 --> 01:02:09,680
your ideal application so that it's able your converters or adapters

978
01:02:10,270 --> 01:02:13,300
to send to use every communication media, 

979
01:02:15,930 --> 01:02:17,460
wired fiber, optic,

980
01:02:18,930 --> 01:02:20,420
wifi, bluetooth name it.

981
01:02:21,200 --> 01:02:22,350
That's one way to do it. 

982
01:02:25,180 --> 01:02:26,260
What is the problem with

983
01:02:34,650 --> 01:02:37,780
this kind of a lot of work? 

984
01:02:38,890 --> 01:02:39,570
That's correct. 

985
01:02:43,110 --> 01:02:45,540
Because you have a new application or you need to implement

986
01:02:45,550 --> 01:02:48,780
this application or over all these communication media. 

987
01:02:50,260 --> 01:02:51,770
If you add a new transmission media, 

988
01:02:51,780 --> 01:02:53,450
it's even worse every application. 

989
01:02:53,460 --> 01:02:54,850
Now, if you want to support it,

990
01:02:55,150 --> 01:02:58,290
you need to update the application to work on this one

991
01:02:58,300 --> 01:03:00,180
over this communication radio, 

992
01:03:00,190 --> 01:03:01,860
over this new communication, 

993
01:03:04,630 --> 01:03:06,700
over this new transmission media. 

994
01:03:12,700 --> 01:03:13,690
A lot of work. 

995
01:03:14,700 --> 01:03:15,860
So what is the solution? 

996
01:03:28,830 --> 01:03:29,060
Encapsulations, 

997
01:03:30,360 --> 01:03:35,190
almost, but encapsulation assumes something else encapsulate in what

998
01:03:45,440 --> 01:03:47,760
layer protocols you are talking about layers. 

999
01:03:47,890 --> 01:03:49,120
That's absolutely correct. 

1000
01:03:50,430 --> 01:03:51,420
Here is a solution. 

1001
01:03:51,430 --> 01:03:52,980
You add an intermediate layer. 

1002
01:03:53,990 --> 01:03:57,090
There is a a famous quote, 

1003
01:03:57,450 --> 01:04:04,950
basically saying that any problem in computer science can be solved by

1004
01:04:04,960 --> 01:04:07,910
adding another level of indirection. 

1005
01:04:09,910 --> 01:04:11,780
This is in direction at work. 

1006
01:04:12,820 --> 01:04:16,080
You have an intermediate layer as an intermediate layer, 

1007
01:04:16,090 --> 01:04:20,230
provides only one interface to the application. 

1008
01:04:21,010 --> 01:04:25,120
And all these applications are going to be written again, the same,

1009
01:04:25,490 --> 01:04:27,290
api the same interface. 

1010
01:04:30,080 --> 01:04:33,250
And then if I am going to add, so basically,

1011
01:04:33,260 --> 01:04:34,290
this is really easy. 

1012
01:04:34,750 --> 01:04:35,210
Right? 

1013
01:04:36,450 --> 01:04:39,020
I am going to a new application. 

1014
01:04:39,030 --> 01:04:44,160
I need to only be worried about only one interface to work with. 

1015
01:04:46,750 --> 01:04:50,860
If you are going to add to and to add another transmission media, 

1016
01:04:50,870 --> 01:04:56,470
you just need to provide the same interface of the intermediate layer. 

1017
01:04:57,810 --> 01:04:58,920
Then everything will work. 

1018
01:05:02,220 --> 01:05:03,300
If a new application, 

1019
01:05:05,310 --> 01:05:07,740
if a new application is developed, 

1020
01:05:08,550 --> 01:05:11,070
no need to touch the transmission media part. 

1021
01:05:12,130 --> 01:05:14,370
If a new transmission media is added, 

1022
01:05:14,380 --> 01:05:16,090
no need to touch existing applications. 

1023
01:05:20,700 --> 01:05:21,620
Pretty cool, right?

1024
01:05:24,200 --> 01:05:27,020
And this has to do a software system modularity, 

1025
01:05:28,130 --> 01:05:28,590
right? 

1026
01:05:28,970 --> 01:05:30,170
And the modularity, whatever,

1027
01:05:30,180 --> 01:05:32,330
is going to provide these abstractions, 

1028
01:05:33,210 --> 01:05:36,170
differentiate between the interface and the implementation, 

1029
01:05:37,080 --> 01:05:38,800
high, the implementation details.

1030
01:05:39,060 --> 01:05:40,700
Thus, when it develops a code,

1031
01:05:40,710 --> 01:05:42,810
you are going to write functions. 

1032
01:05:43,830 --> 01:05:47,150
The function provides signatures as the interface of the function. 

1033
01:05:47,780 --> 01:05:50,440
Typically, the implementation shouldn't matter.

1034
01:05:50,450 --> 01:05:53,240
You write a function to do sort. 

1035
01:05:54,390 --> 01:05:57,370
The sorting, if the interface looks the same,

1036
01:05:57,960 --> 01:06:00,690
you provide us, you provide a list,

1037
01:06:02,480 --> 01:06:04,340
and you get out the least orders, 

1038
01:06:04,940 --> 01:06:06,500
ascending or descending order. 

1039
01:06:07,850 --> 01:06:09,170
How the implementation, 

1040
01:06:09,180 --> 01:06:10,650
how that is done doesn't matter. 

1041
01:06:11,760 --> 01:06:12,420
Bubble sort. 

1042
01:06:12,900 --> 01:06:13,450
Quick start. 

1043
01:06:14,190 --> 01:06:19,470
Keep sort whatever this kind of modularity. 

1044
01:06:19,810 --> 01:06:25,320
And also it's related with encapsulation and encapsulate the functionality. 

1045
01:06:26,000 --> 01:06:30,700
It's widely used as a method in computer science, 

1046
01:06:31,700 --> 01:06:32,120
right? 

1047
01:06:32,560 --> 01:06:33,610
To simplify, 

1048
01:06:33,900 --> 01:06:38,290
complex, sinks modularized.

1049
01:06:38,800 --> 01:06:39,220
Right? 

1050
01:06:44,430 --> 01:06:44,860
Now, 

1051
01:06:46,080 --> 01:06:47,190
fundamentally, 

1052
01:06:47,200 --> 01:06:54,550
you a there is one disadvantage of modularity is great, 

1053
01:06:56,700 --> 01:06:59,730
because again, I can send the can change the implementation,

1054
01:06:59,740 --> 01:07:02,530
can be a lot of lines of code without anything else. 

1055
01:07:03,180 --> 01:07:04,640
Is the application to be changed? 

1056
01:07:06,740 --> 01:07:07,550
However, 

1057
01:07:10,640 --> 01:07:14,260
these interfaces also high information. 

1058
01:07:15,550 --> 01:07:17,590
Some information can be very useful. 

1059
01:07:19,290 --> 01:07:21,270
And without this information, 

1060
01:07:22,140 --> 01:07:24,610
the performance can be impaired. 

1061
01:07:26,710 --> 01:07:28,270
Let me give you a classic example. 

1062
01:07:31,400 --> 01:07:33,030
I send a packet to another, 

1063
01:07:37,250 --> 01:07:39,870
and the packet doesn't make it. 

1064
01:07:40,300 --> 01:07:42,380
It's not acknowledge, I expect an acknowledge.

1065
01:07:43,020 --> 01:07:47,210
I don't get acknowledge what I should do, 

1066
01:07:49,700 --> 01:07:51,710
resend it again, right?

1067
01:07:53,530 --> 01:07:56,410
But how aggressively i'm going to resend it? 

1068
01:07:56,420 --> 01:08:00,900
And after how long it will depend on how the packet was lost, 

1069
01:08:02,170 --> 01:08:03,840
it was because the interference, 

1070
01:08:04,350 --> 01:08:07,340
like we discussed, I want to resend it immediately.

1071
01:08:09,550 --> 01:08:11,860
If it is because the congestion is a matter, 

1072
01:08:15,260 --> 01:08:16,690
then I want to slow down. 

1073
01:08:17,870 --> 01:08:19,580
Because if I send it the same, right?

1074
01:08:19,590 --> 01:08:20,980
I probably the man, 

1075
01:08:20,990 --> 01:08:23,980
the packet was lost because I was sending too fast. 

1076
01:08:26,600 --> 01:08:31,020
If i'm just descending and rescinding and rescinding that more packets

1077
01:08:31,030 --> 01:08:31,820
are going to be lost. 

1078
01:08:34,140 --> 01:08:35,530
In that case, I want to slow down.

1079
01:08:36,780 --> 01:08:41,190
If the interface doesn't allow me to expose this information, 

1080
01:08:41,200 --> 01:08:42,270
and today doesn't, 

1081
01:08:42,280 --> 01:08:44,520
I don't know exactly what to do. 

1082
01:08:44,970 --> 01:08:46,200
The performance will suffer. 

1083
01:08:50,160 --> 01:08:52,190
Network is like system modularity, 

1084
01:08:52,200 --> 01:08:58,320
but that another modularity is like system modularity, 

1085
01:09:00,470 --> 01:09:01,910
but is simplified. 

1086
01:09:03,280 --> 01:09:05,310
He simplified because they have layers. 

1087
01:09:05,320 --> 01:09:07,910
Modules can be connected in any ways. 

1088
01:09:09,150 --> 01:09:10,000
Layering. 

1089
01:09:10,270 --> 01:09:15,290
It's connected in only one way is basically one layer on top of the other. 

1090
01:09:15,670 --> 01:09:20,090
One layer can use only the functionality of the layer beneath which is

1091
01:09:23,570 --> 01:09:26,990
which is beneath it. 

1092
01:09:29,490 --> 01:09:29,850
Right? 

1093
01:09:32,830 --> 01:09:36,660
Only the two nearby layers are going to interact with each other. 

1094
01:09:38,850 --> 01:09:40,080
Now you have a bunch of layers. 

1095
01:09:40,090 --> 01:09:41,440
The next question it's about, 

1096
01:09:41,650 --> 01:09:44,630
you have a bunch of functions you need to implement reliability, flow,

1097
01:09:44,640 --> 01:09:45,350
control, congestion.

1098
01:09:45,360 --> 01:09:49,650
And we discuss about that which layer is going to implement them. 

1099
01:09:50,850 --> 01:09:53,920
We are going to learn next time about entering principle which provide

1100
01:09:53,930 --> 01:09:58,020
a guiding is a guiding principle of where to implement

1101
01:09:58,030 --> 01:09:58,980
certain functionality. 

1102
01:10:00,630 --> 01:10:07,560
And then is a question about where the state is shared. 

1103
01:10:08,490 --> 01:10:11,620
It's stopped when you have a failure, 

1104
01:10:12,210 --> 01:10:12,640
right? 

1105
01:10:13,250 --> 01:10:15,610
Then you can lose a piece of state, 

1106
01:10:16,640 --> 01:10:18,000
then you need to recover it. 

1107
01:10:18,390 --> 01:10:23,090
This kind of stuff how you are going to think about the state shared state

1108
01:10:23,100 --> 01:10:26,390
in the distributed as a in a distributed system. 

1109
01:10:29,700 --> 01:10:31,440
And we are going to address all of those. 

1110
01:10:31,450 --> 01:10:33,480
So we have ten more minutes. 

1111
01:10:34,480 --> 01:10:36,270
Let's dive in now in netherlands. 

1112
01:10:37,960 --> 01:10:39,070
I said the layering, 

1113
01:10:39,790 --> 01:10:43,990
it's this partition of the system or a lawyer, 

1114
01:10:44,000 --> 01:10:51,210
a layer relies only on the services from the layer below it

1115
01:10:53,130 --> 01:10:56,360
and provide services only to the layers above it. 

1116
01:11:02,660 --> 01:11:08,800
And the interfaces between layers abstracts away the implementation of a layer, 

1117
01:11:08,810 --> 01:11:12,520
which provides that interface from the layer using that interface, 

1118
01:11:14,120 --> 01:11:20,210
there can be changed in isolation without in a transparent manner

1119
01:11:20,220 --> 01:11:21,650
to the layers above it. 

1120
01:11:25,470 --> 01:11:29,660
There are several concepts which are associated with this letter and we

1121
01:11:29,670 --> 01:11:33,310
care to answer service, 

1122
01:11:34,220 --> 01:11:35,580
what a layer does, 

1123
01:11:36,070 --> 01:11:37,770
what functionality provides, 

1124
01:11:39,310 --> 01:11:40,710
service interface, 

1125
01:11:41,390 --> 01:11:42,460
how to access a service? 

1126
01:11:42,470 --> 01:11:44,080
How do you access the service? 

1127
01:11:44,090 --> 01:11:46,780
What is the api what is the interface? 

1128
01:11:48,370 --> 01:11:49,550
And then is a protocol. 

1129
01:11:50,480 --> 01:11:54,400
The protocol like we discussed in the past is how the peers to peers

1130
01:11:55,090 --> 01:11:56,320
communicate with each other. 

1131
01:11:56,870 --> 01:11:58,870
What is a packet format sent us? 

1132
01:11:59,380 --> 01:12:01,130
What do I do when I receive a packet? 

1133
01:12:02,400 --> 01:12:03,640
When I don't receive a packet, 

1134
01:12:03,650 --> 01:12:04,760
when I have a timeout? 

1135
01:12:05,590 --> 01:12:09,460
There's a semantic he said to be service interface and protocol. 

1136
01:12:11,840 --> 01:12:13,410
This is a network learning. 

1137
01:12:15,190 --> 01:12:16,100
Initially, 

1138
01:12:16,740 --> 01:12:19,130
as it was a standard body, 

1139
01:12:19,460 --> 01:12:25,210
open system interconnection that declares that there should be seven layers, 

1140
01:12:27,060 --> 01:12:28,250
physical data link, 

1141
01:12:28,260 --> 01:12:31,190
network transport session, presentation, and application.

1142
01:12:33,500 --> 01:12:35,210
However, the internet protocol,

1143
01:12:35,220 --> 01:12:37,340
this standard, 

1144
01:12:38,860 --> 01:12:40,320
it was unsuccessful, india.

1145
01:12:41,520 --> 01:12:44,530
It was overtaken by internet protocol, 

1146
01:12:44,540 --> 01:12:53,030
which was initially initially grew as a de facto standard. 

1147
01:12:55,500 --> 01:13:01,400
And only later, it was the idea was only it was created later.

1148
01:13:01,680 --> 01:13:08,080
I think nine ten years later after ip was design ip and the tcpip protocol. 

1149
01:13:08,090 --> 01:13:10,840
Remember, it was a software.

1150
01:13:10,850 --> 01:13:18,230
It was a protocol which has implemented in unique bsd better places in distribution. 

1151
01:13:20,190 --> 01:13:21,460
You should be very proud about that. 

1152
01:13:24,050 --> 01:13:24,610
Okay. 

1153
01:13:26,070 --> 01:13:29,180
With these layers that are with this probably the internet protocol, 

1154
01:13:29,190 --> 01:13:30,500
you have only five layers. 

1155
01:13:31,050 --> 01:13:34,320
The presentation and session layers are included in the application layer. 

1156
01:13:34,330 --> 01:13:38,000
So these are going to learn about what each layer is doing. 

1157
01:13:40,490 --> 01:13:44,380
Let's start bottom up, 

1158
01:13:45,000 --> 01:13:47,530
physical layer service, 

1159
01:13:47,780 --> 01:13:51,300
move the information between two systems connected by a physically, 

1160
01:13:51,310 --> 01:13:55,290
the physical link can be wired, 

1161
01:13:56,170 --> 01:13:59,700
optical, or through the air.

1162
01:14:01,690 --> 01:14:04,360
The interface specifies how to send and receive bits. 

1163
01:14:04,370 --> 01:14:05,880
What are the levels of voltages? 

1164
01:14:05,890 --> 01:14:07,840
How you encode one or the ones? 

1165
01:14:08,800 --> 01:14:10,290
How do you encode zeros? 

1166
01:14:13,090 --> 01:14:13,460
Right? 

1167
01:14:16,230 --> 01:14:20,380
And the protocol represent actually the coding scheme. 

1168
01:14:20,840 --> 01:14:25,480
So it's like the interfere is basically here. 

1169
01:14:25,930 --> 01:14:31,810
I'm saying about a what is a bit is like transition from low to high voltage, 

1170
01:14:32,340 --> 01:14:37,660
or transition from a lot of hybrid from high to low voltage? 

1171
01:14:38,270 --> 01:14:40,980
What is the duration of a bit for how long it sent? 

1172
01:14:43,400 --> 01:14:46,150
These are the examples of sparsely archival optical fiberly, 

1173
01:14:46,160 --> 01:14:47,350
intense of us. 

1174
01:14:50,600 --> 01:14:52,070
The next is detailing layer. 

1175
01:14:52,080 --> 01:14:52,710
So by the way, 

1176
01:14:52,720 --> 01:14:57,680
the physical layer is between two machines which are directly connected. 

1177
01:14:57,920 --> 01:15:00,990
The data link layer is the same. 

1178
01:15:01,350 --> 01:15:04,500
But here there are multiple machines which are connected

1179
01:15:04,510 --> 01:15:06,260
to the same communication media. 

1180
01:15:07,810 --> 01:15:09,160
Typically like for instance, 

1181
01:15:09,170 --> 01:15:11,000
the same local area network. 

1182
01:15:11,790 --> 01:15:15,840
What is called all the machines on a wifi network, right?

1183
01:15:17,470 --> 01:15:20,310
If you are connected with the wifi with the same base stations, 

1184
01:15:20,730 --> 01:15:21,860
you are on the same level. 

1185
01:15:23,830 --> 01:15:24,540
In this case, 

1186
01:15:24,550 --> 01:15:27,780
you need to arbitrate the access because you have multiple machines sending

1187
01:15:27,790 --> 01:15:29,340
on the same communication media. 

1188
01:15:29,640 --> 01:15:31,090
They can send at the same time, 

1189
01:15:31,100 --> 01:15:32,290
so they can have collisions. 

1190
01:15:35,120 --> 01:15:38,380
So you need to think about that. 

1191
01:15:39,310 --> 01:15:41,530
But this is a service laid out in layer provides. 

1192
01:15:43,100 --> 01:15:45,880
It can also provide reliable transmission and flow control. 

1193
01:15:45,890 --> 01:15:47,430
Remember, flow control is what?

1194
01:15:49,460 --> 01:15:50,620
Not overflowing. 

1195
01:15:52,580 --> 01:15:55,180
The receiver slowing down to not overflow the receiver. 

1196
01:15:56,720 --> 01:15:58,230
The interface is sent framed. 

1197
01:15:58,240 --> 01:16:01,590
So here are the packets initially with physical areas and bits. 

1198
01:16:02,360 --> 01:16:05,160
Here you aggregate the beats into frames, 

1199
01:16:06,770 --> 01:16:08,170
and you send frames. 

1200
01:16:08,180 --> 01:16:09,570
Each frame has a header, 

1201
01:16:12,230 --> 01:16:12,620
right? 

1202
01:16:16,350 --> 01:16:19,380
And the head that will have this mac added, this is your seat.

1203
01:16:21,780 --> 01:16:24,680
Finally, you have the protocols.

1204
01:16:25,540 --> 01:16:28,060
It is media access protocol to arbitrate access. 

1205
01:16:28,550 --> 01:16:31,760
There are many implementation we are going to briefly talk about that. 

1206
01:16:34,370 --> 01:16:35,320
Here is what you have, 

1207
01:16:36,000 --> 01:16:36,480
right? 

1208
01:16:37,690 --> 01:16:39,280
A you have a frame header. 

1209
01:16:39,290 --> 01:16:40,920
The frame header has a mac, 

1210
01:16:40,930 --> 01:16:42,840
a destination and source service. 

1211
01:16:44,810 --> 01:16:48,600
Then they are converted as a lower level in bits which are sent on the wire. 

1212
01:16:50,600 --> 01:16:50,960
You see, 

1213
01:16:53,240 --> 01:16:55,870
okay, you see that you have the counterpoint,

1214
01:16:56,720 --> 01:17:00,070
you have the instantiation of the layers at boss by boss, 

1215
01:17:00,860 --> 01:17:02,280
beers at both end points. 

1216
01:17:03,340 --> 01:17:03,680
Right? 

1217
01:17:12,410 --> 01:17:13,790
So now, 

1218
01:17:14,480 --> 01:17:18,750
actually, you can look about your on your machines.

1219
01:17:18,760 --> 01:17:22,520
And if you are curious about this physical address or the mac address, 

1220
01:17:23,700 --> 01:17:27,880
you can easily find those as well as the ip addresses. 

1221
01:17:27,890 --> 01:17:36,710
But this is what if you do if config in linux or ip configure orientals machine, 

1222
01:17:37,240 --> 01:17:39,570
then you are going to get these physical addresses

1223
01:17:39,580 --> 01:17:41,310
or internet adapter and so forth. 

1224
01:17:41,320 --> 01:17:42,760
These are the mac addresses. 

1225
01:17:48,870 --> 01:17:50,150
So like I mentioned, 

1226
01:17:53,350 --> 01:17:57,090
a group of machines which are on the same communication media, 

1227
01:17:57,500 --> 01:17:59,260
they are called form a lab, 

1228
01:17:59,510 --> 01:18:00,590
local area network. 

1229
01:18:03,830 --> 01:18:07,060
And these are the examples computers in your home, 

1230
01:18:07,720 --> 01:18:09,690
starbucks, wireless, starbucks, and starbucks,

1231
01:18:09,700 --> 01:18:11,040
and so forth. 

1232
01:18:12,730 --> 01:18:17,940
But the most important things here is that when you send a frame on a line

1233
01:18:19,390 --> 01:18:20,660
that can reach any

1234
01:18:20,670 --> 01:18:24,530
other machine on the same line. 

1235
01:18:27,240 --> 01:18:29,360
So it's a general, it's a broadcast media.

1236
01:18:30,350 --> 01:18:33,790
It's like we are in a room or on this web. 

1237
01:18:34,000 --> 01:18:36,950
I'm saying something everyone else from here. 

1238
01:18:41,480 --> 01:18:42,850
Now, you know,

1239
01:18:42,860 --> 01:18:44,170
how does it know? 

1240
01:18:45,840 --> 01:18:49,590
Because everyone will get the same phrase for a frame. 

1241
01:18:49,940 --> 01:18:54,330
How does the now the recipient they intend the recipient of the frame

1242
01:18:54,340 --> 01:18:56,930
to get the frame and other others not get the frame? 

1243
01:19:00,580 --> 01:19:01,940
It's because of mac address. 

1244
01:19:02,930 --> 01:19:08,150
When the sender sends a frame in the frame header, 

1245
01:19:08,680 --> 01:19:10,640
it puts the mac address of the recipient, 

1246
01:19:11,030 --> 01:19:17,520
in this case is b now the frame is going to be forward to everyone, 

1247
01:19:19,000 --> 01:19:23,860
but only b is going to look at the header and is outgoing to see

1248
01:19:23,870 --> 01:19:25,500
that its address to itself. 

1249
01:19:25,980 --> 01:19:30,650
It's going to pass the frame to the next layer, 

1250
01:19:32,850 --> 01:19:33,590
the second, 

1251
01:19:34,920 --> 01:19:35,490
the sea, 

1252
01:19:36,220 --> 01:19:36,770
the other, 

1253
01:19:37,180 --> 01:19:45,480
if that if a computer looks at the frame and it doesn't recognize its mac address, 

1254
01:19:45,840 --> 01:19:46,430
it drops it. 

1255
01:19:51,390 --> 01:19:52,990
Now things are more complicated. 

1256
01:19:54,510 --> 01:19:55,740
Even for a land, 

1257
01:19:56,550 --> 01:19:58,700
there are switches and so forth. 

1258
01:19:59,560 --> 01:20:03,270
This is what we are going to continue to discuss next lecture. 

1259
01:20:05,180 --> 01:20:06,330
And with that, 

1260
01:20:06,830 --> 01:20:09,160
stopping here, please, if you have any other questions,

1261
01:20:10,230 --> 01:20:12,850
let me know and be asa or send an email. 

1262
01:20:13,670 --> 01:20:17,450
I'll see you all on next tuesday. 

1263
01:20:18,830 --> 01:20:20,140
Good luck with the homework. 


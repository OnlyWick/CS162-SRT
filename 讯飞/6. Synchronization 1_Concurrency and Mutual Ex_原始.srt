1
00:00:05,110 --> 00:00:06,110
Hello, everyone.

2
00:00:07,920 --> 00:00:09,670
Let's start the 6th lecture. 

3
00:00:10,620 --> 00:00:11,050
Today, 

4
00:00:11,060 --> 00:00:15,690
we are going to continue the inter process communication to talk

5
00:00:15,700 --> 00:00:18,010
about the inter process communication primitives. 

6
00:00:18,550 --> 00:00:18,890
In particular, 

7
00:00:18,900 --> 00:00:24,480
we are going to talk about sockets which allowed to applications

8
00:00:24,490 --> 00:00:27,080
to communicate over the network. 

9
00:00:27,820 --> 00:00:31,100
And then we are going to start talking about concurrency. 

10
00:00:33,040 --> 00:00:36,710
This will be a pretty long topic which will go over the pure next, 

11
00:00:36,720 --> 00:00:37,830
a couple of lectures. 

12
00:00:38,900 --> 00:00:40,770
As always, if you have any questions,

13
00:00:40,780 --> 00:00:44,030
please ask in the q and a thread, 

14
00:00:44,040 --> 00:00:49,280
or i'll try also to check on the chat. 

15
00:00:53,690 --> 00:00:54,520
Let's start. 

16
00:00:56,760 --> 00:00:57,280
So, 

17
00:00:59,510 --> 00:01:03,330
again, like we discussed earlier in this class,

18
00:01:03,730 --> 00:01:06,840
today, a lot of applications are distributed, right?

19
00:01:06,850 --> 00:01:09,760
They are not only running on a single machine on your laptop, 

20
00:01:10,930 --> 00:01:12,570
but most of them, they have a back end.

21
00:01:13,150 --> 00:01:18,710
You need to go over the network in order to implement

22
00:01:18,720 --> 00:01:21,290
almost any functionality of the application. 

23
00:01:21,800 --> 00:01:24,570
And the exam, your web browser is a great examples.

24
00:01:25,800 --> 00:01:30,750
Anything you are using today almost like many of the applications like facebook, 

25
00:01:30,760 --> 00:01:31,350
twitter, 

26
00:01:31,870 --> 00:01:34,650
and google application like google docs. 

27
00:01:35,720 --> 00:01:40,280
And obviously google itself as they look this way, 

28
00:01:40,490 --> 00:01:44,230
you have a piece of code running on the client side, on your machine,

29
00:01:44,240 --> 00:01:45,510
on your phone, 

30
00:01:45,940 --> 00:01:50,450
and a bigger piece of code which runs on the back end, 

31
00:01:50,770 --> 00:01:53,060
on a bunch of servers in the data centers. 

32
00:01:55,800 --> 00:01:59,080
And typically, all these applications, in general,

33
00:01:59,940 --> 00:02:02,130
looks like that, like this.

34
00:02:02,790 --> 00:02:04,810
The client sends a request, 

35
00:02:05,520 --> 00:02:07,240
and it gets a reply back. 

36
00:02:08,140 --> 00:02:11,170
The request can be a query and google. 

37
00:02:11,590 --> 00:02:15,640
The reply can be the answers to that. 

38
00:02:16,820 --> 00:02:22,430
The it can be the reply to your search query. 

39
00:02:24,110 --> 00:02:27,640
And for something like that flicks, 

40
00:02:28,350 --> 00:02:29,740
the reply will be, 

41
00:02:29,750 --> 00:02:31,700
as a request will be your clicks. 

42
00:02:32,170 --> 00:02:33,360
Selecting a movie, 

43
00:02:33,370 --> 00:02:37,120
the reply can be also recommendation of other movies or the movies

44
00:02:37,130 --> 00:02:40,780
start streaming and things like that. 

45
00:02:45,100 --> 00:02:51,200
And typically you have more than one client talking with the same set

46
00:02:51,210 --> 00:02:52,400
about the same machine. 

47
00:02:54,050 --> 00:02:55,320
And like, for instance,

48
00:02:55,330 --> 00:02:56,800
have many web clients, 

49
00:02:56,810 --> 00:02:59,880
and the many of them are talking with the same web server. 

50
00:03:01,410 --> 00:03:05,000
This is a kind of pattern communication pattern we have to implement

51
00:03:05,010 --> 00:03:05,900
under the hood. 

52
00:03:14,200 --> 00:03:18,590
So here it's about how also a little bit more and more details

53
00:03:18,600 --> 00:03:21,510
about how client and the server are similar. 

54
00:03:21,820 --> 00:03:22,970
And even more importantly, 

55
00:03:22,980 --> 00:03:24,330
how they are different. 

56
00:03:25,220 --> 00:03:27,170
The client again, sends a request,

57
00:03:27,750 --> 00:03:35,610
like get index html this basically specified to get as a content of the web

58
00:03:35,620 --> 00:03:40,260
page of a site of the first page of a site to render on your machine. 

59
00:03:42,860 --> 00:03:45,990
And in order to do that, 

60
00:03:46,000 --> 00:03:50,390
you need to contact a server which stores the index dot html, 

61
00:03:50,720 --> 00:03:54,790
this fight, the content of the page you want to render on your machine.

62
00:03:56,330 --> 00:04:02,630
One thing obviously need to do is that when we need to know is the address

63
00:04:02,640 --> 00:04:03,320
of that server, 

64
00:04:03,330 --> 00:04:03,550
right? 

65
00:04:03,560 --> 00:04:05,160
It's like when you make a call, 

66
00:04:05,170 --> 00:04:07,230
you need to know the number you are calling. 

67
00:04:09,490 --> 00:04:09,870
Okay? 

68
00:04:10,330 --> 00:04:11,550
So keep in mind that. 

69
00:04:11,770 --> 00:04:14,320
So you need to know the address of the seller from it. 

70
00:04:14,330 --> 00:04:15,280
You get the content. 

71
00:04:16,100 --> 00:04:18,860
And now the server, 

72
00:04:19,640 --> 00:04:21,430
it's typically always on, 

73
00:04:21,440 --> 00:04:29,240
it has always to be ready to receive requests and answer this request. 

74
00:04:29,660 --> 00:04:31,370
Unlike on the other hand, 

75
00:04:31,380 --> 00:04:32,810
obviously is a client. 

76
00:04:33,090 --> 00:04:36,630
It's not always on your phone, your computer,

77
00:04:36,640 --> 00:04:39,110
your laptop is not always on most of the time. 

78
00:04:39,120 --> 00:04:40,670
It's actually off. 

79
00:04:41,220 --> 00:04:43,670
But when it's on, it's going to send his request to a server.

80
00:04:43,680 --> 00:04:49,380
We should be on all the time in order for you to get the reply right away. 

81
00:04:52,820 --> 00:04:53,790
And obviously, 

82
00:04:53,800 --> 00:04:57,670
the clients initiate the conduct of the server nor the other way around. 

83
00:04:58,760 --> 00:05:02,890
The client know doesn't need to know to have a because of that, 

84
00:05:02,900 --> 00:05:06,300
the client doesn't need to have a well known address, 

85
00:05:07,620 --> 00:05:12,460
but the server has to okay. 

86
00:05:12,470 --> 00:05:15,370
And like we said before, 

87
00:05:15,380 --> 00:05:19,000
when the server gets a required as aa request, 

88
00:05:19,310 --> 00:05:21,720
it's going to answer something back, 

89
00:05:21,730 --> 00:05:24,150
hopefully satisfying the reply, 

90
00:05:26,420 --> 00:05:30,750
answering the reply according to the user expectations. 

91
00:05:36,150 --> 00:05:39,750
Again, we need to call to send data over the network.

92
00:05:42,520 --> 00:05:47,360
And what we do that, 

93
00:05:48,630 --> 00:05:51,640
we need to send, we are going to send some bites.

94
00:05:53,040 --> 00:05:54,430
Data consists of bits. 

95
00:05:54,710 --> 00:05:56,720
We aggregate each eight beats. 

96
00:05:56,730 --> 00:05:57,440
It's a one bike, 

97
00:05:58,090 --> 00:05:59,480
typically of majoring bytes, 

98
00:06:00,220 --> 00:06:01,040
like memory. 

99
00:06:01,240 --> 00:06:02,790
You also typically major in bytes, 

100
00:06:02,800 --> 00:06:05,320
or maybe which is a bunch of bytes. 

101
00:06:06,950 --> 00:06:14,610
So more than that is not only we have individual bytes, 

102
00:06:14,620 --> 00:06:15,850
we have stream of bytes. 

103
00:06:16,250 --> 00:06:19,120
Remember, the stream of bytes is the same interface,

104
00:06:19,520 --> 00:06:21,520
the high level interface from the file systems. 

105
00:06:25,000 --> 00:06:28,350
Here, we are going to talk more about networking later in the lecture,

106
00:06:28,360 --> 00:06:30,550
but here we are talking about dcp connection. 

107
00:06:32,470 --> 00:06:35,560
Tcp stands for transport control protocol. 

108
00:06:36,700 --> 00:06:39,170
Do you know what is the other type of protocol? 

109
00:06:39,180 --> 00:06:40,290
Common protocol? 

110
00:06:42,820 --> 00:06:49,270
Besides dcp udp what does udp stands for? 

111
00:06:51,180 --> 00:06:57,320
And icmp acdp is a protocol, 

112
00:06:57,330 --> 00:06:59,840
but a a it's at a higher level. 

113
00:06:59,850 --> 00:07:07,420
It's on top of the tcp udp it's user data, ground protocol,

114
00:07:07,430 --> 00:07:09,420
not unified user data, 

115
00:07:09,950 --> 00:07:10,830
ground protocol. 

116
00:07:14,240 --> 00:07:17,710
And http and ftp are also protocols, 

117
00:07:17,720 --> 00:07:21,740
but they are the higher levels they are running on top of pcp again, 

118
00:07:21,750 --> 00:07:23,740
we are going to learn the network. 

119
00:07:23,750 --> 00:07:27,260
Software is organizing stacks a in a bunch of players. 

120
00:07:27,980 --> 00:07:33,140
Here we are going to talk about the transport layer and pcp and udp are

121
00:07:33,570 --> 00:07:35,290
at the transport layer. 

122
00:07:38,450 --> 00:07:39,890
So thanks for your answers. 

123
00:07:44,450 --> 00:07:49,670
So now we need to abstract the connection between two employees and b

124
00:07:50,920 --> 00:07:52,220
the way we are going to do that, 

125
00:07:52,230 --> 00:07:53,820
it should be, again, be very natural,

126
00:07:53,830 --> 00:07:55,820
because you are going to send a string of bytes. 

127
00:07:55,830 --> 00:07:57,700
You need to abstract like a cube, 

128
00:07:58,120 --> 00:08:00,280
write yaq because, 

129
00:08:02,500 --> 00:08:04,460
for instance, aa very simple example,

130
00:08:04,470 --> 00:08:09,690
what happened if the client sends faster than the server can receive

131
00:08:09,700 --> 00:08:10,410
or the server, 

132
00:08:10,420 --> 00:08:11,010
for some reason, 

133
00:08:11,020 --> 00:08:12,730
is doing something else. 

134
00:08:12,740 --> 00:08:16,660
And you cannot get the data sent to it right away. 

135
00:08:17,800 --> 00:08:20,400
This data is either is lost, 

136
00:08:20,410 --> 00:08:21,960
or if you don't want to lose it, 

137
00:08:21,970 --> 00:08:23,120
you need to buffer summer. 

138
00:08:23,620 --> 00:08:24,000
Right? 

139
00:08:24,370 --> 00:08:26,150
So you have to have a cure, right?

140
00:08:28,180 --> 00:08:31,630
You need to have boss on from the client to the servant, 

141
00:08:31,640 --> 00:08:33,270
from the server to the client, 

142
00:08:33,550 --> 00:08:36,460
because both of them, they are going to send data.

143
00:08:36,730 --> 00:08:38,960
One of them is going to send typically request, 

144
00:08:38,970 --> 00:08:40,960
and the other one replies to the request. 

145
00:08:43,890 --> 00:08:44,400
Now, 

146
00:08:45,270 --> 00:08:46,420
but what is the abstraction? 

147
00:08:46,430 --> 00:08:46,620
Right? 

148
00:08:46,630 --> 00:08:47,620
This is kind of, 

149
00:08:48,270 --> 00:08:51,670
how do we manipulate this kind of connection? 

150
00:08:52,500 --> 00:08:59,250
And remember that one of the big things about unix is that everything looks

151
00:08:59,260 --> 00:09:00,270
like a file, 

152
00:09:00,280 --> 00:09:00,610
right? 

153
00:09:00,620 --> 00:09:04,110
Or it's abstract with very similar abstractions. 

154
00:09:04,860 --> 00:09:06,690
The same is true for communication, 

155
00:09:06,700 --> 00:09:07,810
like we saw for pipes. 

156
00:09:07,820 --> 00:09:08,330
Last time. 

157
00:09:08,340 --> 00:09:08,610
Pipes. 

158
00:09:08,620 --> 00:09:12,510
Again, it's how you communicate between two processes on the same machine.

159
00:09:12,520 --> 00:09:14,710
Here are sockets about how you come, 

160
00:09:14,720 --> 00:09:19,030
how do two processes on different machines communicate with each other. 

161
00:09:20,270 --> 00:09:23,520
But they are very similar that the abstraction is very similar, 

162
00:09:23,910 --> 00:09:26,210
and is looking like a fire. 

163
00:09:26,220 --> 00:09:30,830
And this kind of abstraction for communication is called a socket. 

164
00:09:34,530 --> 00:09:35,440
This is how you do it. 

165
00:09:35,810 --> 00:09:36,160
Right? 

166
00:09:36,520 --> 00:09:38,010
If you want to send some data, 

167
00:09:38,990 --> 00:09:46,300
the processor sender is a client call or write system function call, 

168
00:09:46,720 --> 00:09:48,590
which passes a descriptor. 

169
00:09:48,600 --> 00:09:50,070
This is a soccer descriptor, 

170
00:09:50,080 --> 00:09:52,110
a buffer in the length of the buffer. 

171
00:09:52,530 --> 00:09:56,160
And the receiver or the server. 

172
00:09:56,750 --> 00:10:04,730
It's calling the read operation with a file descriptor and aa

173
00:10:04,740 --> 00:10:08,780
buffer where it can receive the data on the size of the buffer. 

174
00:10:09,260 --> 00:10:12,070
To make sure that if it's more data, 

175
00:10:12,080 --> 00:10:15,230
the operating system doesn't overflow that buffer. 

176
00:10:15,970 --> 00:10:16,330
Right? 

177
00:10:18,820 --> 00:10:21,900
The circuits is the endpoint of communication, right?

178
00:10:22,470 --> 00:10:27,680
And the cures are in between here somewhere along. 

179
00:10:27,690 --> 00:10:28,000
Actually, 

180
00:10:28,010 --> 00:10:30,380
there are many queues in the network that choosing

181
00:10:30,390 --> 00:10:33,880
the operating system queues as the routers along the path

182
00:10:33,890 --> 00:10:35,680
between the sender and the receiver. 

183
00:10:36,080 --> 00:10:36,490
It's pretty complicated. 

184
00:10:36,500 --> 00:10:38,330
We are going to learn more about that. 

185
00:10:38,650 --> 00:10:39,130
But in general, 

186
00:10:39,900 --> 00:10:43,940
the things to for you to know that are accused, there are cues,

187
00:10:44,610 --> 00:10:46,550
one of the simplest reasons, 

188
00:10:47,000 --> 00:10:50,140
one of simple motivation for cures is to, again,

189
00:10:50,150 --> 00:10:52,940
because the client or the two end points, 

190
00:10:54,530 --> 00:10:59,090
they don't have the same speed sending and receiving. 

191
00:10:59,500 --> 00:11:01,310
If you receive at a lower speed, 

192
00:11:01,320 --> 00:11:04,690
they need to buffer the data or that the receiver at that time, 

193
00:11:04,930 --> 00:11:06,710
maybe is doing something else. 

194
00:11:07,590 --> 00:11:10,100
And he cannot receive the data right away. 

195
00:11:14,750 --> 00:11:16,140
So now, 

196
00:11:16,390 --> 00:11:19,350
the circuits you have two sockets connected over the network, 

197
00:11:19,360 --> 00:11:20,390
one of the sender, 

198
00:11:20,400 --> 00:11:23,870
and on the receiver or one circuit for each endpoint. 

199
00:11:25,940 --> 00:11:26,420
Now, 

200
00:11:26,940 --> 00:11:28,150
the sockets, you remember,

201
00:11:28,400 --> 00:11:29,510
what do you do with sockets? 

202
00:11:29,520 --> 00:11:29,790
Right? 

203
00:11:29,800 --> 00:11:31,230
It's like, what is a typical?

204
00:11:31,240 --> 00:11:32,110
What is a pattern? 

205
00:11:33,370 --> 00:11:34,130
Programming pattern? 

206
00:11:34,480 --> 00:11:36,170
You open, you read,

207
00:11:38,550 --> 00:11:39,820
if you have a file descriptor, 

208
00:11:40,090 --> 00:11:41,240
like you open the file, a script,

209
00:11:41,250 --> 00:11:42,950
or you read right from the file, a script,

210
00:11:42,960 --> 00:11:44,280
and then you close the file list. 

211
00:11:45,200 --> 00:11:51,120
So we need to learn about how to open and close are also these sockets. 

212
00:11:53,570 --> 00:11:54,210
Let me see, 

213
00:11:55,560 --> 00:12:01,010
here is a question is a communication between two processes, 

214
00:12:01,020 --> 00:12:04,450
actually communication between the threat of the processes. 

215
00:12:08,010 --> 00:12:13,290
This is, so anyone wants to answer that question?

216
00:12:21,390 --> 00:12:25,290
The communication it's about is between two processes. 

217
00:12:25,700 --> 00:12:28,370
But remember, the process is a container.

218
00:12:29,120 --> 00:12:29,510
Right? 

219
00:12:29,520 --> 00:12:30,750
You have the other place, 

220
00:12:30,760 --> 00:12:31,830
other space, 

221
00:12:31,840 --> 00:12:33,470
and it provides a protection. 

222
00:12:34,630 --> 00:12:40,850
But the actual unit of execution or concurrency is a thread. 

223
00:12:41,600 --> 00:12:44,380
Each thread, each process is at least one thread.

224
00:12:45,260 --> 00:12:48,870
So it's correct to say that the processes communicate. 

225
00:12:49,690 --> 00:12:53,560
But it's also say it's correct to say that always to stress communicate, 

226
00:12:53,570 --> 00:12:58,020
because the things which are going to run the code inside this process are

227
00:12:58,030 --> 00:12:58,540
the threads. 

228
00:13:01,380 --> 00:13:03,830
Typically, when you have one thread and one process,

229
00:13:04,850 --> 00:13:05,830
you just interchangeable. 

230
00:13:05,840 --> 00:13:08,430
You can use process or thread, 

231
00:13:08,440 --> 00:13:12,650
but hopefully that answers the question. 

232
00:13:14,450 --> 00:13:15,010
Okay? 

233
00:13:20,660 --> 00:13:24,690
It is a hidden abstraction for socket io what we are going to talk about here, 

234
00:13:24,700 --> 00:13:27,210
it's pretty much, 

235
00:13:27,220 --> 00:13:29,610
at least in the next couple of slides about, 

236
00:13:30,090 --> 00:13:33,820
actually, is how you are going to use a socket interface.

237
00:13:34,850 --> 00:13:35,230
Right? 

238
00:13:37,540 --> 00:13:38,290
So

239
00:13:46,450 --> 00:13:50,120
like we discuss the circuit is an abstraction for on end point of the network. 

240
00:13:50,130 --> 00:13:51,570
If you have do you have, in general,

241
00:13:51,580 --> 00:13:56,430
you have two processes to end points communicate with each other. 

242
00:13:56,440 --> 00:13:58,630
Each of them is going to have a socket. 

243
00:13:58,640 --> 00:14:03,950
And somehow you need to connect these two sockets to each other. 

244
00:14:04,850 --> 00:14:06,560
If you want to establish a connection, 

245
00:14:09,220 --> 00:14:16,640
it was introduced first in berkeley standard distribution version 4.2. 

246
00:14:16,950 --> 00:14:19,080
That is one of the biggest contributions

247
00:14:19,090 --> 00:14:22,950
of actually open source contribution of berkeley, 

248
00:14:23,620 --> 00:14:25,960
because has huge impact. 

249
00:14:26,590 --> 00:14:35,610
And the story here is that then the runners like during those days, 

250
00:14:36,890 --> 00:14:42,520
you distribute these operating systems through tapes. 

251
00:14:43,960 --> 00:14:50,730
And the things here is that it's about how you are going to. 

252
00:14:52,220 --> 00:14:56,710
Then there are people waiting in line for the tapes to be copied. 

253
00:14:57,230 --> 00:14:59,780
Therefore, to take it back to their companies,

254
00:15:00,890 --> 00:15:03,110
to install the new version of unix, 

255
00:15:04,140 --> 00:15:08,440
to which with this kind of dcpipa code in it. 

256
00:15:10,900 --> 00:15:13,750
A this is a beautiful thing is that this is the local, again,

257
00:15:13,760 --> 00:15:19,590
it's like it's the abstraction for a lot of kind of networks, 

258
00:15:19,600 --> 00:15:23,910
not networks type of when I say a lot of kind of networks i'm talking about, 

259
00:15:24,850 --> 00:15:29,860
all boss about how how they are physically implemented. 

260
00:15:29,870 --> 00:15:31,100
They are over fiber, 

261
00:15:31,110 --> 00:15:34,200
they are over satellite cellular networks. 

262
00:15:35,130 --> 00:15:38,960
It abstracts away what kind of your application on your iphone. 

263
00:15:38,970 --> 00:15:42,750
It doesn't knew, it doesn't know that you are on a solar network, right?

264
00:15:43,270 --> 00:15:45,060
Or you are a wifi, right?

265
00:15:45,070 --> 00:15:45,860
Doesn't know. 

266
00:15:46,030 --> 00:15:47,900
That means abstraction in that case. 

267
00:15:49,290 --> 00:15:52,640
Or there are also about how packets are rooted in the network

268
00:15:52,650 --> 00:15:53,760
and many other things. 

269
00:15:54,120 --> 00:15:57,060
Lower level of the network stack resource, 

270
00:15:57,490 --> 00:16:02,960
apple dog and ipx and the great thing about this tcpip it becomes an effect

271
00:16:02,970 --> 00:16:04,950
of standard of how

272
00:16:06,250 --> 00:16:09,500
nodes communicate over the internet. 

273
00:16:10,240 --> 00:16:10,700
Right? 

274
00:16:11,050 --> 00:16:13,430
This is what enables the internet at the end of the day. 

275
00:16:13,970 --> 00:16:15,880
And again, when I say the vector standard,

276
00:16:15,890 --> 00:16:17,080
I say because it doesn't, 

277
00:16:17,330 --> 00:16:18,360
it was a piece of gold. 

278
00:16:18,370 --> 00:16:21,750
It was not a standard body to create it, 

279
00:16:21,760 --> 00:16:25,190
but it's a standard now because everyone is using it. 

280
00:16:25,760 --> 00:16:30,260
If you don't use the cpip you cannot talk with other as a noise in the internet. 

281
00:16:31,160 --> 00:16:31,580
Okay? 

282
00:16:34,670 --> 00:16:35,420
The sockets, 

283
00:16:36,550 --> 00:16:37,380
you'll see, 

284
00:16:37,950 --> 00:16:39,980
it's a little bit more elaborated interface. 

285
00:16:40,270 --> 00:16:42,370
But at the end of the day, you need to open,

286
00:16:42,380 --> 00:16:43,630
you need to create a socket. 

287
00:16:43,640 --> 00:16:46,360
You can close a socket in between you read and read and write. 

288
00:16:46,670 --> 00:16:46,970
Now, 

289
00:16:48,100 --> 00:16:50,070
Everything is a file descriptor, 

290
00:16:50,530 --> 00:16:52,800
like we discussed, but loss also, if you remember,

291
00:16:52,810 --> 00:16:53,880
like we discussed, 

292
00:16:54,330 --> 00:16:58,340
although you have every everything is file escaped out, 

293
00:16:58,950 --> 00:17:01,010
you don't have for each device. 

294
00:17:01,450 --> 00:17:06,280
You don't have all the comments, 

295
00:17:06,290 --> 00:17:07,880
like you have four file systems, right?

296
00:17:08,170 --> 00:17:08,920
For right? 

297
00:17:09,100 --> 00:17:11,290
For five system, you remember you have a sick, right?

298
00:17:12,030 --> 00:17:18,310
You can reposition the pointer from what you read in a particular file. 

299
00:17:18,320 --> 00:17:22,870
I can lc and I can read from the 100 bytes in the file, right?

300
00:17:23,090 --> 00:17:23,640
Is still, 

301
00:17:24,930 --> 00:17:27,760
the abstraction is still aa stream of bites, right?

302
00:17:27,770 --> 00:17:29,120
But I can reposition. 

303
00:17:29,440 --> 00:17:29,450
Here. 

304
00:17:29,460 --> 00:17:30,550
You cannot have sick, right?

305
00:17:30,560 --> 00:17:33,540
You send up, have you send the bias and you receive that?

306
00:17:33,550 --> 00:17:35,770
Or in the same order? 

307
00:17:36,110 --> 00:17:37,860
It is kind of strange to be out. 

308
00:17:37,870 --> 00:17:40,020
I want to read the 100 bytes, right?

309
00:17:40,030 --> 00:17:45,780
Maybe that 100 bytes is not even your computer haven't received it. 

310
00:17:46,490 --> 00:17:50,370
So you don't have lc your abstraction is just a cube right? 

311
00:17:50,710 --> 00:17:51,030
In. 

312
00:17:51,040 --> 00:17:51,690
First out, 

313
00:17:52,250 --> 00:17:54,670
you always get the but data in the order. 

314
00:17:54,680 --> 00:18:02,410
And if you sent the other thing what happens is

315
00:18:02,420 --> 00:18:07,390
under the hood is abstracted away is that you don't over the network, 

316
00:18:07,400 --> 00:18:09,390
you don't send us small bikes, right?

317
00:18:09,780 --> 00:18:13,560
You actually put it in packages in your package it. 

318
00:18:15,940 --> 00:18:17,410
You divide the data, 

319
00:18:17,420 --> 00:18:19,410
you have to send your package it in a pack. 

320
00:18:20,100 --> 00:18:21,830
Each packet will have addresses, right?

321
00:18:21,840 --> 00:18:25,890
Because it depends on this tells another where is the packet should be delivered. 

322
00:18:27,120 --> 00:18:27,450
Right? 

323
00:18:27,800 --> 00:18:34,240
It's like you put amazon is using trucks and each truck now says an address, 

324
00:18:34,890 --> 00:18:37,040
the driver where it should deliver the packages. 

325
00:18:37,520 --> 00:18:37,870
Right? 

326
00:18:37,880 --> 00:18:38,750
Something like that. 

327
00:18:40,060 --> 00:18:45,490
The many need also some kind of like rbc kind of facility to, 

328
00:18:45,910 --> 00:18:47,400
for instance, 

329
00:18:49,340 --> 00:18:51,600
because the data format, 

330
00:18:51,810 --> 00:18:53,450
which is understand by the receiver, 

331
00:18:53,460 --> 00:18:55,850
is not as the same as the data format, 

332
00:18:55,860 --> 00:18:57,210
which is understood, 

333
00:18:57,370 --> 00:18:59,050
understand by the senate. 

334
00:18:59,520 --> 00:18:59,840
Right? 

335
00:19:00,130 --> 00:19:02,750
And you'll talk about this is big indian, 

336
00:19:02,760 --> 00:19:06,160
little indian kind of different formats, 

337
00:19:06,170 --> 00:19:08,600
different for different processors. 

338
00:19:12,250 --> 00:19:15,520
This is a very simple example echo server. 

339
00:19:15,530 --> 00:19:17,260
Hello, world echo mean,

340
00:19:17,670 --> 00:19:20,210
I am sending is a message to the server. 

341
00:19:20,220 --> 00:19:22,410
The server is going to send me the message back. 

342
00:19:22,780 --> 00:19:23,130
Right? 

343
00:19:25,260 --> 00:19:27,780
So here is how things that are happening, right?

344
00:19:27,790 --> 00:19:30,300
You have a client on the seller on the left hand side, 

345
00:19:30,310 --> 00:19:31,560
stubborn on the right hand side. 

346
00:19:34,410 --> 00:19:39,680
You have with this also the data points at the time here goes from top

347
00:19:39,690 --> 00:19:40,520
to the bottom. 

348
00:19:41,040 --> 00:19:48,880
You have this kind of this green rectangles shows about the

349
00:19:48,890 --> 00:19:52,330
life lifetime of socket, 

350
00:19:52,690 --> 00:19:54,920
both on the client side and the several side. 

351
00:19:55,770 --> 00:19:58,160
Soccer starts with being open and close, right?

352
00:19:58,400 --> 00:19:58,790
Okay? 

353
00:20:00,990 --> 00:20:03,480
Once you open and close the socket, 

354
00:20:03,770 --> 00:20:06,190
the server should be ready to receive data. 

355
00:20:07,730 --> 00:20:09,800
What the server is doing then, well,

356
00:20:09,810 --> 00:20:11,920
is calling a a a read, 

357
00:20:11,930 --> 00:20:19,260
the read system command on the corresponding socket descriptor of that

358
00:20:19,270 --> 00:20:25,520
connection and provide a buffer where the operating system should pass

359
00:20:25,530 --> 00:20:26,720
the data it receives. 

360
00:20:27,280 --> 00:20:27,610
Okay? 

361
00:20:29,170 --> 00:20:34,350
The clients say it do f gets to get from the standard input, 

362
00:20:34,360 --> 00:20:37,050
from you can type the message. 

363
00:20:37,510 --> 00:20:39,660
And we want to send that message, right?

364
00:20:40,630 --> 00:20:43,350
How you send a message like we discussed, you do your color,

365
00:20:43,890 --> 00:20:44,280
right? 

366
00:20:44,640 --> 00:20:50,290
And you pass the socket file descriptors on from the come from the same communication. 

367
00:20:52,270 --> 00:20:55,460
And on the center side of the client side, 

368
00:20:55,920 --> 00:20:57,380
and you pass a buffer, 

369
00:20:57,390 --> 00:21:00,830
you want to send out right now. 

370
00:21:03,550 --> 00:21:04,900
And then you want to read back. 

371
00:21:05,110 --> 00:21:05,260
Right? 

372
00:21:05,270 --> 00:21:07,580
Not is that both the reads are blocking. 

373
00:21:07,590 --> 00:21:08,740
In this particular case, 

374
00:21:09,330 --> 00:21:11,970
there are variants of fields calls, 

375
00:21:11,980 --> 00:21:13,210
which are not blocking. 

376
00:21:13,530 --> 00:21:16,030
But here we ask, by default, we assume is blocking.

377
00:21:16,040 --> 00:21:18,550
We need to you block until you get some data. 

378
00:21:19,020 --> 00:21:19,370
Right? 

379
00:21:21,380 --> 00:21:23,780
The client writes as a message, 

380
00:21:23,790 --> 00:21:26,820
and then ways to get some a reply back, 

381
00:21:27,320 --> 00:21:29,710
that message may be chopped in different packets. 

382
00:21:29,720 --> 00:21:31,810
The packets are sent over the internet. 

383
00:21:32,000 --> 00:21:35,160
Actually, each packet can can take a different path.

384
00:21:36,010 --> 00:21:39,400
And the set of the server gets the data. 

385
00:21:39,410 --> 00:21:42,680
Maybe rights show it on the screen, 

386
00:21:43,090 --> 00:21:46,270
is doing some print types or something like that. 

387
00:21:46,670 --> 00:21:50,670
And then you write it back to the socket. 

388
00:21:50,680 --> 00:21:54,600
So you want to send it back to as a client. 

389
00:21:55,100 --> 00:21:56,850
And the client, as I read,

390
00:21:58,060 --> 00:21:59,970
it's, again, I was writing into it.

391
00:21:59,980 --> 00:22:03,760
A call is going to get the message back and is going to print on the screen. 

392
00:22:04,000 --> 00:22:07,130
Again, the same as we are talking here about an echo server.

393
00:22:07,870 --> 00:22:08,150
Right? 

394
00:22:11,630 --> 00:22:11,740
Cooperation. 

395
00:22:13,830 --> 00:22:15,780
Let me see if there's another question. 

396
00:22:18,680 --> 00:22:20,790
Rpc what it stands, 

397
00:22:21,040 --> 00:22:22,270
danny asked about, 

398
00:22:22,280 --> 00:22:24,270
what does rpc stands for? 

399
00:22:24,440 --> 00:22:27,270
Rpc stands for remote procedure call. 

400
00:22:27,740 --> 00:22:28,960
This is a higher level. 

401
00:22:28,970 --> 00:22:30,760
And again, we'll learn about it.

402
00:22:30,770 --> 00:22:35,200
And we just mentioned a little bit about it in a previous lecture. 

403
00:22:35,790 --> 00:22:39,960
But this is about think about you want to call a function. 

404
00:22:40,340 --> 00:22:41,350
And that function, 

405
00:22:41,360 --> 00:22:43,170
instead of executing locally, 

406
00:22:43,180 --> 00:22:45,390
it's executing on a different machine. 

407
00:22:45,720 --> 00:22:48,170
And you want to just set the syntax. 

408
00:22:48,530 --> 00:22:49,880
And ideally the semantics, 

409
00:22:49,890 --> 00:22:53,060
although we learn that's not really possible to be

410
00:22:53,070 --> 00:22:57,220
very similar with invoking a local function call you want, 

411
00:22:57,670 --> 00:22:59,520
how you invoke a local function, 

412
00:22:59,530 --> 00:23:00,760
aa remote function, 

413
00:23:01,120 --> 00:23:05,140
to look very similar with how you invoke a local function. 

414
00:23:05,790 --> 00:23:10,980
So rpc tries to bridge that gap and make them very similar. 

415
00:23:14,270 --> 00:23:14,790
Okay. 

416
00:23:15,920 --> 00:23:20,900
That's we have a bunch of code here. 

417
00:23:21,380 --> 00:23:24,470
I'm not going to go through every line of code. 

418
00:23:24,790 --> 00:23:26,020
We don't have time. 

419
00:23:27,670 --> 00:23:31,670
But we'll try to cover as much as possible, 

420
00:23:31,840 --> 00:23:34,470
but i'm saying that if i'm not going, 

421
00:23:34,480 --> 00:23:36,510
and maybe you have questions, please ask me.

422
00:23:36,850 --> 00:23:38,750
But it's not my intention to go through each line. 

423
00:23:39,860 --> 00:23:42,250
This is about for the previous examples, 

424
00:23:42,260 --> 00:23:44,130
how the code look like, right?

425
00:23:44,390 --> 00:23:46,290
This is typically how the code look like, right?

426
00:23:46,300 --> 00:23:50,510
It's like this is the cloud client. 

427
00:23:50,850 --> 00:23:53,000
You are in the y loop. 

428
00:23:53,010 --> 00:23:56,720
You get some message typed by the user. 

429
00:23:57,000 --> 00:23:58,310
You send it to the server, 

430
00:23:58,320 --> 00:24:00,290
the server send it back and you print it. 

431
00:24:00,300 --> 00:24:00,510
Right? 

432
00:24:00,520 --> 00:24:01,610
This is what you do. 

433
00:24:01,620 --> 00:24:03,650
You get them as you get, 

434
00:24:03,920 --> 00:24:05,960
as a message you write to the socket. 

435
00:24:07,000 --> 00:24:08,200
You read it back, 

436
00:24:08,210 --> 00:24:11,240
and you write to the you print it out. 

437
00:24:11,780 --> 00:24:13,100
Before you read it back, 

438
00:24:13,110 --> 00:24:17,350
you clear the buffer so that it's not the message. 

439
00:24:17,360 --> 00:24:19,150
You just send it just in the buffer. 

440
00:24:19,610 --> 00:24:23,030
You clearly to know that what you have in the buffer is what you receive

441
00:24:24,060 --> 00:24:25,110
from the setup. 

442
00:24:26,230 --> 00:24:27,970
The server is very similar. 

443
00:24:28,680 --> 00:24:29,370
You read. 

444
00:24:33,910 --> 00:24:38,820
Then I think it's a mistake in this code. 

445
00:24:38,830 --> 00:24:41,580
They should be if land less than zero. 

446
00:24:47,600 --> 00:24:49,390
So this is how much you read. 

447
00:24:50,820 --> 00:24:52,610
If land is less than zero, 

448
00:24:52,850 --> 00:24:53,880
this means that it's an error. 

449
00:24:55,500 --> 00:24:57,050
If land is greater than zero. 

450
00:24:58,360 --> 00:25:01,870
So this land actually let me just try to, 

451
00:25:08,420 --> 00:25:08,970
okay, 

452
00:25:10,210 --> 00:25:13,400
you read it is a server reads data from the socket. 

453
00:25:14,140 --> 00:25:16,490
If it's greater less than zero, it's an error.

454
00:25:16,500 --> 00:25:18,490
You return greater than zero. 

455
00:25:18,980 --> 00:25:24,820
You print it to the terminal, 

456
00:25:25,280 --> 00:25:29,390
and then you send it back to the client. 

457
00:25:29,790 --> 00:25:30,030
Right? 

458
00:25:30,040 --> 00:25:33,250
You echo what you got from the client. 

459
00:25:34,800 --> 00:25:39,770
This is a sand from the client and the corresponding received from the server. 

460
00:25:40,320 --> 00:25:43,030
This is a corresponding send from the sender, 

461
00:25:43,040 --> 00:25:46,430
from the server as a corresponding received from the client. 

462
00:25:48,890 --> 00:25:49,450
Very simple. 

463
00:25:54,400 --> 00:25:57,030
So now we are making some assumptions, 

464
00:25:57,040 --> 00:25:59,350
which are actually, this is,

465
00:26:00,270 --> 00:26:01,040
in some sense, 

466
00:26:01,050 --> 00:26:04,930
the assumption we are making here is about what is the networking field about, 

467
00:26:04,940 --> 00:26:12,990
is about how to ensure that these assumptions are true, are standing.

468
00:26:15,750 --> 00:26:21,460
So I know the assumption we make is that the data when you is not lost, 

469
00:26:21,750 --> 00:26:22,250
right? 

470
00:26:22,260 --> 00:26:23,610
You send it over the network, 

471
00:26:23,850 --> 00:26:25,740
and the receiver gets all the data. 

472
00:26:26,250 --> 00:26:27,330
There's a scent of sand. 

473
00:26:31,910 --> 00:26:33,680
It's like a local pipe, right?

474
00:26:33,690 --> 00:26:38,360
But this is difficult because this is internet is probably the biggest

475
00:26:38,370 --> 00:26:39,600
and the most complex, 

476
00:26:39,920 --> 00:26:42,480
a system that humans build in some sense. 

477
00:26:42,810 --> 00:26:46,370
And there are many things can go wrong in between. 

478
00:26:46,740 --> 00:26:48,690
So making, 

479
00:26:49,100 --> 00:26:52,890
providing to the applications and no matter what happens under the hood is

480
00:26:52,900 --> 00:26:53,490
a network. 

481
00:26:53,940 --> 00:26:58,840
The data which is sent by some of the client gets to the server

482
00:26:59,140 --> 00:27:03,030
without being lost is not easy fit. 

483
00:27:03,940 --> 00:27:08,040
The other thing you have is that it's, again, remember,

484
00:27:08,050 --> 00:27:09,960
this is the abstraction. 

485
00:27:09,970 --> 00:27:10,920
It's a stream. 

486
00:27:10,930 --> 00:27:12,840
The radar abstraction is a stream. 

487
00:27:12,900 --> 00:27:17,670
So this means that the water in which you send the data is the order

488
00:27:17,680 --> 00:27:20,370
in which the receiver gets the rape. 

489
00:27:23,140 --> 00:27:29,270
If you write x and write y then this receiver reads first x and then gets five. 

490
00:27:29,600 --> 00:27:29,950
Right? 

491
00:27:32,640 --> 00:27:34,820
When you ask for a read, 

492
00:27:35,220 --> 00:27:37,280
you get what it's ever at that time. 

493
00:27:40,010 --> 00:27:41,020
So basically say, 

494
00:27:42,230 --> 00:27:43,840
if you write, for instance,

495
00:27:43,850 --> 00:27:45,280
so this is very important. 

496
00:27:45,660 --> 00:27:46,820
So if you write, 

497
00:27:47,950 --> 00:27:49,680
say, 1,000 bytes,

498
00:27:50,920 --> 00:27:53,160
actually, the receiver can get,

499
00:27:53,460 --> 00:27:57,930
he can get it in a bunch of 100 bytes. 

500
00:27:58,220 --> 00:27:58,300
Right? 

501
00:27:58,310 --> 00:28:00,640
So if you get every time on hundred bytes, 

502
00:28:00,650 --> 00:28:04,280
you need to read10 times to get the entire content. 

503
00:28:04,970 --> 00:28:07,370
That if nothing, 

504
00:28:07,700 --> 00:28:11,730
it's arrived after is on the connection, 

505
00:28:12,260 --> 00:28:13,940
you are blocking like we discussed. 

506
00:28:14,710 --> 00:28:16,740
And there's a semantics, 

507
00:28:16,750 --> 00:28:18,060
pretty much like pipes. 

508
00:28:18,390 --> 00:28:20,940
But now it's over another instead of a single note. 

509
00:28:23,220 --> 00:28:25,850
Now, so we had a single getting more interesting.

510
00:28:26,780 --> 00:28:29,650
It's about how do you create these sockets, right?

511
00:28:30,420 --> 00:28:35,020
And basically, it's you need to,

512
00:28:36,880 --> 00:28:39,690
if you think about with files is simple, right?

513
00:28:39,700 --> 00:28:40,370
With files, 

514
00:28:40,380 --> 00:28:45,540
you have a name and of the file and the open that the file is

515
00:28:45,550 --> 00:28:46,700
that particular name. 

516
00:28:46,710 --> 00:28:51,300
And that's independent of the processes so easy tonight, right?

517
00:28:52,890 --> 00:28:53,830
How do you do in pipes? 

518
00:28:53,840 --> 00:28:54,430
Do you remember? 

519
00:28:54,440 --> 00:28:55,310
How do you do in pipes? 

520
00:28:55,320 --> 00:28:55,950
How do you do? 

521
00:28:55,960 --> 00:28:57,350
How does, for instance,

522
00:28:57,360 --> 00:29:04,250
when ii guess it's the slide is already saying. 

523
00:29:04,600 --> 00:29:08,590
But how do you do it in with pipes against the pipes? 

524
00:29:08,850 --> 00:29:10,520
Processes runs on the same machine. 

525
00:29:10,850 --> 00:29:14,640
If you are going to communicate between the parent and the child, 

526
00:29:15,560 --> 00:29:16,510
then it's easier, right?

527
00:29:16,520 --> 00:29:18,630
Because a child, remember,

528
00:29:19,040 --> 00:29:21,990
inherits all the file descriptors of the parrot. 

529
00:29:22,560 --> 00:29:23,720
So already, now,

530
00:29:23,730 --> 00:29:25,920
the file descriptors corresponding to a pie. 

531
00:29:27,900 --> 00:29:29,170
So now, 

532
00:29:31,110 --> 00:29:32,110
with the sockets, 

533
00:29:32,350 --> 00:29:35,070
there are two things, one,

534
00:29:35,830 --> 00:29:36,730
and like a pipe. 

535
00:29:36,740 --> 00:29:39,830
If you remember this one way communication with sockets, 

536
00:29:39,840 --> 00:29:41,380
you have two way communication. 

537
00:29:42,270 --> 00:29:42,650
Right? 

538
00:29:42,930 --> 00:29:47,480
You need both the sender and the receiver being able to send data to each other. 

539
00:29:52,130 --> 00:29:53,400
You'll see a little bit. 

540
00:29:53,410 --> 00:29:54,000
Why is that? 

541
00:29:56,900 --> 00:29:59,180
And the processes are separate, 

542
00:30:00,200 --> 00:30:00,440
right? 

543
00:30:00,450 --> 00:30:01,800
Are on different machines. 

544
00:30:02,450 --> 00:30:04,780
So they cannot communicate otherwise. 

545
00:30:04,790 --> 00:30:06,860
So how can they agree? 

546
00:30:07,150 --> 00:30:13,020
Or how do I know to what other process I need to communicate? 

547
00:30:13,280 --> 00:30:18,790
That that's kind of is a crux of the problem. 

548
00:30:18,800 --> 00:30:19,710
It's anemic. 

549
00:30:21,470 --> 00:30:25,460
How do independent to independent programs know how to talk with each other? 

550
00:30:27,640 --> 00:30:31,590
Again, we discuss a little bit about at the beginning of the class.

551
00:30:31,860 --> 00:30:33,500
But in the internet, 

552
00:30:33,510 --> 00:30:36,410
the way you are going to name, 

553
00:30:37,310 --> 00:30:41,460
it's basically using these dns names, right?

554
00:30:41,470 --> 00:30:42,860
And this is an example. 

555
00:30:43,050 --> 00:30:44,770
Again, we are going to have a lecture.

556
00:30:44,780 --> 00:30:46,610
We are going to talk more about that, 

557
00:30:46,620 --> 00:30:49,410
but for now is ww dot pcs not very clear, 

558
00:30:49,420 --> 00:30:52,750
dot edo you have a domain name medium, 

559
00:30:52,760 --> 00:30:54,630
and then it's a top domain, 

560
00:30:54,640 --> 00:30:56,620
and then berkeley the institutions. 

561
00:30:56,630 --> 00:30:57,900
And it's a department. 

562
00:30:57,910 --> 00:30:59,500
And this is a protocol. 

563
00:31:00,600 --> 00:31:02,070
This application level protocol. 

564
00:31:02,560 --> 00:31:07,410
Again, dcp and ipadcp and udp are transfer level protocols.

565
00:31:09,870 --> 00:31:11,230
But then under the hood, 

566
00:31:12,310 --> 00:31:13,350
at the transport level, 

567
00:31:13,360 --> 00:31:18,230
this is what application of this is what you can type in the browser, 

568
00:31:18,810 --> 00:31:21,270
ww dot google dot com. 

569
00:31:22,520 --> 00:31:22,850
Right? 

570
00:31:23,560 --> 00:31:24,850
This is what application understands. 

571
00:31:25,230 --> 00:31:26,610
The transfer layer, 

572
00:31:27,310 --> 00:31:29,340
the tcp doesn't understand this. 

573
00:31:29,350 --> 00:31:31,660
What understands are ip addresses. 

574
00:31:32,610 --> 00:31:33,610
There is, a way,

575
00:31:33,620 --> 00:31:38,220
is dns name resolution by which is dns names or the horse names

576
00:31:38,230 --> 00:31:40,960
are translated into these ip addresses. 

577
00:31:42,920 --> 00:31:45,250
But when we are going to operate at this level, 

578
00:31:45,260 --> 00:31:47,850
typically we are going to operate with the ip addresses. 

579
00:31:50,010 --> 00:31:50,920
An ip address. 

580
00:31:50,930 --> 00:31:52,200
It used to have several beats. 

581
00:31:52,210 --> 00:31:54,800
You still have in many parts of the world. 

582
00:31:55,720 --> 00:31:57,030
It's still dominant. 

583
00:31:57,330 --> 00:32:03,890
And this is ip ip before it's ipeip stands for internet protocol. 

584
00:32:04,120 --> 00:32:05,550
V four version four, 

585
00:32:05,560 --> 00:32:06,670
32 beats. 

586
00:32:06,680 --> 00:32:08,590
This was from the beginning of the internet. 

587
00:32:09,280 --> 00:32:12,630
Then we ran out of addresses because ipp four, 

588
00:32:12,930 --> 00:32:16,050
you have you have several to be, 

589
00:32:16,060 --> 00:32:18,130
so you can have only 4 billion addresses. 

590
00:32:18,910 --> 00:32:20,860
Now we have ipv six, 

591
00:32:20,870 --> 00:32:26,500
and it took probably 20 or more years to start and to kind of get

592
00:32:26,690 --> 00:32:29,860
up to speed with the transition from ipv four and ipv six. 

593
00:32:29,870 --> 00:32:32,060
And ivv six has 128 bits. 

594
00:32:32,320 --> 00:32:33,090
A lot of this, 

595
00:32:33,820 --> 00:32:35,250
we won't run out of them. 

596
00:32:37,350 --> 00:32:41,040
Now, in addition to the addresses,

597
00:32:41,310 --> 00:32:43,190
you have what are called poor numbers. 

598
00:32:46,550 --> 00:32:50,940
And I probably there are people here who took networking. 

599
00:32:51,320 --> 00:32:55,290
So can anyone answer what why do we need a port number? 

600
00:32:55,300 --> 00:32:57,230
What is the port number? 

601
00:33:08,800 --> 00:33:10,000
Allison, very good.

602
00:33:10,010 --> 00:33:14,330
So multiple services run on the same cost host. 

603
00:33:15,370 --> 00:33:16,530
So it's very simple. 

604
00:33:16,910 --> 00:33:20,000
These ip addresses name a host, 

605
00:33:20,340 --> 00:33:21,340
name a computer, 

606
00:33:21,350 --> 00:33:22,380
name a machine. 

607
00:33:23,230 --> 00:33:25,470
But a machine, like, we know,

608
00:33:25,480 --> 00:33:26,730
runs multiple processes. 

609
00:33:27,360 --> 00:33:31,690
And your code to receive data runs in one of this process. 

610
00:33:33,680 --> 00:33:36,400
So you don't need only to identify a host. 

611
00:33:37,250 --> 00:33:41,090
You also need to identify the process to which you are going to send. 

612
00:33:42,180 --> 00:33:43,770
And from the network perspective, 

613
00:33:43,780 --> 00:33:50,190
that process is identify by a port number is not identified. 

614
00:33:50,200 --> 00:33:54,210
It is not by outside as a computer, 

615
00:33:54,220 --> 00:34:01,890
is not identified by the process id it's by these four numbers for numbers

616
00:34:01,900 --> 00:34:03,250
as to 16 bits. 

617
00:34:05,110 --> 00:34:11,370
The first beats the first 1,023 ports are well known, 

618
00:34:11,950 --> 00:34:14,840
meaning that they are well known services. 

619
00:34:15,170 --> 00:34:15,670
What does it mean? 

620
00:34:15,680 --> 00:34:19,810
80 for 80 is typically for a web web browser. 

621
00:34:19,820 --> 00:34:25,040
So if you've got 80s and it's typically a web browser, 

622
00:34:25,410 --> 00:34:30,980
listen on the port 80 to get all the packets, 

623
00:34:31,290 --> 00:34:33,520
which are coming to that host. 

624
00:34:34,150 --> 00:34:37,500
They say they are looking for part eight. 

625
00:34:45,920 --> 00:34:46,370
Now, 

626
00:34:47,980 --> 00:34:50,830
when you have aa server, right?

627
00:34:51,680 --> 00:34:54,650
And remember what we have this figure early on, 

628
00:34:54,990 --> 00:34:57,780
we have multiple clients talking with a server. 

629
00:34:58,330 --> 00:34:58,800
Okay. 

630
00:34:59,190 --> 00:35:01,610
How does the server can talk with multiple clients? 

631
00:35:02,330 --> 00:35:05,220
How does it now which packets come from each client? 

632
00:35:06,670 --> 00:35:07,370
That's a problem. 

633
00:35:08,040 --> 00:35:08,400
Right? 

634
00:35:12,630 --> 00:35:17,070
The way we take care of that is very simple. 

635
00:35:18,080 --> 00:35:21,530
The server doesn't communicate with each client. 

636
00:35:21,540 --> 00:35:26,020
The server only ways from each client to connect. 

637
00:35:26,030 --> 00:35:27,620
And when it connects, 

638
00:35:28,610 --> 00:35:32,090
the server creates another process, 

639
00:35:33,170 --> 00:35:34,540
which communicates with a client. 

640
00:35:36,180 --> 00:35:36,700
Okay? 

641
00:35:38,030 --> 00:35:39,260
That's kind of the idea. 

642
00:35:39,270 --> 00:35:41,260
We are going to reiterate on this idea, 

643
00:35:41,350 --> 00:35:43,700
hopefully will be clear by the end of this lecture. 

644
00:35:44,140 --> 00:35:45,780
But that's what happened. 

645
00:35:46,010 --> 00:35:46,590
That's about. 

646
00:35:47,570 --> 00:35:52,300
So the client created socket and connect the setup request. 

647
00:35:52,550 --> 00:35:55,100
But again, it doesn't send just a message, a request.

648
00:35:57,080 --> 00:35:58,590
I have the request, give me a reply.

649
00:35:59,100 --> 00:36:03,660
The client sends a connection request to create a connection first. 

650
00:36:04,060 --> 00:36:06,010
And only after he has a connection, 

651
00:36:06,190 --> 00:36:07,660
you can send, sorry,

652
00:36:07,670 --> 00:36:14,020
you are going to send the data and your request. 

653
00:36:14,030 --> 00:36:15,240
The server listens. 

654
00:36:15,250 --> 00:36:18,540
It's in the state of always listen for new connections, 

655
00:36:19,270 --> 00:36:20,550
accept the connection. 

656
00:36:21,110 --> 00:36:26,170
And now it creates a a new con, 

657
00:36:26,180 --> 00:36:27,290
aa new socket. 

658
00:36:28,960 --> 00:36:31,150
This socket can be in a different process, 

659
00:36:31,160 --> 00:36:35,680
or can be in in a different thread in the same process. 

660
00:36:35,690 --> 00:36:36,310
We'll see that. 

661
00:36:38,430 --> 00:36:42,100
Now you have a connection socket for this client. 

662
00:36:42,520 --> 00:36:46,030
Now you are going to send information about this connection socket, 

663
00:36:46,040 --> 00:36:46,990
and you established. 

664
00:36:47,680 --> 00:36:56,280
Now, a connection between the client socket and socket on the server side,

665
00:36:56,290 --> 00:36:58,200
which is special for that client. 

666
00:37:01,390 --> 00:37:02,740
This is what happens, right?

667
00:37:06,500 --> 00:37:09,330
Each connection, this yellow thing here, right?

668
00:37:10,850 --> 00:37:12,530
Between these two green bubbles, 

669
00:37:13,130 --> 00:37:16,230
it's identified by five sinks, 

670
00:37:17,360 --> 00:37:18,650
source ip address, 

671
00:37:19,040 --> 00:37:20,830
destination ip address, right?

672
00:37:22,230 --> 00:37:25,380
These are the source and the destination. 

673
00:37:25,390 --> 00:37:26,500
When you send a packet, 

674
00:37:27,400 --> 00:37:29,230
you have the source, 

675
00:37:29,240 --> 00:37:31,110
ip address of machine, 

676
00:37:31,440 --> 00:37:35,030
the ip address of the machine who a sends a packet, 

677
00:37:36,640 --> 00:37:40,950
the destination ip the ip address of the receiver machine, 

678
00:37:41,900 --> 00:37:48,330
then you have the poor numbers is a poor numbers of the process who sent

679
00:37:48,340 --> 00:37:49,090
the data

680
00:37:49,590 --> 00:37:52,540
and send the destination port number. 

681
00:37:52,550 --> 00:37:56,340
The rest is the port number of the process who receives the data

682
00:37:56,350 --> 00:37:57,940
as a new protocol type. 

683
00:37:58,800 --> 00:38:00,280
Now here is a protocol type. 

684
00:38:00,290 --> 00:38:03,160
It's tcp in this lecture, 

685
00:38:03,370 --> 00:38:07,460
like we discuss, also you can have udp user data ground protocol.

686
00:38:08,400 --> 00:38:10,190
Let me see it's another question. 

687
00:38:16,270 --> 00:38:18,530
Ii think probably I missed this. 

688
00:38:19,070 --> 00:38:20,380
Actually, as this question,

689
00:38:20,390 --> 00:38:24,230
isn't this also a problem for processes on the same computer? 

690
00:38:24,440 --> 00:38:29,900
How will one identify the other pid so basically about how do I identify

691
00:38:29,910 --> 00:38:30,820
the processes? 

692
00:38:31,330 --> 00:38:31,920
So, 

693
00:38:32,540 --> 00:38:34,420
yes, so depends.

694
00:38:34,430 --> 00:38:36,340
So on the same machine, 

695
00:38:36,670 --> 00:38:39,900
the problem is not about only how do I identify, 

696
00:38:40,410 --> 00:38:42,850
but how you are sharing the identification. 

697
00:38:45,540 --> 00:38:47,470
For instance, on a machine,

698
00:38:48,000 --> 00:38:51,670
you have access to the pid and you can identify everything by pid

699
00:38:51,680 --> 00:38:52,510
on the same machine. 

700
00:38:53,450 --> 00:39:01,030
If you want to send to make apid not to let one process

701
00:39:01,040 --> 00:39:04,190
about know about identify another process. 

702
00:39:04,470 --> 00:39:05,670
There are many ways to do it. 

703
00:39:06,010 --> 00:39:06,410
Right? 

704
00:39:06,420 --> 00:39:08,770
One way, simple ways to write that in a file.

705
00:39:10,050 --> 00:39:10,380
Right? 

706
00:39:10,690 --> 00:39:15,990
Basically, you have like the cuba land of a server on your machine.

707
00:39:16,360 --> 00:39:19,350
You want to now say the pid of that one. 

708
00:39:19,360 --> 00:39:22,350
You always when you start that server on that machine, 

709
00:39:22,360 --> 00:39:23,830
you write the pid in a file. 

710
00:39:26,890 --> 00:39:29,060
So that one, but by the way,

711
00:39:29,370 --> 00:39:32,840
by the way, the one important things to know is that while here,

712
00:39:32,850 --> 00:39:36,350
I am always repeating and repeating and repeating that the sender

713
00:39:36,360 --> 00:39:40,590
and the receivers are on two different or are two different notes, 

714
00:39:40,600 --> 00:39:42,870
they can also be on the same machine. 

715
00:39:43,440 --> 00:39:44,290
It's going to work. 

716
00:39:47,510 --> 00:39:52,840
You can use dcp to run to communicate between two processes on the same machine. 

717
00:39:54,750 --> 00:39:55,540
Okay, no problem.

718
00:39:57,420 --> 00:39:57,970
Yes, sir.

719
00:40:03,850 --> 00:40:04,250
Good. 

720
00:40:07,190 --> 00:40:08,950
So in order to know the server, 

721
00:40:08,960 --> 00:40:09,990
what do you need to know? 

722
00:40:10,000 --> 00:40:10,390
Right? 

723
00:40:10,830 --> 00:40:14,650
Again, you need to know about its ip address.

724
00:40:16,940 --> 00:40:21,010
And then the port numbers on which this server is listening. 

725
00:40:22,350 --> 00:40:25,270
And typically against the well known services, 

726
00:40:25,280 --> 00:40:28,430
they have well known ports like port 80. 

727
00:40:29,420 --> 00:40:32,110
Send mail is 25 and things like that. 

728
00:40:32,470 --> 00:40:32,710
Right? 

729
00:40:33,880 --> 00:40:40,170
And this is now means that everyone knows if it's an old server running

730
00:40:40,260 --> 00:40:42,290
on one machine with this address, 

731
00:40:42,610 --> 00:40:44,170
that website will run on board date. 

732
00:40:47,670 --> 00:40:48,190
Okay? 

733
00:40:48,560 --> 00:40:51,520
So now let's go a little bit more details about how things are happened. 

734
00:40:53,860 --> 00:40:57,680
To see how this new connection are created. 

735
00:40:59,820 --> 00:41:00,850
The server, 

736
00:41:01,670 --> 00:41:02,680
you create a socket, 

737
00:41:03,940 --> 00:41:09,860
and you bind it to a local address to another, 

738
00:41:09,870 --> 00:41:12,470
which is the local address of the machine, typically,

739
00:41:12,970 --> 00:41:13,790
and a port. 

740
00:41:14,830 --> 00:41:15,160
Right? 

741
00:41:16,660 --> 00:41:17,690
If your website about, 

742
00:41:18,460 --> 00:41:20,770
you bind it to port eight, 

743
00:41:22,310 --> 00:41:25,130
and then you listen for connection from the clients. 

744
00:41:26,040 --> 00:41:27,250
You get a connection, 

745
00:41:27,780 --> 00:41:28,620
you accept it. 

746
00:41:29,660 --> 00:41:30,030
Right? 

747
00:41:32,140 --> 00:41:34,200
Now let's move to the client side. 

748
00:41:34,210 --> 00:41:35,120
On the client side. 

749
00:41:35,130 --> 00:41:36,040
I create a socket. 

750
00:41:37,320 --> 00:41:39,270
Then I connect to the server, 

751
00:41:39,280 --> 00:41:40,750
specifying the host, 

752
00:41:40,760 --> 00:41:42,310
ip address and the port number. 

753
00:41:42,630 --> 00:41:43,720
It's a host and support. 

754
00:41:43,730 --> 00:41:45,480
Number two is a server has bind it. 

755
00:41:47,520 --> 00:41:47,800
Right? 

756
00:41:48,770 --> 00:41:51,010
This is a little bit of pattern we saw before. 

757
00:41:52,240 --> 00:41:56,460
You send a client send a connection request to the server, 

758
00:41:56,470 --> 00:42:01,050
which was listening and the server accept and send back, 

759
00:42:02,370 --> 00:42:06,450
accept calls and now and new, 

760
00:42:06,730 --> 00:42:08,490
and creates also a socket, the server.

761
00:42:08,500 --> 00:42:10,170
And now you have a connection. 

762
00:42:12,280 --> 00:42:16,720
Now the server goes to read into it, 

763
00:42:16,730 --> 00:42:17,880
blocks into it. 

764
00:42:18,320 --> 00:42:20,550
And the client writes, so eventually,

765
00:42:20,560 --> 00:42:23,190
when the data written by the client gets to the server, 

766
00:42:23,200 --> 00:42:28,630
the server read it and write a response. 

767
00:42:29,010 --> 00:42:30,330
The client reads a response. 

768
00:42:30,340 --> 00:42:31,930
And then at the end, 

769
00:42:31,940 --> 00:42:33,210
you close the socket. 

770
00:42:34,420 --> 00:42:34,740
Right? 

771
00:42:36,190 --> 00:42:37,500
If you can see about, 

772
00:42:37,770 --> 00:42:40,890
everyone is closing, the socket was a client and a server.

773
00:42:42,070 --> 00:42:45,530
And the client has create the socket. 

774
00:42:45,540 --> 00:42:47,560
This is a cuban with an open. 

775
00:42:48,220 --> 00:42:51,320
And the equivalent socket, 

776
00:42:51,330 --> 00:42:53,680
which is the server creates two sockets, 

777
00:42:53,690 --> 00:42:57,330
one on which is listening for requests, for new connections.

778
00:42:57,340 --> 00:43:01,440
And then when it's going to accept a request for connection, 

779
00:43:01,450 --> 00:43:03,780
is going to create a socket for that connection. 

780
00:43:05,370 --> 00:43:06,520
So seek, accept,

781
00:43:06,790 --> 00:43:09,900
cisco is going to create a socket for that connection, 

782
00:43:09,910 --> 00:43:14,420
the connection corresponding to the connection request from the client. 

783
00:43:22,180 --> 00:43:23,050
Here is a question. 

784
00:43:23,500 --> 00:43:26,410
How do you have multiple web servers on the same machine? 

785
00:43:26,420 --> 00:43:28,150
Is there is only one port. 

786
00:43:30,520 --> 00:43:34,030
Typically, you don't have multiple web servers on the same machine.

787
00:43:34,040 --> 00:43:36,830
If you want to have multiple web servers on the same machine, 

788
00:43:37,250 --> 00:43:39,490
you have to assign them to a different numbers. 

789
00:43:40,570 --> 00:43:42,460
And by this web number numbers, 

790
00:43:42,470 --> 00:43:50,150
you need to tell other clients what the new poor numbers are. 

791
00:43:51,570 --> 00:43:51,740
Like. 

792
00:43:51,750 --> 00:43:52,780
For instance, typically,

793
00:43:52,790 --> 00:43:55,780
another poor number website values. 

794
00:43:55,790 --> 00:43:58,810
If it's not 80, it's 8080.

795
00:44:00,380 --> 00:44:01,410
I didn't say that. 

796
00:44:02,370 --> 00:44:08,540
But this the well known port number from 0 to 1 to 1,023, 

797
00:44:09,760 --> 00:44:15,320
you can only bind them if you have a rude privileges. 

798
00:44:15,900 --> 00:44:16,330
Right? 

799
00:44:16,660 --> 00:44:18,270
If you are just user, 

800
00:44:18,490 --> 00:44:20,360
you cannot bind on the sports. 

801
00:44:20,750 --> 00:44:25,230
And so if you want to use to run the website about only as a user, 

802
00:44:25,240 --> 00:44:28,750
typically people put 88 the port number. 

803
00:44:32,020 --> 00:44:34,290
A few questions here? 

804
00:44:34,300 --> 00:44:35,430
Another question? 

805
00:44:36,670 --> 00:44:38,700
No answer the question. 

806
00:44:38,710 --> 00:44:39,380
Sorry. 

807
00:44:44,510 --> 00:44:46,100
Pipes are one way. 

808
00:44:47,080 --> 00:44:48,390
You need to create two pipes, 

809
00:44:48,400 --> 00:44:50,030
you want to communicate both ways. 

810
00:44:59,530 --> 00:45:01,560
There is another answer for allison. 

811
00:45:01,570 --> 00:45:03,800
If you have multiple websites on the same server, 

812
00:45:03,810 --> 00:45:05,680
you can do it at the application layer. 

813
00:45:06,790 --> 00:45:08,660
Http requests have the horse header, 

814
00:45:08,670 --> 00:45:12,480
which tells the server I want to talk to excite. 

815
00:45:12,490 --> 00:45:14,720
And the server can just send back the eyesight. 

816
00:45:19,600 --> 00:45:20,880
That's a little bit more complicated. 

817
00:45:23,600 --> 00:45:27,080
I guess everything is possible in software. 

818
00:45:28,100 --> 00:45:29,410
But typically, this is,

819
00:45:30,800 --> 00:45:33,270
you can have the content distribution networks. 

820
00:45:33,760 --> 00:45:35,640
They do something like you propose here. 

821
00:45:36,450 --> 00:45:38,270
We'll talk a little bit about that later. 

822
00:45:39,030 --> 00:45:41,750
But for now, if you, again,

823
00:45:42,520 --> 00:45:46,430
the one thing to know is that if you really want to run multiple observers

824
00:45:47,180 --> 00:45:48,410
on the same, 

825
00:45:48,820 --> 00:45:50,100
not only the same house, 

826
00:45:50,740 --> 00:45:54,800
you need to provide different phone numbers. 

827
00:45:56,210 --> 00:45:58,680
This is a client protocol a little bit in more details. 

828
00:46:00,880 --> 00:46:02,310
This is how you create the socket. 

829
00:46:03,730 --> 00:46:04,140
Right? 

830
00:46:04,150 --> 00:46:04,700
Remember. 

831
00:46:04,710 --> 00:46:07,030
And when you create a socket, first of all,

832
00:46:07,040 --> 00:46:09,910
you create this kind of addressing from address, info,

833
00:46:09,920 --> 00:46:10,950
data structure. 

834
00:46:11,310 --> 00:46:13,430
When you provide the horse name and the port name, 

835
00:46:15,490 --> 00:46:20,790
then you create the socket by using this data structure just graded. 

836
00:46:20,800 --> 00:46:22,890
And it has three things. 

837
00:46:22,900 --> 00:46:26,190
Typically, you can add more address family.

838
00:46:26,200 --> 00:46:34,060
You basically, this is whether it's ipp ipp six or something else set up.

839
00:46:34,570 --> 00:46:35,910
You can have ice. 

840
00:46:38,920 --> 00:46:42,440
You have soccer stream type here. 

841
00:46:42,450 --> 00:46:44,600
It's a sock stream or soccer diagram. 

842
00:46:44,960 --> 00:46:45,680
Soccer stream. 

843
00:46:45,690 --> 00:46:48,350
This is a stream of bytes, the data ground,

844
00:46:48,960 --> 00:46:49,430
right? 

845
00:46:49,700 --> 00:46:50,880
Is something we are not discussing, 

846
00:46:50,890 --> 00:46:54,790
which is udp in udp you don't send a stream of bytes. 

847
00:46:55,260 --> 00:46:56,830
You send packets, 

848
00:47:01,160 --> 00:47:03,630
then you have, 

849
00:47:04,160 --> 00:47:07,240
it's also pcp it says this is a protocol type, 

850
00:47:07,730 --> 00:47:10,200
so this is can be like dcp zero. 

851
00:47:10,210 --> 00:47:12,270
You can have any protocol. 

852
00:47:13,610 --> 00:47:14,600
Then you connect, 

853
00:47:15,640 --> 00:47:16,970
this is a connection request. 

854
00:47:17,510 --> 00:47:18,080
You say, 

855
00:47:18,960 --> 00:47:21,850
if you define the server address and the phone number, 

856
00:47:24,000 --> 00:47:29,220
then you run the client code on that file descriptor, soccer descriptor,

857
00:47:29,230 --> 00:47:30,240
and your clothes. 

858
00:47:31,010 --> 00:47:31,380
Right? 

859
00:47:32,090 --> 00:47:33,360
Again, the ceremony here,

860
00:47:33,370 --> 00:47:39,640
just to make sure that I I didn't say something wrong. 

861
00:47:40,310 --> 00:47:41,620
The server here, 

862
00:47:41,630 --> 00:47:42,740
when you do the look of, 

863
00:47:43,070 --> 00:47:45,770
you basically provide the host name. 

864
00:47:45,780 --> 00:47:48,770
This is a server name and the server port number. 

865
00:47:49,660 --> 00:47:51,290
This is what you provide in this server. 

866
00:47:53,250 --> 00:47:55,050
What you're doing is several data structure. 

867
00:47:57,330 --> 00:47:58,470
And for the server protocol, 

868
00:47:58,480 --> 00:48:00,370
it's a little bit more involved. 

869
00:48:00,380 --> 00:48:01,450
You create a socket. 

870
00:48:03,650 --> 00:48:08,670
You brought you give the poor name where you want to bind to each one

871
00:48:08,680 --> 00:48:09,710
to bind this server, 

872
00:48:09,720 --> 00:48:15,540
and then you bind this server to the typically to the local address

873
00:48:15,550 --> 00:48:16,900
and the port number. 

874
00:48:17,450 --> 00:48:20,140
Then you listen for connection requests. 

875
00:48:20,850 --> 00:48:22,520
Now, what you do,

876
00:48:22,530 --> 00:48:23,720
you go into a loop, 

877
00:48:23,730 --> 00:48:26,640
and when you get a connection request, you accept it,

878
00:48:26,930 --> 00:48:28,110
you create a socket. 

879
00:48:28,120 --> 00:48:29,510
This is connect socket. 

880
00:48:29,770 --> 00:48:33,780
And then you serve the client and you close the socket. 

881
00:48:34,460 --> 00:48:34,860
Eventually, 

882
00:48:36,100 --> 00:48:37,730
when the server ends, 

883
00:48:38,400 --> 00:48:42,240
then you also close the server socket, 

884
00:48:42,250 --> 00:48:44,640
but the server socket is the one on which you are listening. 

885
00:48:45,260 --> 00:48:45,730
Remember. 

886
00:48:49,210 --> 00:48:54,550
So then now you are going to have requests from different clients. 

887
00:48:54,560 --> 00:48:56,580
We saw that for each of requests, 

888
00:48:56,680 --> 00:48:57,990
for each request connection, 

889
00:48:58,300 --> 00:49:02,100
we are going to create a different socket on the server side. 

890
00:49:02,110 --> 00:49:05,590
Now, where is a code running on the server side?

891
00:49:05,600 --> 00:49:06,150
Going? 

892
00:49:06,800 --> 00:49:09,470
Where is the code running on the server side going to run? 

893
00:49:09,880 --> 00:49:12,080
What is this set of client going put up? 

894
00:49:12,090 --> 00:49:12,830
You see here? 

895
00:49:13,970 --> 00:49:14,660
Where is that going? 

896
00:49:14,670 --> 00:49:14,940
Put up? 

897
00:49:17,360 --> 00:49:18,430
There are multiple ways, 

898
00:49:18,800 --> 00:49:19,830
multiple methods here. 

899
00:49:19,840 --> 00:49:28,810
One, if you want to really protect yourself about The client,

900
00:49:28,820 --> 00:49:31,450
sending you something stupid or send, 

901
00:49:31,940 --> 00:49:35,520
and you you do some bad things. 

902
00:49:35,720 --> 00:49:37,350
It causes you to do some bad things. 

903
00:49:37,360 --> 00:49:38,390
You can do it. 

904
00:49:38,400 --> 00:49:41,390
You can run that code in a separate process. 

905
00:49:41,510 --> 00:49:44,670
You remember the processes as the unit of protection. 

906
00:49:45,030 --> 00:49:45,420
Right? 

907
00:49:46,550 --> 00:49:48,690
Processes are protected from each other, right?

908
00:49:49,270 --> 00:49:50,620
In this particular case, 

909
00:49:51,020 --> 00:49:57,090
the idea you have a connection when accepts is called create a connection socket. 

910
00:49:58,050 --> 00:50:01,930
You are going to create a child, 

911
00:50:01,940 --> 00:50:06,090
and you are going to answer the client between in the child. 

912
00:50:06,370 --> 00:50:09,700
While the parent doesn't do anything, 

913
00:50:09,710 --> 00:50:11,660
it may be ways for the child to finish. 

914
00:50:11,940 --> 00:50:12,280
Right? 

915
00:50:13,820 --> 00:50:16,770
So this is a scout on the several side. 

916
00:50:16,780 --> 00:50:18,720
You accept not all the code. 

917
00:50:18,890 --> 00:50:20,120
It's only in the while loop. 

918
00:50:20,540 --> 00:50:22,660
You accept as a connection request, 

919
00:50:22,670 --> 00:50:25,490
then you for remember, 

920
00:50:25,500 --> 00:50:28,490
if the result of the four pid is zero, 

921
00:50:28,750 --> 00:50:30,930
this means that you are here executing what? 

922
00:50:32,970 --> 00:50:34,120
The child code, right?

923
00:50:34,710 --> 00:50:37,690
The child, it's closed the server socket.

924
00:50:37,930 --> 00:50:41,160
This is a socket, only the server listen for new connections.

925
00:50:41,610 --> 00:50:44,530
So the child only needs to reply to the client, 

926
00:50:44,540 --> 00:50:48,050
so he's not going to listen for new clients, right?

927
00:50:50,730 --> 00:50:56,740
Then you set of the client and you also close is a connection to that client. 

928
00:50:57,270 --> 00:50:59,880
And you exit on the server side, 

929
00:51:01,540 --> 00:51:02,850
on the pattern side, 

930
00:51:02,860 --> 00:51:04,500
which is a server itself. 

931
00:51:06,200 --> 00:51:08,110
You close a connection socket, 

932
00:51:08,120 --> 00:51:11,510
you because you are not going to communicate directly with our client. 

933
00:51:11,990 --> 00:51:16,180
The child is going to communicate and then wait while the weight is going

934
00:51:16,190 --> 00:51:18,200
great for the child to finish. 

935
00:51:18,640 --> 00:51:19,710
And then at the end, 

936
00:51:19,990 --> 00:51:22,780
you close the server connection, right?

937
00:51:24,170 --> 00:51:26,560
So to summarize a in a server, 

938
00:51:26,570 --> 00:51:30,210
you listen for connection requests. 

939
00:51:30,220 --> 00:51:32,290
If there are multiple requests at the same time, 

940
00:51:32,300 --> 00:51:33,770
they are going to be cured. 

941
00:51:36,200 --> 00:51:42,170
And then you create connections and then use this connection to communicate

942
00:51:42,620 --> 00:51:43,330
with a child. 

943
00:51:44,560 --> 00:51:45,090
Okay? 

944
00:51:45,560 --> 00:51:51,190
This is aa server because it leads an increased connection for his child. 

945
00:51:51,460 --> 00:51:56,420
Can answer at the same time to mark can talk at the same time

946
00:51:56,430 --> 00:51:57,110
with multiple clients. 

947
00:51:58,640 --> 00:51:59,040
Okay? 

948
00:52:01,830 --> 00:52:05,480
One potential thing here is that in this code, like I said,

949
00:52:05,810 --> 00:52:11,240
the parent, this is a parent code in this else on the else branch.

950
00:52:11,870 --> 00:52:13,890
You wait for the child to finish, 

951
00:52:13,900 --> 00:52:15,730
but if you wait for the child to finish, 

952
00:52:15,990 --> 00:52:17,430
then you cannot listen, 

953
00:52:17,440 --> 00:52:20,230
and you cannot satisfy other connection requests. 

954
00:52:20,460 --> 00:52:22,420
So actually, if you write this code,

955
00:52:22,920 --> 00:52:28,770
the server, although you have a different process for the connection,

956
00:52:29,030 --> 00:52:30,270
you cannot accept new connections. 

957
00:52:30,280 --> 00:52:33,070
So you are talking with one client at a time. 

958
00:52:33,890 --> 00:52:35,070
So what is the fix here? 

959
00:52:40,150 --> 00:52:41,380
The fix is very simple. 

960
00:52:41,390 --> 00:52:44,120
Don't wait to go back, don't wait.

961
00:52:44,130 --> 00:52:48,010
And that go like if you had a server, 

962
00:52:48,020 --> 00:52:57,070
go back and accept be ready to accept new new connection requests from new clients. 

963
00:52:57,080 --> 00:52:57,310
Okay? 

964
00:53:01,350 --> 00:53:04,550
This is address how you set up the address again. 

965
00:53:04,560 --> 00:53:06,290
I'm not going to go from. 

966
00:53:06,610 --> 00:53:11,470
So details you have the same things like socks stream is like, 

967
00:53:11,890 --> 00:53:13,160
it's a data stream. 

968
00:53:13,170 --> 00:53:21,680
This is what you have for pcp this is you don't specify the ip ib family

969
00:53:22,010 --> 00:53:22,960
and things like that. 

970
00:53:23,740 --> 00:53:25,130
But again, 

971
00:53:25,490 --> 00:53:31,570
a it's a boiler plate code to set up this address information data structure. 

972
00:53:39,140 --> 00:53:40,290
This is a boiler. 

973
00:53:41,600 --> 00:53:42,950
It's from the client side. 

974
00:53:43,640 --> 00:53:45,470
This is how you set the address. 

975
00:53:47,160 --> 00:53:53,120
And this is how you get the address of the server from the client. 

976
00:53:53,720 --> 00:53:54,080
Right? 

977
00:53:56,160 --> 00:53:57,990
You get it from, 

978
00:53:58,390 --> 00:54:01,290
you specify the host name and the port name. 

979
00:54:01,780 --> 00:54:04,650
You get the address information, 

980
00:54:04,660 --> 00:54:07,940
including the ip address of the server. 

981
00:54:13,940 --> 00:54:14,340
Now, 

982
00:54:15,230 --> 00:54:15,670
so far, 

983
00:54:15,680 --> 00:54:22,280
I said that you can provide concurrency if you run and you for each client, 

984
00:54:22,620 --> 00:54:24,620
you on the several side, 

985
00:54:24,630 --> 00:54:28,480
you have a different process to talk with that client. 

986
00:54:29,740 --> 00:54:32,970
Now you have concurrency because processes can run concurrently. 

987
00:54:33,570 --> 00:54:38,000
But now the problem is processes what it is that they provide protection, 

988
00:54:38,010 --> 00:54:39,200
but they are heavyweight. 

989
00:54:41,090 --> 00:54:42,790
If you want to provide concurrency, 

990
00:54:42,800 --> 00:54:47,140
but more heavyweight and you are not as concerned about protection. 

991
00:54:47,150 --> 00:54:47,900
What you do. 

992
00:54:48,250 --> 00:54:49,190
You can use threads, 

993
00:54:49,950 --> 00:54:50,290
right? 

994
00:54:50,670 --> 00:54:51,180
The thread. 

995
00:54:51,190 --> 00:54:53,940
You can have multiple thread in the same process. 

996
00:54:54,410 --> 00:54:55,000
Now, 

997
00:54:55,010 --> 00:55:01,090
what you are going to do when you are going to accept a connection request

998
00:55:01,100 --> 00:55:01,850
from a client, 

999
00:55:01,860 --> 00:55:03,890
and you are created creating a socket, 

1000
00:55:04,170 --> 00:55:05,790
you are going to spawn a thread. 

1001
00:55:08,550 --> 00:55:11,060
But if you spawn a thread, 

1002
00:55:11,070 --> 00:55:12,340
what is a problem right now? 

1003
00:55:13,330 --> 00:55:14,770
This was also in the case of that, 

1004
00:55:14,780 --> 00:55:16,090
when you use the processes, 

1005
00:55:16,660 --> 00:55:17,380
what is the problem? 

1006
00:55:18,300 --> 00:55:18,640
Right? 

1007
00:55:20,710 --> 00:55:21,880
See any problem here. 

1008
00:55:39,630 --> 00:55:41,650
What if you have many clients? 

1009
00:55:43,810 --> 00:55:45,280
You can have actually an attack. 

1010
00:55:46,140 --> 00:55:52,280
I can have many clients opening new connections and never closing them

1011
00:55:53,190 --> 00:55:54,470
and exhausted that is. 

1012
00:55:54,480 --> 00:55:58,890
But in this way, exhaust resources on the 7th side, how do you do that?

1013
00:56:02,470 --> 00:56:03,660
What is the solution here? 

1014
00:56:04,570 --> 00:56:07,270
The solution here is to create what is called a thread. 

1015
00:56:07,280 --> 00:56:10,760
So you create a bunch of threads, say,

1016
00:56:10,770 --> 00:56:11,960
100 threads, 

1017
00:56:14,320 --> 00:56:21,790
which means that a given time you can talk concurrently of with 100 clients. 

1018
00:56:22,930 --> 00:56:24,970
What if there are more than 100 plants? 

1019
00:56:25,990 --> 00:56:30,720
They have to wait for some of the current clients you are talking with to finish, 

1020
00:56:31,740 --> 00:56:32,580
and the leads a threat. 

1021
00:56:35,280 --> 00:56:40,150
This is a concept, and it's a very useful concept about the threat pull.

1022
00:56:40,390 --> 00:56:44,650
And the main goal of the third world is to protect the resources

1023
00:56:45,120 --> 00:56:48,040
of the server from being

1024
00:56:48,050 --> 00:56:50,890
exhausted very soon. 

1025
00:56:54,840 --> 00:56:56,070
How do you have that? 

1026
00:56:56,080 --> 00:56:57,030
You have, 

1027
00:57:00,540 --> 00:57:04,640
you have to hear a master thread and the master thread. 

1028
00:57:04,650 --> 00:57:06,720
This is actually the server, 

1029
00:57:07,090 --> 00:57:10,420
which is going where the code of the server which is waiting

1030
00:57:10,430 --> 00:57:11,620
for the connection request, 

1031
00:57:13,230 --> 00:57:16,810
runs a when you create, 

1032
00:57:18,880 --> 00:57:20,150
when you create a connect, 

1033
00:57:20,160 --> 00:57:23,230
when you accept a connection request and you create a socket, 

1034
00:57:23,880 --> 00:57:28,490
then you put that you incur a request. 

1035
00:57:29,370 --> 00:57:30,880
Now is the request for a thread. 

1036
00:57:30,890 --> 00:57:33,160
You ask for a thread. 

1037
00:57:34,090 --> 00:57:38,740
This is nq to the cube of threads, the connection.

1038
00:57:39,980 --> 00:57:40,360
Right? 

1039
00:57:40,780 --> 00:57:42,930
You can the wake up the queue. 

1040
00:57:42,940 --> 00:57:44,250
This is another thread, 

1041
00:57:44,610 --> 00:57:49,310
actually, which basically you will keep you wake up to run the code.

1042
00:57:50,530 --> 00:57:51,930
And on the huge side, 

1043
00:57:53,540 --> 00:58:00,070
you are going to look at the connection you dick, 

1044
00:58:00,080 --> 00:58:01,270
you from the queue. 

1045
00:58:01,880 --> 00:58:04,190
And if the connection, 

1046
00:58:05,260 --> 00:58:08,570
if connection is not known, it's not,

1047
00:58:08,580 --> 00:58:10,490
this means there is nothing in the cure. 

1048
00:58:10,890 --> 00:58:12,470
So you'll just go to sleep. 

1049
00:58:12,970 --> 00:58:17,400
And that's why the master needs to wake you up, right?

1050
00:58:18,390 --> 00:58:20,830
As you set up the web page. 

1051
00:58:27,000 --> 00:58:29,430
So i'm going to have the announcement before. 

1052
00:58:29,440 --> 00:58:29,630
Then. 

1053
00:58:29,640 --> 00:58:29,990
Let's see. 

1054
00:58:30,000 --> 00:58:31,150
What are the other questions? 

1055
00:58:35,430 --> 00:58:39,270
Does this newly creative process start listening for new requests as well? 

1056
00:58:39,280 --> 00:58:39,670
Now, 

1057
00:58:40,820 --> 00:58:42,070
this is a great question. 

1058
00:58:42,360 --> 00:58:44,790
Now the new creative requests do not. 

1059
00:58:45,130 --> 00:58:47,310
And i'm going to show you the code. 

1060
00:58:50,400 --> 00:58:50,910
You see, 

1061
00:58:51,790 --> 00:58:52,350
here, 

1062
00:58:53,560 --> 00:58:55,720
again, the new creative process.

1063
00:58:57,420 --> 00:58:58,300
It's a child. 

1064
00:58:59,830 --> 00:59:03,620
And this is a code under the pid equals zero, 

1065
00:59:03,630 --> 00:59:05,260
which is executed by the child. 

1066
00:59:06,050 --> 00:59:10,250
The first thing the child is doing is closing the server socket. 

1067
00:59:11,680 --> 00:59:17,550
The server socket is the one only the server listen for new connections. 

1068
00:59:20,930 --> 00:59:26,280
So this tells you this instruction tells you right away that the client

1069
00:59:26,290 --> 00:59:28,590
that the child doesn't

1070
00:59:28,600 --> 00:59:31,480
listen for new connection to be created. 

1071
00:59:31,890 --> 00:59:33,410
The only role of child, 

1072
00:59:33,420 --> 00:59:38,970
the child is to deal with a connection to the client. 

1073
00:59:40,410 --> 00:59:41,530
It was associated, too.

1074
00:59:44,890 --> 00:59:45,350
Okay. 

1075
00:59:47,570 --> 00:59:48,280
Let me see. 

1076
01:00:06,580 --> 01:00:10,240
Wait for the threats to join

1077
01:00:14,420 --> 01:00:20,980
if you create a new threat and you have to wait towards the threat to join, 

1078
01:00:20,990 --> 01:00:22,620
because the strategy is a process. 

1079
01:00:22,630 --> 01:00:24,340
So if the process goes away, 

1080
01:00:24,940 --> 01:00:29,180
then just the thread you created is going to go away. 

1081
01:00:30,240 --> 01:00:30,500
Right? 

1082
01:00:31,060 --> 01:00:36,010
So you need like someone like christian or simon said, 

1083
01:00:36,620 --> 01:00:40,870
you need to wait for the strategy joints. 

1084
01:00:47,380 --> 01:00:47,830
Oops, 

1085
01:00:48,530 --> 01:00:50,380
announcement project one, 

1086
01:00:50,390 --> 01:00:53,020
the design documents are due to friday. 

1087
01:00:53,330 --> 01:00:57,970
This friday, the design reviews are going to happen next week,

1088
01:00:58,590 --> 01:01:00,980
and keep a look out on piazza for sign ups. 

1089
01:01:00,990 --> 01:01:05,020
You are going to sign with your pa to probably give the pa will provide. 

1090
01:01:05,030 --> 01:01:07,650
You is a feedback on your design. 

1091
01:01:08,070 --> 01:01:11,830
And the design is something very important design documents. 

1092
01:01:12,120 --> 01:01:15,700
But I you may not have been used with this in other classes. 

1093
01:01:16,450 --> 01:01:17,680
But in this class, 

1094
01:01:17,910 --> 01:01:20,100
before you start writing the first lines of code, 

1095
01:01:20,110 --> 01:01:22,180
you are going to write a design document. 

1096
01:01:22,560 --> 01:01:23,700
That is as a theory. 

1097
01:01:24,490 --> 01:01:28,790
Therefore, it's going to force you to think about about the design.

1098
01:01:28,800 --> 01:01:30,870
And then the idea is, 

1099
01:01:30,880 --> 01:01:34,310
at once you have a good design document and you got the feedback, 

1100
01:01:34,320 --> 01:01:35,430
you address the feedback, 

1101
01:01:36,150 --> 01:01:42,600
you'll have a much easier job to write and finish your project, 

1102
01:01:43,410 --> 01:01:44,250
to do your project, 

1103
01:01:46,150 --> 01:01:49,290
sing more or less, something like that.

1104
01:01:51,730 --> 01:01:52,560
By the way, 

1105
01:01:53,050 --> 01:01:58,280
probably with the people that many of you you want did summer internships

1106
01:01:58,290 --> 01:01:59,880
at software engineering companies, 

1107
01:02:00,400 --> 01:02:04,470
very well that everywhere you need to have a design document

1108
01:02:04,480 --> 01:02:05,620
before your eyes a code. 

1109
01:02:06,380 --> 01:02:09,930
This is great practice for your next job. 

1110
01:02:11,510 --> 01:02:14,580
Even if you do the next thing, you are going to do,

1111
01:02:14,590 --> 01:02:16,060
you do aphd still, 

1112
01:02:16,070 --> 01:02:17,340
the design documents are great. 

1113
01:02:18,850 --> 01:02:21,240
The homework one is beyond thursday, 

1114
01:02:21,600 --> 01:02:28,580
and the midterm is due in15 days, 

1115
01:02:29,070 --> 01:02:30,220
5 to 6 spam, 

1116
01:02:30,230 --> 01:02:31,700
or it will be 2 weeks from now. 

1117
01:02:32,700 --> 01:02:33,690
2 weeks from tomorrow. 

1118
01:02:34,470 --> 01:02:42,410
Sorry, and it will be online and propped out,

1119
01:02:42,420 --> 01:02:43,970
and we'll get more details, 

1120
01:02:43,980 --> 01:02:45,330
will get more details next week. 

1121
01:02:48,490 --> 01:02:49,050
Okay. 

1122
01:02:51,040 --> 01:02:53,230
Now for the last 15 minutes, 

1123
01:02:53,240 --> 01:02:55,150
we are going to switch gears, 

1124
01:02:55,160 --> 01:02:59,670
and we are going to talk about a very important topic, 

1125
01:03:00,620 --> 01:03:01,810
synchronization. 

1126
01:03:01,820 --> 01:03:05,980
And we are only going to start here about synchronization, concurrency,

1127
01:03:05,990 --> 01:03:06,900
and synchronization. 

1128
01:03:12,070 --> 01:03:18,050
Everything starts from the need to multiplex processes. 

1129
01:03:18,420 --> 01:03:18,850
Right? 

1130
01:03:19,230 --> 01:03:22,820
And you need to run multiple activities concurrently. 

1131
01:03:23,130 --> 01:03:29,870
Like we've seen just a few minutes ago that if we want a server to handle

1132
01:03:29,880 --> 01:03:32,550
multiple clients at the same time, 

1133
01:03:33,240 --> 01:03:38,900
the way is doing it either using processes or multiple threads running

1134
01:03:38,910 --> 01:03:40,020
at the same time. 

1135
01:03:40,030 --> 01:03:43,340
Where is thread or processes is associated with the client? 

1136
01:03:47,720 --> 01:03:48,080
Good. 

1137
01:03:49,250 --> 01:03:50,400
Now, again,

1138
01:03:50,710 --> 01:03:53,960
remember, for the and thine, right,

1139
01:03:53,970 --> 01:04:00,260
is like a process is a unit of protection. 

1140
01:04:01,310 --> 01:04:05,040
It has another space which is protected from other processes. 

1141
01:04:06,020 --> 01:04:09,730
And the processes is represented by the process control block. 

1142
01:04:10,630 --> 01:04:11,780
We talk a little bit about that. 

1143
01:04:11,790 --> 01:04:12,580
If you remember, 

1144
01:04:13,490 --> 01:04:21,050
this process control block has all the state that represents that process. 

1145
01:04:22,040 --> 01:04:24,530
In short, if you save that state,

1146
01:04:25,640 --> 01:04:32,000
then you can restart the process from that state as if nothing had happened. 

1147
01:04:36,820 --> 01:04:37,490
So what do you have? 

1148
01:04:37,500 --> 01:04:38,730
It has a status. 

1149
01:04:38,960 --> 01:04:43,180
We'll see what is the status where there is a process of running radio block? 

1150
01:04:46,620 --> 01:04:48,580
You have some register state one, 

1151
01:04:48,590 --> 01:04:58,300
not ready process id some some other information, 

1152
01:04:58,310 --> 01:05:01,340
like the cushion pain of time, memory space.

1153
01:05:01,350 --> 01:05:04,190
This is a big one, the memory of the process, right?

1154
01:05:04,840 --> 01:05:05,760
It has to be summer. 

1155
01:05:05,770 --> 01:05:07,440
You need one memo you are using. 

1156
01:05:07,990 --> 01:05:09,280
You have to know it. 

1157
01:05:10,690 --> 01:05:12,400
Translation, how you translate.

1158
01:05:12,410 --> 01:05:14,240
Remember, you have virtual memory,

1159
01:05:14,250 --> 01:05:16,440
the process since it is a virtual memory. 

1160
01:05:17,100 --> 01:05:21,330
But the data is starting in physical memory. 

1161
01:05:21,340 --> 01:05:25,110
You need to translate between the address of the virtual memory

1162
01:05:25,520 --> 01:05:27,040
to the physical memory. 

1163
01:05:27,560 --> 01:05:29,320
You need to have this translation paper. 

1164
01:05:32,060 --> 01:05:34,480
Again, why do you need to define this contrast state?

1165
01:05:34,490 --> 01:05:36,240
It's because this allows, again,

1166
01:05:36,250 --> 01:05:39,690
you the process to be to switch between processes. 

1167
01:05:40,100 --> 01:05:40,430
Right? 

1168
01:05:42,470 --> 01:05:44,430
You save, you give a process.

1169
01:05:44,440 --> 01:05:46,110
If you save all these states, 

1170
01:05:46,120 --> 01:05:48,350
associating the bcb is a process. 

1171
01:05:48,600 --> 01:05:52,050
And then you can give the cpu to another process to run. 

1172
01:05:52,060 --> 01:05:55,170
And then you can come back to the preview to the previous process. 

1173
01:05:55,510 --> 01:06:00,510
And we started from the same place so to speak by using all the information

1174
01:06:00,520 --> 01:06:01,860
in the pcp

1175
01:06:07,040 --> 01:06:08,030
and this is what happens, 

1176
01:06:08,040 --> 01:06:08,470
right? 

1177
01:06:09,250 --> 01:06:11,940
This is how you are going to multiplex. 

1178
01:06:11,950 --> 01:06:14,340
For instance, once if you between two processes,

1179
01:06:14,850 --> 01:06:16,080
p zero and p one, 

1180
01:06:18,790 --> 01:06:20,860
this is what you do it from p zero. 

1181
01:06:20,870 --> 01:06:22,900
You want to switch from p zero to p one. 

1182
01:06:23,360 --> 01:06:28,190
The operating system is going to save the state of the pcp zero in pcp zero. 

1183
01:06:29,790 --> 01:06:35,910
Then is going to reduce to load the state of process b one from pcb one. 

1184
01:06:36,410 --> 01:06:40,300
Then it's going to run the process to run process beyond. 

1185
01:06:40,630 --> 01:06:42,420
And then at some., 

1186
01:06:43,040 --> 01:06:46,720
when the time quanta for that process beyond expired, 

1187
01:06:47,020 --> 01:06:50,140
or when it's waiting for something, 

1188
01:06:50,600 --> 01:06:55,160
then is going to do the same thing. 

1189
01:06:55,170 --> 01:07:00,210
But the other way around is going to save the pcb one over the state

1190
01:07:00,220 --> 01:07:02,050
of process b one in pcb one, 

1191
01:07:02,370 --> 01:07:05,530
and then reload the state of p zero and pcp zero, 

1192
01:07:05,540 --> 01:07:08,700
and then resume the execution of p zero. 

1193
01:07:09,900 --> 01:07:10,390
That's all. 

1194
01:07:12,040 --> 01:07:13,910
This is operating system. 

1195
01:07:14,130 --> 01:07:15,160
High level of privilege, 

1196
01:07:15,170 --> 01:07:18,680
meaning that this code cannot be executed by the applications. 

1197
01:07:21,520 --> 01:07:22,670
All of these yellow stuff, 

1198
01:07:22,680 --> 01:07:27,710
what are those function calls interrupts? 

1199
01:07:31,010 --> 01:07:32,780
Now you remember that here, 

1200
01:07:33,070 --> 01:07:37,440
we are talking about the status of the process in the PCB this is a status. 

1201
01:07:40,190 --> 01:07:42,670
This is a state or the state of the process. 

1202
01:07:44,190 --> 01:07:45,860
A process first is created, 

1203
01:07:46,910 --> 01:07:49,450
then is put in the queue if he's ready to execute, 

1204
01:07:51,130 --> 01:07:52,250
from the cure, 

1205
01:07:52,260 --> 01:07:53,890
from being ready to execute, 

1206
01:07:55,620 --> 01:07:57,050
it can go in the running state. 

1207
01:07:58,100 --> 01:08:02,670
Ready to run is running, 

1208
01:08:04,520 --> 01:08:05,670
and can terminate, 

1209
01:08:05,680 --> 01:08:08,240
or it can be interrupted. 

1210
01:08:09,180 --> 01:08:09,420
Right? 

1211
01:08:09,430 --> 01:08:11,500
For instance, it's time quant expired.

1212
01:08:12,760 --> 01:08:14,320
So it's put again back in the real estate. 

1213
01:08:15,330 --> 01:08:18,110
Or is doing an io event, 

1214
01:08:18,120 --> 01:08:20,350
is waiting for is doing it, 

1215
01:08:20,860 --> 01:08:24,420
waiting from some data from the network to get some data from the network. 

1216
01:08:25,930 --> 01:08:26,270
Right? 

1217
01:08:26,740 --> 01:08:28,010
Now you are annoying state. 

1218
01:08:28,570 --> 01:08:29,970
Again, you are no longer running.

1219
01:08:30,760 --> 01:08:32,960
When you are going to get the data you are waiting for, 

1220
01:08:32,970 --> 01:08:35,080
you are going to be in a real estate, so you can run again.

1221
01:08:36,070 --> 01:08:36,510
Right? 

1222
01:08:39,480 --> 01:08:41,150
So we have also the animation. 

1223
01:08:41,160 --> 01:08:43,530
So look, process is created.

1224
01:08:43,540 --> 01:08:45,960
You are going to go into any state here. 

1225
01:08:45,970 --> 01:08:48,100
You can run when the processor, 

1226
01:08:48,980 --> 01:08:51,000
when the CPU is available, 

1227
01:08:51,330 --> 01:08:54,900
then you run, you can get an interrupt,

1228
01:08:56,150 --> 01:08:58,910
like I mentioned when your time.expired. 

1229
01:08:59,680 --> 01:09:04,440
And then those are multiple times like we saw in the previous slide. 

1230
01:09:04,740 --> 01:09:08,120
You can switch between p zero and p one, right?

1231
01:09:12,530 --> 01:09:13,560
Then you can, 

1232
01:09:13,570 --> 01:09:16,840
if you execute and I operation, 

1233
01:09:16,850 --> 01:09:18,040
the process can wait, 

1234
01:09:19,190 --> 01:09:23,060
should wait no longer running when the weight ends, 

1235
01:09:23,070 --> 01:09:25,370
because it got the data, for instance,

1236
01:09:25,380 --> 01:09:28,560
for which is waiting for going to a real estate. 

1237
01:09:29,880 --> 01:09:31,590
You run for a little bit again, 

1238
01:09:32,140 --> 01:09:35,070
and then you are done exit. 

1239
01:09:42,590 --> 01:09:43,550
The scheduling. 

1240
01:09:45,490 --> 01:09:47,870
This is just a part is ridicule. 

1241
01:09:48,720 --> 01:09:49,720
And the scheduling. 

1242
01:09:49,730 --> 01:09:51,240
Basically, what is the scheduler?

1243
01:09:52,720 --> 01:09:54,160
What is the role of the scheduler? 

1244
01:09:54,520 --> 01:09:54,760
Right? 

1245
01:09:54,770 --> 01:09:59,330
We talk about the scheduler picks, which one do you want?

1246
01:09:59,870 --> 01:10:00,550
Ready? 

1247
01:10:01,090 --> 01:10:03,130
Process to run? 

1248
01:10:03,540 --> 01:10:03,960
Next? 

1249
01:10:07,000 --> 01:10:07,390
That's it. 

1250
01:10:10,420 --> 01:10:10,700
Okay. 

1251
01:10:10,710 --> 01:10:15,550
And here you see that once you run, 

1252
01:10:18,440 --> 01:10:23,250
there are multiple ways you can stop running. 

1253
01:10:24,160 --> 01:10:26,270
Like I said, time slice expires.

1254
01:10:27,720 --> 01:10:33,090
You are doing an io request and you need to wait for that to come to Complete. 

1255
01:10:34,540 --> 01:10:38,970
You can fork a child or you can wait for interact like for instance, 

1256
01:10:40,260 --> 01:10:40,480
yeah, 

1257
01:10:40,490 --> 01:10:46,570
from a diamond interrupt or interrupt from the keyboard or something like that. 

1258
01:10:47,880 --> 01:10:50,640
Ok let me see about examples. 

1259
01:10:51,170 --> 01:10:51,680
Questions? 

1260
01:10:51,690 --> 01:10:52,000
Sorry. 

1261
01:10:55,670 --> 01:10:57,350
Why do we need struggles? 

1262
01:10:57,750 --> 01:11:00,030
Can we just create thread as request comes? 

1263
01:11:04,810 --> 01:11:08,060
Philip, so what happens if you have 11 million requests?

1264
01:11:09,910 --> 01:11:12,540
Each thread actually consumed resources. 

1265
01:11:14,560 --> 01:11:16,430
So that far as at some., 

1266
01:11:16,440 --> 01:11:19,310
you exhaust the resources of a machine. 

1267
01:11:21,300 --> 01:11:23,300
And then everything becomes extremely slow. 

1268
01:11:23,310 --> 01:11:24,060
You get trash. 

1269
01:11:25,080 --> 01:11:26,060
You want to avoid that. 

1270
01:11:28,970 --> 01:11:30,560
Ramirez, assuming one CPU,

1271
01:11:30,570 --> 01:11:33,440
how does a kernel ensure each process is run smoothly? 

1272
01:11:34,720 --> 01:11:38,240
Is there a timer for when the scheduler interrupts for each PCB? 

1273
01:11:38,930 --> 01:11:39,710
That's correct. 

1274
01:11:41,290 --> 01:11:44,870
This is the one time slice expires. 

1275
01:11:45,720 --> 01:11:49,410
So the time slice the kernels, they typically have, say,

1276
01:11:50,170 --> 01:11:52,010
10 million seconds or 1 million seconds. 

1277
01:11:52,930 --> 01:11:55,710
A process or a set, actually,

1278
01:11:55,720 --> 01:11:57,830
the thread runs when I say a process. 

1279
01:11:58,280 --> 01:12:00,380
In this case, I am using interchangeably.

1280
01:12:01,550 --> 01:12:04,320
But the process like thread runs, 

1281
01:12:04,820 --> 01:12:07,060
it can run only up to, say,

1282
01:12:07,070 --> 01:12:08,860
10 millisecond or 1 millisecond. 

1283
01:12:10,290 --> 01:12:12,010
When that expires, 

1284
01:12:12,550 --> 01:12:15,470
the process is or is swapped out. 

1285
01:12:21,040 --> 01:12:22,150
No question. 

1286
01:12:24,380 --> 01:12:28,340
How is the process PCB distinct from the threat control block? 

1287
01:12:29,120 --> 01:12:30,340
The PCB, 

1288
01:12:30,630 --> 01:12:32,830
it's again, contains a state associated with a process.

1289
01:12:32,840 --> 01:12:34,390
It's a lot of more state. 

1290
01:12:34,920 --> 01:12:38,240
Like, for instance, the state about the memory,

1291
01:12:38,250 --> 01:12:39,280
the pages, 

1292
01:12:40,350 --> 01:12:41,330
and the translations. 

1293
01:12:42,640 --> 01:12:44,710
It's also contains a file descriptors. 

1294
01:12:46,870 --> 01:12:47,420
Okay? 

1295
01:12:48,510 --> 01:12:54,070
The thread, it's only touring the thread control block.

1296
01:12:54,080 --> 01:12:57,430
It's only typically registers and the stack. 

1297
01:12:58,880 --> 01:12:59,240
Right? 

1298
01:12:59,930 --> 01:13:02,690
It's much smaller. 

1299
01:13:07,370 --> 01:13:08,490
Hopefully answer the question. 

1300
01:13:09,620 --> 01:13:10,120
Okay. 

1301
01:13:16,660 --> 01:13:18,220
If the process is not running, 

1302
01:13:18,230 --> 01:13:21,700
is PCB which represents a process in the kernel, 

1303
01:13:22,180 --> 01:13:23,670
is in some schedule cube, 

1304
01:13:24,490 --> 01:13:28,880
may be waiting for the eye operation to Complete or waiting

1305
01:13:28,890 --> 01:13:30,320
for an interrupt or things like that. 

1306
01:13:31,490 --> 01:13:31,890
Okay? 

1307
01:13:33,130 --> 01:13:34,850
And each queue, again,

1308
01:13:34,860 --> 01:13:41,040
can have different scheduling policies about how you are going to set

1309
01:13:41,050 --> 01:13:42,430
of the next

1310
01:13:43,850 --> 01:13:44,960
PCB from that queue. 

1311
01:13:46,500 --> 01:13:47,820
This is already queue. 

1312
01:13:50,190 --> 01:13:52,980
Here represent, you have this kind of each node,

1313
01:13:52,990 --> 01:13:54,220
represent one process. 

1314
01:13:54,230 --> 01:13:59,600
You see, here is apcb this is a cure for this device.

1315
01:13:59,610 --> 01:14:02,080
You can have for the USB for the disk. 

1316
01:14:02,870 --> 01:14:04,540
If and this is for networking, 

1317
01:14:05,390 --> 01:14:06,620
there is nothing there. 

1318
01:14:06,930 --> 01:14:08,280
Now, for the list, for in this case,

1319
01:14:08,290 --> 01:14:12,000
we have two processes which are waiting to operate, 

1320
01:14:12,010 --> 01:14:17,410
which are operate awaiting to operate a read or write on that disk. 

1321
01:14:19,220 --> 01:14:25,870
The kernel will decide with what is the other news that are going to be scheduled? 

1322
01:14:25,880 --> 01:14:31,350
That request is as going to be satisfied. 

1323
01:14:33,090 --> 01:14:33,430
Okay? 

1324
01:14:34,380 --> 01:14:36,110
And the same for the network. 

1325
01:14:37,700 --> 01:14:38,890
So the schedule is actually, 

1326
01:14:38,900 --> 01:14:40,050
the core is very simple. 

1327
01:14:41,490 --> 01:14:43,330
Like this is for the ready process, right?

1328
01:14:45,550 --> 01:14:47,100
You go to the ready process. 

1329
01:14:48,370 --> 01:14:50,210
Is there any process? 

1330
01:14:50,700 --> 01:14:51,930
It's already process? 

1331
01:14:53,570 --> 01:14:57,370
You if the queue is not empty, so what does it mean?

1332
01:14:57,950 --> 01:14:58,870
You select the process. 

1333
01:14:58,880 --> 01:14:59,770
This is what? 

1334
01:15:00,420 --> 01:15:01,240
From the queue. 

1335
01:15:01,250 --> 01:15:04,190
This is a scheduling operation. 

1336
01:15:04,790 --> 01:15:09,600
And you get the next the PCB of the next process to schedule. 

1337
01:15:10,360 --> 01:15:12,100
And you run the next PCB. 

1338
01:15:12,320 --> 01:15:16,510
Otherwise, you are idle because there is no process to be scheduled.

1339
01:15:18,470 --> 01:15:19,810
The process, like I mentioned,

1340
01:15:19,820 --> 01:15:24,840
the scheduling is a mechanism for deciding which process or thread to run

1341
01:15:24,850 --> 01:15:29,670
on the CPU there are lots of different scheduling policies. 

1342
01:15:29,680 --> 01:15:33,350
There are thousand tens of thousands of papers on scheduling policies, 

1343
01:15:33,910 --> 01:15:38,010
because there are different properties you want to enforce may be fairness

1344
01:15:38,020 --> 01:15:40,330
between different application or processes. 

1345
01:15:41,570 --> 01:15:44,340
Provide real time, guarantees blood, latency,

1346
01:15:44,350 --> 01:15:46,020
optimization and things like that. 

1347
01:15:49,240 --> 01:15:50,740
And remember that actually, 

1348
01:15:50,750 --> 01:15:52,880
the part which is running from a process, 

1349
01:15:52,890 --> 01:15:55,040
it's kind of is that thread. 

1350
01:15:55,560 --> 01:15:56,840
That's the active component. 

1351
01:15:57,720 --> 01:16:00,650
Other space is passive, its protection,

1352
01:16:01,080 --> 01:16:02,960
its protection. 

1353
01:16:05,510 --> 01:16:08,990
Why have multiple threads where other space we already knew? 

1354
01:16:09,000 --> 01:16:11,540
Now that we saw that an example, 

1355
01:16:12,080 --> 01:16:15,840
you can have one thread for each connection for each client. 

1356
01:16:17,920 --> 01:16:22,150
This again share is showing you the share the state between the trading

1357
01:16:22,160 --> 01:16:23,110
the same process. 

1358
01:16:23,430 --> 01:16:24,870
And then but stress states, 

1359
01:16:25,420 --> 01:16:25,940
right? 

1360
01:16:26,180 --> 01:16:32,200
Is a strength control block and you have registers a stack Information. 

1361
01:16:32,580 --> 01:16:33,770
That's pretty much it. 

1362
01:16:34,210 --> 01:16:35,410
While the shared state, 

1363
01:16:35,760 --> 01:16:37,270
you have global variables, 

1364
01:16:37,280 --> 01:16:40,100
the hips and memories of code, and things like that.

1365
01:16:44,100 --> 01:16:47,130
The core of the concurrency is this dispatch loop, right?

1366
01:16:47,140 --> 01:16:47,610
Is a loop. 

1367
01:16:47,620 --> 01:16:49,370
You run the strategy, choose an extra,

1368
01:16:49,730 --> 01:16:50,850
save the state. 

1369
01:16:51,490 --> 01:16:57,450
This is now is written in terms of the threads at the Serena ID but this is

1370
01:16:57,460 --> 01:16:58,730
exactly what this core, 

1371
01:16:58,740 --> 01:17:00,970
this loop in the kernel is doing. 

1372
01:17:02,190 --> 01:17:03,770
You run the current thread, 

1373
01:17:04,040 --> 01:17:07,810
then when that thread terminates or it's interrupted, 

1374
01:17:07,820 --> 01:17:09,850
because the timer and so forth, 

1375
01:17:09,860 --> 01:17:13,220
you choose an extra that I from the queue. 

1376
01:17:13,530 --> 01:17:14,670
You save the thread, 

1377
01:17:14,680 --> 01:17:16,710
the state of the current thread, 

1378
01:17:17,270 --> 01:17:19,940
and the state of the new thread. 

1379
01:17:20,250 --> 01:17:21,560
Now you run the new set. 

1380
01:17:23,370 --> 01:17:25,480
This is an infinite look, like you never stop.

1381
01:17:30,110 --> 01:17:30,620
Okay. 

1382
01:17:34,670 --> 01:17:35,630
Let's stop here. 

1383
01:17:35,640 --> 01:17:38,990
And let me see any other question? 

1384
01:17:44,810 --> 01:17:46,480
No, more questions.

1385
01:17:47,810 --> 01:17:49,450
So let's stop here. 

1386
01:17:50,500 --> 01:17:51,530
Like on the.. 

1387
01:17:52,180 --> 01:17:53,400
Good luck with the homework, 

1388
01:17:53,410 --> 01:17:55,200
the good luck with the project. 

1389
01:17:55,880 --> 01:17:58,550
And let me know if you have any other questions. 

1390
01:17:59,770 --> 01:18:03,280
If not, I'm going to see you all on Thursday.

1391
01:18:05,170 --> 01:18:07,270
I have a great day. 


1
00:00:00,000 --> 00:00:19,000
 Okay, awesome. Okay, thanks for pointing this out. Sorry about that, everyone. So we have

2
00:00:19,000 --> 00:00:31,240
 now what are the rules for the GCR? Still mostly this class will be remote. All lecture

3
00:00:31,240 --> 00:00:38,680
 will be remote. This is what the department decided actually early on even before Delta

4
00:00:38,680 --> 00:00:50,480
 variant and all exams will be remote. We'll have three midterms. There is no final. And

5
00:00:50,480 --> 00:00:58,520
 we have 17 discussion sections on Thursday and Fridays, four on Thursday, 13 on Friday.

6
00:00:58,520 --> 00:01:07,920
 Out of those, four will be in person. They will be on Friday and 30 will be remote. Now,

7
00:01:07,920 --> 00:01:13,600
 please make sure because of that you have a working camera because you are going to

8
00:01:13,600 --> 00:01:23,160
 have Zoom proctoring of exams and require section design reviews, working with your

9
00:01:23,160 --> 00:01:37,360
 colleagues for the group projects, all requires to see each other and also screenshots. So

10
00:01:37,360 --> 00:01:43,400
 goals of today lectures, it's an introductory lecture, obviously, is to try to figure out

11
00:01:43,400 --> 00:01:50,160
 a little bit what is an operating system and in particular also what is not. And also I'm

12
00:01:50,160 --> 00:01:57,760
 going to say a few words about what makes operating systems so exciting. It's a while

13
00:01:57,760 --> 00:02:07,280
 and is actually probably one of the most exciting times to study and work on operating systems.

14
00:02:07,280 --> 00:02:14,480
 And then we are going to talk a little bit more at the end about how does a class operate.

15
00:02:14,480 --> 00:02:22,960
 Please interactivity is important. Now I know that it's harder, especially with a webinar.

16
00:02:22,960 --> 00:02:30,800
 I'm going to stop from time to time and look and take questions. And of course, please

17
00:02:30,800 --> 00:02:37,160
 ask questions and notes because even while I am talking, other people could answer them,

18
00:02:37,160 --> 00:02:49,960
 you know, some of our TAs. So what is fundamentally an operating system? So one way to think about

19
00:02:49,960 --> 00:02:57,560
 the operating system is that is that software layer which runs on top of hardware of the

20
00:02:57,560 --> 00:03:04,880
 hardware and provide support to the application. Right. What does that mean, providing support

21
00:03:04,880 --> 00:03:13,440
 to applications means that it makes it easier to develop applications and take advantage

22
00:03:13,440 --> 00:03:22,000
 of the hardware capabilities. It also protects applications from each other. It provides

23
00:03:22,000 --> 00:03:33,020
 security and authentication. So only the applications which should use the hardware and have access

24
00:03:33,020 --> 00:03:40,160
 to the data and also provide support for cooperation. There are applications which cooperate with

25
00:03:40,160 --> 00:03:45,500
 each other. And obviously this is more and more expected today. We are in the age of

26
00:03:45,500 --> 00:03:54,820
 the internet. Right. And why do we care to provide support for applications? Well, because

27
00:03:54,820 --> 00:04:01,620
 most of the things you do online, you do through applications. That's it. Right. It's the most

28
00:04:01,620 --> 00:04:07,880
 is a way people interact with computers is that people are going to interact with the

29
00:04:07,880 --> 00:04:14,560
 virtual world. So a physical world, virtual world. Virtual world means applications. And

30
00:04:14,560 --> 00:04:23,440
 also to drive home the point, here are some numbers about how the global mobile market

31
00:04:23,440 --> 00:04:32,860
 size. And you can see it is huge. And actually even year over year, the growth is significant.

32
00:04:32,860 --> 00:04:43,940
 Right. 20% or more. Right. And it's again an application provides the abstraction, manages

33
00:04:43,940 --> 00:04:52,680
 the resources, hardware resources. And it's achieving that through using a bunch of algorithms

34
00:04:52,680 --> 00:05:01,700
 for scheduling application or processes, providing access to resources from different concurrent

35
00:05:01,700 --> 00:05:20,160
 applications running at the same time. And security and many more. Okay. So right now,

36
00:05:20,160 --> 00:05:29,300
 let's look again a little bit. Oh, there is a question here. What is now an exciting time

37
00:05:29,300 --> 00:05:37,780
 for starting working in OS? Yes, we are going to answer that later because the impact of

38
00:05:37,780 --> 00:05:47,500
 the OS and the challenges are bigger than ever. That's a short answer. Okay. And here

39
00:05:47,500 --> 00:05:52,920
 it's again, it's not a problem during this lecture if you don't understand everything.

40
00:05:52,920 --> 00:06:02,160
 This is, you know, we are in here to provide some kind of end to end feeling about what

41
00:06:02,160 --> 00:06:08,160
 the operating system is doing. But the rest of the class, we are going to dive in and

42
00:06:08,160 --> 00:06:13,240
 we are going to, you know, to look at all these aspects I'm going to touch during this

43
00:06:13,240 --> 00:06:19,840
 lecture in more detail. So basically it's again, it's an application you want to run

44
00:06:19,840 --> 00:06:27,000
 an application, run a program and you have to run it on top of the hardware. Now, what

45
00:06:27,000 --> 00:06:33,080
 is a hardware consisting from? You have a processor which needs to execute the instructions

46
00:06:33,080 --> 00:06:39,900
 to run your applications and you clearly have a memory, right? We store the data and store

47
00:06:39,900 --> 00:06:46,220
 the program, you store the application code, right? So the processors read the instructions

48
00:06:46,220 --> 00:06:56,480
 and read the data and executes those instructions on the data and this is how your application

49
00:06:56,480 --> 00:07:06,260
 is running. In addition to just memory, you have a cache to keep the most recent data

50
00:07:06,260 --> 00:07:13,280
 or the most accessed data around closer to the processor. So this is obviously for improving

51
00:07:13,280 --> 00:07:22,680
 the performance. You have a page table and TLB translation, look at side buffers, this

52
00:07:22,680 --> 00:07:31,560
 is again, it's our mechanism for improving the performance. And besides that, you have

53
00:07:31,560 --> 00:07:37,680
 a storage where you need to store the data, the program at rest, the processor and memory

54
00:07:37,680 --> 00:07:44,180
 are storing the data and run the program only when they are powered on. And obviously you

55
00:07:44,180 --> 00:07:52,860
 have a lot of peripherals. You have displays, you have a mouse, you have network, you are

56
00:07:52,860 --> 00:07:59,960
 connected to the internet and many more, right? So this is quite complex, right? So now the

57
00:07:59,960 --> 00:08:05,940
 key here and they are connected, right? All of these pieces are connected. So the key

58
00:08:05,940 --> 00:08:15,760
 here is basically how you are going to make easy and secure for the application to run

59
00:08:15,760 --> 00:08:24,080
 on this hardware and also take advantage of the hardware capabilities. Okay. And many

60
00:08:24,080 --> 00:08:32,700
 of these things you learn, like this is a machine structure in CX61C. And it's again,

61
00:08:32,700 --> 00:08:39,500
 one of the main functionality of the operating system is to abstract away this hardware to

62
00:08:39,500 --> 00:08:53,720
 the application. Okay. So let me do this next set of few slides and then I'll stop for

63
00:08:53,720 --> 00:09:03,460
 questions. So one way to think about operating system is this like illusionist, right? And

64
00:09:03,460 --> 00:09:09,340
 why is that? Because again, it's provide this kind of abstraction of the physical resources

65
00:09:09,340 --> 00:09:15,460
 and the abstractions are much easier to use on the applications than the application using

66
00:09:15,460 --> 00:09:24,080
 directly the hardware, right? And one of the way it makes it easier to use, the operating

67
00:09:24,080 --> 00:09:30,380
 system makes easier for the application to use is removing limitations, right? So for

68
00:09:30,380 --> 00:09:36,320
 instance, it provides you the illusion to you being the application, the illusion that

69
00:09:36,320 --> 00:09:42,880
 you are the only one, the application is the only one using that machine. It provides the

70
00:09:42,880 --> 00:09:49,780
 illusion that the memory is like infinite, there are no limits, right? It provides a

71
00:09:49,780 --> 00:09:56,460
 illusion, you know, you have files and data is stored in files. You have users, you have

72
00:09:56,460 --> 00:10:07,780
 messages. So it's a much higher level of abstraction than operating just on bits, right? And the

73
00:10:07,780 --> 00:10:17,840
 main way the operating system provides abstracts these resources, hardware resources to the

74
00:10:17,840 --> 00:10:27,220
 application is through the process. The process is execution environment in which the applications

75
00:10:27,220 --> 00:10:40,460
 run and the process consists of threads. This is basically the concept, the unit of execution.

76
00:10:40,460 --> 00:10:45,860
 It's an address space. This is a unit kind of allocates, allocation, right? Allocate

77
00:10:45,860 --> 00:10:55,620
 the resources and you allocate addresses, memory, and you have access to files and sockets

78
00:10:55,620 --> 00:11:03,860
 to communicate over network, right? So the process encapsulate and provides all this

79
00:11:03,860 --> 00:11:09,240
 abstraction to the application. So the application only need to understand about how to operate

80
00:11:09,240 --> 00:11:14,220
 on threads and address space, how to read, write files, how to communicate over a sockets

81
00:11:14,220 --> 00:11:22,860
 to communicate over network, right? So that's it much easier. And how does application take

82
00:11:22,860 --> 00:11:28,820
 advantage? You write the code and you compile the code and your code is not only the code

83
00:11:28,820 --> 00:11:34,220
 you are writing, but it's going to use also libraries and a bunch of system libraries,

84
00:11:34,220 --> 00:11:42,980
 which are coming with any operating system, right? So again, to summarize the application

85
00:11:42,980 --> 00:11:50,700
 view of machine is that of the process. Each application program runs in its own process

86
00:11:50,700 --> 00:11:58,460
 and this process provides this much higher level, much nicer interfaces than the raw

87
00:11:58,460 --> 00:12:07,540
 hardware. Okay? So it's again, here you can see is like I mentioned, you have the program,

88
00:12:07,540 --> 00:12:13,780
 the code you write, which is going to use some calls to the system libraries, which

89
00:12:13,780 --> 00:12:19,640
 are going basically to implement this API for this abstraction, API, it's application

90
00:12:19,640 --> 00:12:25,480
 programming interfaces to manipulate these abstractions. And then you take care of this,

91
00:12:25,480 --> 00:12:32,400
 you compile it, you get the executable code and that you run it on your machine. Okay?

92
00:12:32,400 --> 00:12:41,740
 So let me stop here and let's see, there is a question. Oh, what OS do you like the best?

93
00:12:41,740 --> 00:12:50,520
 Well, I think that's a good question. I think, look, you know, it's like you, I'm not going

94
00:12:50,520 --> 00:12:56,900
 to surprise you here. I think that our two systems which are quite good, it's and I'm

95
00:12:56,900 --> 00:13:05,860
 using them, it's Linux and Mac OS. And you know, Mac OS, we are going to talk about that.

96
00:13:05,860 --> 00:13:18,880
 It's actually built also of the Unix BSD, which originated from Berkeley. So, okay.

97
00:13:18,880 --> 00:13:26,480
 So please ask questions. I am, and sorry, you know, again, it's I've never used webinar.

98
00:13:26,480 --> 00:13:35,580
 We are using it because it's more scalable, but it's less interactive. And yeah, so, but

99
00:13:35,580 --> 00:13:50,400
 we promise to improve on using these tools. So, excellent. Again, just to summarize, and

100
00:13:50,400 --> 00:13:55,800
 I'm going to repeat a lot of things, you know, a lot of over and over again. So hopefully

101
00:13:55,800 --> 00:14:00,740
 I'm not going to bore you, but you know, there are actually not a lot of big concepts you

102
00:14:00,740 --> 00:14:06,000
 are going to learn in this class, but the concepts are quite difficult and intricate

103
00:14:06,000 --> 00:14:10,200
 it. And also because they need to, they are going to inter-operate and interact with each

104
00:14:10,200 --> 00:14:17,120
 other. But just to summarize a process consists of an address space, one or more thread, and

105
00:14:17,120 --> 00:14:23,440
 this is the controls execution in that address space and a bunch of other resources like

106
00:14:23,440 --> 00:14:33,220
 files, sockets, and things like that. Okay. This is activity monitor. If you go, if you

107
00:14:33,220 --> 00:14:40,860
 have a Mac, if you go on here, you can look and you can see all these processes and you

108
00:14:40,860 --> 00:14:45,160
 can see actually the processes. It tells you also, I think the column probably, I'm not

109
00:14:45,160 --> 00:14:52,020
 sure you see my mouse, but there is a column here called threads, right? So this is your

110
00:14:52,020 --> 00:15:01,900
 unit of execution. So basically for Chrome here, you have 22 threads. So 22 activities

111
00:15:01,900 --> 00:15:12,960
 which are running concurrently in the same process. Okay. So that's one. Again, we abstracting

112
00:15:12,960 --> 00:15:24,600
 away hardware resources to the applications. It's one of the main, main things that the

113
00:15:24,600 --> 00:15:33,020
 application is that the operating system is doing. The main capabilities. Now let's, we

114
00:15:33,020 --> 00:15:37,400
 are going to look for other, we are going to go over the other capabilities that the

115
00:15:37,400 --> 00:15:44,580
 operating system provides and to illustrate the need for the next one. Now assume that

116
00:15:44,580 --> 00:15:50,660
 you are going to have not only one program, but two programs, two applications running

117
00:15:50,660 --> 00:15:59,860
 on your machine. And you know that every actually today, almost every computer your laptop,

118
00:15:59,860 --> 00:16:08,780
 your phone allows you to run multiple applications, which means multiple processes at the same

119
00:16:08,780 --> 00:16:18,480
 time. Right? And this now the point is that it's again, it's like one of the abstractions

120
00:16:18,480 --> 00:16:26,740
 remember that I mentioned that the operating system provides to the application is that

121
00:16:26,740 --> 00:16:33,580
 provides the illusion of a dedicated machine. Right? But now how you are going to do it

122
00:16:33,580 --> 00:16:39,140
 when you are going to have multiple applications running at the same time, because they are

123
00:16:39,140 --> 00:16:46,040
 going to run on the same hardware. And here is where it comes this kind of the other way

124
00:16:46,040 --> 00:16:52,040
 you can look at the operating system as a referee. Because the only way you can provide

125
00:16:52,040 --> 00:16:58,920
 the illusion of two applications and each of them they have their own virtual machine,

126
00:16:58,920 --> 00:17:07,040
 so to speak, is to protect one of each other, to isolate one of each other. Right? That's

127
00:17:07,040 --> 00:17:13,800
 the only way. And here it's just let's go in a little bit more details to illustrate

128
00:17:13,800 --> 00:17:21,760
 the need for that. Now, let's start with a processor. So you have only one processor

129
00:17:21,760 --> 00:17:27,760
 and you have two applications and you have to run on the same processor. At a given time,

130
00:17:27,760 --> 00:17:33,160
 you can run on the processor only one application. So to give the illusion that both of them

131
00:17:33,160 --> 00:17:40,000
 are going to run, you know, they have their own machine, so to speak. The way you do it

132
00:17:40,000 --> 00:17:48,680
 is that you are going to divide the processor time in slots or slices. And each slice you

133
00:17:48,680 --> 00:17:55,080
 have a different application running. The slices are, you know, a few milliseconds.

134
00:17:55,080 --> 00:18:02,680
 One millisecond, 10 milliseconds, something like that. Right? So in this particular example,

135
00:18:02,680 --> 00:18:09,720
 you have the brown application, right, running. And if you can see here, the processor accesses

136
00:18:09,720 --> 00:18:19,640
 memory, which is allocated to the brown process, process one, and it reads the code and executes

137
00:18:19,640 --> 00:18:30,160
 that code. So is there a for running program one. Right? But now, next, you will also have

138
00:18:30,160 --> 00:18:37,200
 program two. So for program two, in memory, you also have some piece of, you also have

139
00:18:37,200 --> 00:18:45,200
 some piece of memory which is allocated to process two. Right? And at some point, right,

140
00:18:45,200 --> 00:18:51,760
 you run, and at some point now, I said after a little bit of time, you allocate to program

141
00:18:51,760 --> 00:18:59,560
 one to run. Now you are going to switch to program two. Right? And you are going to run.

142
00:18:59,560 --> 00:19:06,480
 And by doing so and switching at a very high frequency, you give the illusion to each of

143
00:19:06,480 --> 00:19:13,720
 these applications that it's using the computer alone. Right?

144
00:19:13,720 --> 00:19:18,800
 Now, the problem here, if you can see, for instance, if you look at the memory, you're

145
00:19:18,800 --> 00:19:24,120
 having the same memory, physical memory, you have the data from multiple applications,

146
00:19:24,120 --> 00:19:32,040
 and they have to read and write the data. Right? And certainly, you do not want, say

147
00:19:32,040 --> 00:19:39,860
 in this case, a program two or process two to read or even more to write the data in

148
00:19:39,860 --> 00:19:47,600
 process one, of process one. Right? You also don't want any process two or for that matter

149
00:19:47,600 --> 00:19:58,120
 of fact, any process to write, to modify the operating system memory. Right? Right?

150
00:19:58,140 --> 00:20:00,860
 because then the operating system may crash, right?

151
00:20:00,860 --> 00:20:02,140
 If you let out an application,

152
00:20:02,140 --> 00:20:05,740
 modify the operating system in memory, right?

153
00:20:05,740 --> 00:20:10,500
 And also you need to be careful with the storage, right?

154
00:20:10,500 --> 00:20:15,500
 You shouldn't allow one program of one user

155
00:20:15,500 --> 00:20:21,580
 to modify the data of another users,

156
00:20:21,580 --> 00:20:26,620
 especially if that data is private or read it, okay?

157
00:20:28,020 --> 00:20:31,260
 So this is what we mean now you need to,

158
00:20:31,260 --> 00:20:32,660
 you protect, protection.

159
00:20:32,660 --> 00:20:35,540
 So you need to protect one application,

160
00:20:35,540 --> 00:20:36,780
 one process from another.

161
00:20:36,780 --> 00:20:40,300
 You need to protect one process from the operating system

162
00:20:40,300 --> 00:20:44,660
 and protect the operating system from the process, right?

163
00:20:44,660 --> 00:20:51,700
 So when an application on a program tries to

164
00:20:54,220 --> 00:20:59,220
 execute some of these actions, which are precluded,

165
00:20:59,220 --> 00:21:04,700
 like accessing the data of, or the memory,

166
00:21:04,700 --> 00:21:07,460
 which belongs to another process

167
00:21:07,460 --> 00:21:11,220
 or accessing the memory belongs to the operating system.

168
00:21:11,220 --> 00:21:15,780
 The operating system, one way is going to deal with this

169
00:21:15,780 --> 00:21:19,820
 offending application is crashing, crashing the processes,

170
00:21:19,820 --> 00:21:22,220
 segmentation fault, okay?

171
00:21:22,220 --> 00:21:27,220
 But it's again, the main point here is that

172
00:21:27,220 --> 00:21:32,300
 in order to create this illusion of,

173
00:21:32,300 --> 00:21:36,140
 to a process that they are using the machine alone,

174
00:21:36,140 --> 00:21:39,700
 you need to isolate and to protect processes

175
00:21:39,700 --> 00:21:40,540
 from each other.

176
00:21:40,540 --> 00:21:45,660
 Also in order to make sure that the operating system itself

177
00:21:45,660 --> 00:21:50,380
 is not crashes as a result of processes,

178
00:21:52,020 --> 00:21:56,060
 modifying operating system data,

179
00:21:56,060 --> 00:21:58,580
 then you need also to,

180
00:21:58,580 --> 00:22:02,340
 we need also to isolate the operating system itself

181
00:22:02,340 --> 00:22:03,620
 from the processes.

182
00:22:03,620 --> 00:22:12,020
 So let's see.

183
00:22:12,020 --> 00:22:17,620
 Okay, I was looking at the question,

184
00:22:17,620 --> 00:22:20,060
 why is a good time for learning OS right now?

185
00:22:20,060 --> 00:22:24,300
 It's again, we are going stick around until,

186
00:22:24,300 --> 00:22:26,660
 you know, for the next half an hour or so.

187
00:22:26,660 --> 00:22:35,860
 Okay, so now the last way we can look at the

188
00:22:35,860 --> 00:22:40,140
 operating system is like a glue, right?

189
00:22:40,140 --> 00:22:42,260
 So why is that?

190
00:22:42,260 --> 00:22:46,180
 It's again, it's like, it's very logic, right?

191
00:22:46,180 --> 00:22:47,020
 It's logical.

192
00:22:48,020 --> 00:22:51,980
 First, you need to abstract away the hardware

193
00:22:51,980 --> 00:22:54,900
 to make it much easier for the application developers

194
00:22:54,900 --> 00:22:56,220
 to write applications.

195
00:22:56,220 --> 00:23:02,820
 Second, you need to provide protection, isolations,

196
00:23:02,820 --> 00:23:05,220
 because typically you are going to have multiple

197
00:23:05,220 --> 00:23:10,220
 applications, multiple processes sharing the same hardware.

198
00:23:10,220 --> 00:23:16,700
 And the final part is that these applications

199
00:23:16,900 --> 00:23:20,660
 or some applications are communicating with each other.

200
00:23:20,660 --> 00:23:24,500
 So you need to provide some kind of glue between them.

201
00:23:24,500 --> 00:23:28,100
 You provide some common services.

202
00:23:28,100 --> 00:23:34,500
 And this is coming in the form of networking or storage,

203
00:23:34,500 --> 00:23:38,660
 right? You can, application can communicate through files.

204
00:23:38,660 --> 00:23:40,020
 One application writing a file,

205
00:23:40,020 --> 00:23:41,860
 another application reads from a file.

206
00:23:43,940 --> 00:23:48,540
 And obviously this also comes with authorization

207
00:23:48,540 --> 00:23:49,540
 and things like that.

208
00:23:49,540 --> 00:23:55,740
 But this is when you can think about the operating system

209
00:23:55,740 --> 00:23:58,540
 as a glue, right?

210
00:23:58,540 --> 00:24:04,980
 And they need to provide the communications,

211
00:24:04,980 --> 00:24:09,900
 enable you the ability to share the resources.

212
00:24:09,900 --> 00:24:14,500
 And again, the operating system is doing that

213
00:24:14,500 --> 00:24:17,100
 by providing these common services,

214
00:24:17,100 --> 00:24:20,780
 file systems, networking, and so forth.

215
00:24:20,780 --> 00:24:23,940
 Okay?

216
00:24:23,940 --> 00:24:25,100
 So I'm going to stop here.

217
00:24:25,100 --> 00:24:26,740
 Are there any questions?

218
00:24:26,740 --> 00:24:35,660
 So one question is what are the methods

219
00:24:35,660 --> 00:24:38,900
 that allow different processes to talk with each other?

220
00:24:39,900 --> 00:24:43,420
 I know with socket communication, it's a valid method.

221
00:24:43,420 --> 00:24:44,660
 So there are a few of them

222
00:24:44,660 --> 00:24:47,620
 and we are going to learn about them.

223
00:24:47,620 --> 00:24:49,740
 Yeah, one is socket communication.

224
00:24:49,740 --> 00:24:52,540
 So it's like networking, right?

225
00:24:52,540 --> 00:24:56,300
 You can communicate with each other, two processes,

226
00:24:56,300 --> 00:24:57,940
 whether they are on the same machine

227
00:24:57,940 --> 00:25:00,860
 or different machines through sockets,

228
00:25:00,860 --> 00:25:02,860
 through a network interface.

229
00:25:02,860 --> 00:25:05,420
 Okay?

230
00:25:06,620 --> 00:25:09,260
 The processes which are on the same machine,

231
00:25:09,260 --> 00:25:11,780
 they can also communicate through shared memory.

232
00:25:11,780 --> 00:25:13,900
 You can also have the ability

233
00:25:13,900 --> 00:25:15,740
 to communicate through shared memory.

234
00:25:15,740 --> 00:25:18,540
 And also, like I mentioned earlier,

235
00:25:18,540 --> 00:25:20,580
 you can communicate through storage.

236
00:25:20,580 --> 00:25:26,020
 An application can write a piece of data

237
00:25:26,020 --> 00:25:29,100
 on the local file system,

238
00:25:29,100 --> 00:25:31,900
 or even for a global file system,

239
00:25:31,900 --> 00:25:34,780
 and others application can read.

240
00:25:35,780 --> 00:25:36,620
 Okay?

241
00:25:36,620 --> 00:25:42,060
 Is a processor just what we call a CPU?

242
00:25:42,060 --> 00:25:46,780
 Yes, for most cases, these are interchangeable.

243
00:25:46,780 --> 00:25:50,380
 Although we are also going to call processor

244
00:25:50,380 --> 00:25:54,060
 like specialized hardware, specialized processors.

245
00:25:54,060 --> 00:25:56,660
 So processor is a little bit broader,

246
00:25:56,660 --> 00:25:59,380
 but unless otherwise specified, they are equivalent.

247
00:26:02,540 --> 00:26:06,660
 Will ARM replace x86 in consumer space soon?

248
00:26:06,660 --> 00:26:14,100
 Well, it's clear that ARM has a lot of momentum right now.

249
00:26:14,100 --> 00:26:20,380
 One example, it's obviously it's M1 from Apple.

250
00:26:20,380 --> 00:26:28,060
 And you see that become more and more powerful,

251
00:26:28,060 --> 00:26:33,060
 but there are also ARM starts to be deployed in data centers.

252
00:26:33,060 --> 00:26:38,100
 Actually, there is one new instance

253
00:26:38,100 --> 00:26:41,500
 which from Amazon called Graviton.

254
00:26:41,500 --> 00:26:44,340
 And this is around ARM processor.

255
00:26:44,340 --> 00:26:47,220
 And it's quite fast.

256
00:26:47,220 --> 00:26:50,540
 It's actually has very good performance and it's cheaper.

257
00:26:50,540 --> 00:26:53,660
 Now we'll see, right?

258
00:26:53,660 --> 00:26:57,100
 Because you know what Intel is going to do,

259
00:26:57,100 --> 00:27:01,500
 clearly they announced a bunch of initiatives, but yes.

260
00:27:01,500 --> 00:27:06,500
 ARM, it's has a lot of momentum at this point.

261
00:27:06,500 --> 00:27:11,740
 Okay.

262
00:27:11,740 --> 00:27:20,540
 Let me go here.

263
00:27:20,540 --> 00:27:26,020
 Yeah, there is something about virtualization.

264
00:27:26,020 --> 00:27:27,780
 There is something about,

265
00:27:27,780 --> 00:27:29,220
 there are a few more questions here.

266
00:27:29,220 --> 00:27:31,420
 Let me answer them.

267
00:27:31,420 --> 00:27:36,700
 It's one question on the chat.

268
00:27:36,700 --> 00:27:41,700
 By the way, please try to ask question for on Q&A.

269
00:27:41,700 --> 00:27:46,500
 So I have one source I can read them from.

270
00:27:46,500 --> 00:27:54,260
 So yeah, there are a few more questions here.

271
00:27:54,620 --> 00:27:59,620
 Yeah, there are some comments about VMware,

272
00:27:59,620 --> 00:28:00,980
 about virtualization.

273
00:28:00,980 --> 00:28:03,180
 Yes, we are going to talk about virtualization

274
00:28:03,180 --> 00:28:06,620
 even a little bit during this lecture.

275
00:28:06,620 --> 00:28:13,060
 But yes, virtualization is a way to provide the illusion

276
00:28:13,060 --> 00:28:15,780
 to every process, to every application

277
00:28:15,780 --> 00:28:20,620
 that they are using alone the machine.

278
00:28:21,980 --> 00:28:25,500
 There is another question about RISC-V.

279
00:28:25,500 --> 00:28:29,100
 This obviously was done at Berkeley.

280
00:28:29,100 --> 00:28:34,100
 I think RISC-V has a great future.

281
00:28:34,100 --> 00:28:38,700
 And for those of you who don't know,

282
00:28:38,700 --> 00:28:42,900
 RISC-V is an open instruction set architecture,

283
00:28:42,900 --> 00:28:47,900
 which means that you don't need to pay any license to use it

284
00:28:48,980 --> 00:28:52,620
 to build processors around it.

285
00:28:52,620 --> 00:28:58,860
 In contrast ARM, for ARM you need to pay license

286
00:28:58,860 --> 00:29:03,860
 in order to use and to provide the ARM instruction set.

287
00:29:03,860 --> 00:29:15,940
 But RISC-V now it's targeting Internet of Things

288
00:29:16,420 --> 00:29:21,420
 or mobile devices, very low power.

289
00:29:21,420 --> 00:29:27,380
 This is how they started, but this is the way ARM started.

290
00:29:27,380 --> 00:29:32,780
 So you'll see maybe RISC, there is a chance

291
00:29:32,780 --> 00:29:36,900
 they are going to follow the trajectory of ARM

292
00:29:36,900 --> 00:29:41,900
 and it can become for ARM what ARM is for Intel, right?

293
00:29:41,900 --> 00:29:44,820
 But it's okay, it's obvious.

294
00:29:44,820 --> 00:29:49,820
 This is in the future, but obviously it has a lot of promise.

295
00:29:49,820 --> 00:29:55,820
 Okay, I'm going to go back now to the lecture slides.

296
00:29:55,820 --> 00:30:03,140
 Oops, okay.

297
00:30:03,140 --> 00:30:09,580
 So it's again, this is give examples

298
00:30:09,580 --> 00:30:13,060
 about some of the services which are provided

299
00:30:13,060 --> 00:30:15,820
 by the operating system, we didn't discuss so far.

300
00:30:15,820 --> 00:30:22,100
 And some of the management services

301
00:30:22,100 --> 00:30:24,740
 and that the operating system provides

302
00:30:24,740 --> 00:30:27,660
 and maybe you do not think right away to them.

303
00:30:27,660 --> 00:30:31,020
 It's like power management, right?

304
00:30:31,020 --> 00:30:33,460
 Well, especially for mobile devices,

305
00:30:33,460 --> 00:30:37,020
 you need to manage the power and across the application,

306
00:30:37,020 --> 00:30:40,020
 you have a application which use a disproportionate amount

307
00:30:40,020 --> 00:30:41,980
 of battery, maybe you want to isolate

308
00:30:41,980 --> 00:30:44,300
 to protect other application from that.

309
00:30:44,300 --> 00:30:48,780
 And of course you need to manage the network,

310
00:30:48,780 --> 00:30:53,340
 you need to manage almost every shared resource, right?

311
00:30:53,340 --> 00:31:00,060
 When I mean share, I refer share by multiple applications.

312
00:31:00,060 --> 00:31:05,060
 Okay, so in summary, it's again repeating, right?

313
00:31:05,060 --> 00:31:09,500
 There are three things an operating system is doing.

314
00:31:09,500 --> 00:31:13,460
 One is providing a clean, easy to use abstractions

315
00:31:13,460 --> 00:31:16,220
 of the physical resources to the application,

316
00:31:16,220 --> 00:31:19,060
 make it much easier for application developers

317
00:31:19,060 --> 00:31:21,100
 to develop this application.

318
00:31:21,100 --> 00:31:23,420
 And this piece like you can think about this,

319
00:31:23,420 --> 00:31:25,580
 like is like you lose your list.

320
00:31:25,580 --> 00:31:31,780
 Then which follows from providing clean abstractions,

321
00:31:31,780 --> 00:31:34,540
 you can think about operating system as a referee.

322
00:31:34,540 --> 00:31:38,780
 And in this case, the operating system provides protection

323
00:31:38,780 --> 00:31:42,820
 and isolations of shared resources

324
00:31:42,820 --> 00:31:47,820
 across for multiple applications, right?

325
00:31:47,820 --> 00:31:53,100
 We share those resources, okay?

326
00:31:53,100 --> 00:31:58,020
 And the final is that it's a glue

327
00:31:58,020 --> 00:32:02,540
 that operating system provides common services

328
00:32:02,540 --> 00:32:06,940
 and in particularly also enables this application

329
00:32:06,940 --> 00:32:09,700
 to communicate to each other, right?

330
00:32:09,700 --> 00:32:16,700
 So now let's talk a little bit more

331
00:32:16,700 --> 00:32:21,740
 about CS162 in general,

332
00:32:21,740 --> 00:32:25,260
 and then talk a little bit about why now

333
00:32:25,260 --> 00:32:28,900
 and why it's exciting and challenging.

334
00:32:28,900 --> 00:32:32,700
 So why take CS162?

335
00:32:32,700 --> 00:32:35,140
 It's again, because some of you will actually design

336
00:32:35,140 --> 00:32:38,780
 and build operating system or components of them,

337
00:32:38,780 --> 00:32:41,100
 like file systems, right?

338
00:32:41,100 --> 00:32:45,340
 You go to Google, you may work on Android, for instance.

339
00:32:45,340 --> 00:32:48,300
 You go to Apple, you may, or Microsoft,

340
00:32:48,300 --> 00:32:50,820
 you may work on their operating systems.

341
00:32:50,820 --> 00:32:54,300
 Or if you are to any company,

342
00:32:54,300 --> 00:32:58,580
 which depend running its software on Linux,

343
00:32:58,580 --> 00:33:02,980
 you may work on Linux to provide new capabilities

344
00:33:02,980 --> 00:33:06,540
 for the applications that are important for your company.

345
00:33:06,540 --> 00:33:14,180
 But many of you are going to build software

346
00:33:14,180 --> 00:33:17,220
 which run on top of the operating systems.

347
00:33:17,220 --> 00:33:18,820
 And to build better software,

348
00:33:18,820 --> 00:33:22,300
 you need to understand how the operating system was working.

349
00:33:22,300 --> 00:33:26,140
 You need to understand the concepts, right?

350
00:33:26,140 --> 00:33:29,340
 So that's what it is.

351
00:33:29,340 --> 00:33:32,780
 So next time I'm going to talk about

352
00:33:32,780 --> 00:33:36,100
 what makes operating system exciting and challenging.

353
00:33:36,100 --> 00:33:39,020
 And let me check again for the questions.

354
00:33:39,020 --> 00:33:54,940
 How can application interact with these common services?

355
00:33:54,940 --> 00:33:58,420
 Through the API, application programming interfaces.

356
00:34:00,100 --> 00:34:03,700
 I mentioned a little bit in passing earlier on.

357
00:34:03,700 --> 00:34:08,700
 And these are exposed by system libraries, right?

358
00:34:08,700 --> 00:34:12,980
 For instance, if you want to access a file,

359
00:34:12,980 --> 00:34:16,340
 you are going to have an API to access that file.

360
00:34:16,340 --> 00:34:18,420
 Read, write, seek.

361
00:34:18,420 --> 00:34:23,420
 The same for communication, sending and receiving data.

362
00:34:23,420 --> 00:34:26,980
 You are going to have another API.

363
00:34:27,900 --> 00:34:30,260
 And this is exposed by the system libraries

364
00:34:30,260 --> 00:34:32,340
 and implement it.

365
00:34:32,340 --> 00:34:35,340
 Well, why does searching for files

366
00:34:35,340 --> 00:34:39,100
 on Windows File Explorer feel super slow?

367
00:34:39,100 --> 00:34:40,300
 Unfortunately, I don't know.

368
00:34:40,300 --> 00:34:42,100
 I have no answer to that question,

369
00:34:42,100 --> 00:34:43,860
 but if you get the answer,

370
00:34:43,860 --> 00:34:45,500
 I'll be interested in the answer.

371
00:34:45,500 --> 00:34:53,540
 Okay, so in short,

372
00:34:53,540 --> 00:34:58,420
 what makes the system, the operating system,

373
00:34:58,420 --> 00:35:01,980
 now extremely exciting

374
00:35:01,980 --> 00:35:04,220
 is because there are many things happening.

375
00:35:04,220 --> 00:35:06,100
 In the next few slides,

376
00:35:06,100 --> 00:35:08,100
 I'm going to tell you what happens.

377
00:35:08,100 --> 00:35:13,100
 And these things actually makes operating systems,

378
00:35:13,100 --> 00:35:19,460
 addressing the operating system problems more difficult

379
00:35:19,460 --> 00:35:22,580
 and hopefully more rewarding once you solve the problems.

380
00:35:23,580 --> 00:35:26,900
 So as you probably know, and you heard that,

381
00:35:26,900 --> 00:35:29,700
 I'm sure everyone heard that many times,

382
00:35:29,700 --> 00:35:34,020
 for the most than, more than 50 years,

383
00:35:34,020 --> 00:35:38,700
 all our industry, hardware industry, software industry,

384
00:35:38,700 --> 00:35:43,700
 and large part was really driven by the morsel.

385
00:35:43,700 --> 00:35:51,100
 Machines are harder becoming more and more powerful,

386
00:35:51,100 --> 00:35:52,100
 very fast.

387
00:35:52,100 --> 00:35:55,940
 So according to Gordon Moore,

388
00:35:55,940 --> 00:35:58,860
 who was a co-founder of Intel,

389
00:35:58,860 --> 00:36:02,180
 in '65 he predicted that the transistor density

390
00:36:02,180 --> 00:36:06,060
 of semiconductor chips will double roughly every two years.

391
00:36:06,060 --> 00:36:10,220
 That's a morsel, right?

392
00:36:10,220 --> 00:36:14,460
 And you have this plus here and you see a line,

393
00:36:14,460 --> 00:36:17,620
 but you see a line on the X axis is the time,

394
00:36:17,620 --> 00:36:21,100
 on the Y axis it's the performance

395
00:36:21,100 --> 00:36:22,900
 or the number of transistors.

396
00:36:22,900 --> 00:36:26,660
 And you have a line, why?

397
00:36:26,660 --> 00:36:28,820
 Because the Y axis is in log scale.

398
00:36:28,820 --> 00:36:35,660
 Now, Moore's law says every,

399
00:36:35,660 --> 00:36:40,140
 the transistor density doubles roughly every two years.

400
00:36:40,140 --> 00:36:42,340
 So in the same, on the same area,

401
00:36:42,340 --> 00:36:46,180
 you can cram twice as many transistors.

402
00:36:46,180 --> 00:36:50,660
 And this leads to the performance of the processor,

403
00:36:50,660 --> 00:36:54,020
 doubling roughly every 18 months.

404
00:36:54,020 --> 00:36:55,780
 Why discrepancy?

405
00:36:55,780 --> 00:36:59,620
 The discrepancy is because since the transistors

406
00:36:59,620 --> 00:37:01,540
 are becoming closer to each other,

407
00:37:01,540 --> 00:37:05,260
 the latency between transistors to communicate

408
00:37:05,260 --> 00:37:07,860
 between transistors decreases.

409
00:37:07,860 --> 00:37:11,460
 And therefore you have double reasons.

410
00:37:11,460 --> 00:37:14,620
 You know, you have, there are these compounds.

411
00:37:15,620 --> 00:37:19,420
 To increasing the transistor density.

412
00:37:19,420 --> 00:37:23,860
 And therefore the performance increases a little bit faster

413
00:37:23,860 --> 00:37:25,820
 or used to increase a little bit faster.

414
00:37:25,820 --> 00:37:28,300
 Okay?

415
00:37:28,300 --> 00:37:34,780
 The challenge is that the Moore's law ended.

416
00:37:34,780 --> 00:37:38,660
 Okay?

417
00:37:38,660 --> 00:37:42,660
 This again, it shows here the performance

418
00:37:43,660 --> 00:37:48,660
 and versus time, the performance of a single core

419
00:37:48,660 --> 00:37:50,100
 of a processor.

420
00:37:50,100 --> 00:37:56,580
 And between 1985 and 2002 or 2003,

421
00:37:56,580 --> 00:38:00,860
 this was where you see here with green,

422
00:38:00,860 --> 00:38:05,860
 this is the golden age, so to speak.

423
00:38:05,860 --> 00:38:12,140
 Because in this period, performance,

424
00:38:13,300 --> 00:38:18,300
 increased, doubled every 18 months

425
00:38:18,300 --> 00:38:20,900
 or increased 52% every year.

426
00:38:20,900 --> 00:38:28,380
 And the problem right now is that this performance per core

427
00:38:28,380 --> 00:38:31,980
 increases just a few percent every year.

428
00:38:31,980 --> 00:38:33,740
 Okay?

429
00:38:33,740 --> 00:38:35,580
 So that's it.

430
00:38:35,580 --> 00:38:37,540
 Okay?

431
00:38:37,540 --> 00:38:39,980
 So this is a big problem.

432
00:38:39,980 --> 00:38:42,900
 And why is this a big problem?

433
00:38:42,900 --> 00:38:47,220
 Because at the time when the capabilities of a single core

434
00:38:47,220 --> 00:38:52,380
 basically are no longer increasing.

435
00:38:52,380 --> 00:38:57,180
 The demands of the new applications

436
00:38:57,180 --> 00:38:59,380
 are increasing faster than ever.

437
00:38:59,380 --> 00:39:08,100
 So here it's a plot, open AI plot.

438
00:39:08,100 --> 00:39:10,980
 Many of you maybe may have seen it.

439
00:39:10,980 --> 00:39:15,980
 And it shows compute requirements

440
00:39:15,980 --> 00:39:19,740
 to train the state of the art models.

441
00:39:19,740 --> 00:39:25,180
 This is plot was going back to 2012, was published in 2019.

442
00:39:25,180 --> 00:39:29,020
 Again, it's a log scale.

443
00:39:29,020 --> 00:39:34,020
 And if you look here, this growth is absolutely astounding.

444
00:39:34,020 --> 00:39:39,140
 The requirements, compute requirements

445
00:39:40,140 --> 00:39:44,980
 grew 35 times every 18 months.

446
00:39:44,980 --> 00:39:52,260
 And I added here another data point for 2020.

447
00:39:52,260 --> 00:39:54,340
 A new model was released, if you remember,

448
00:39:54,340 --> 00:39:56,580
 a little more than one year ago, GPT-C.

449
00:39:56,580 --> 00:40:01,120
 3 from OpenAI made a lot of waves.

450
00:40:01,120 --> 00:40:07,560
 It has 175 million parameters.

451
00:40:07,560 --> 00:40:09,880
 And it's again, it fills a curve.

452
00:40:09,880 --> 00:40:13,100
 And this again, is not only esoteric models.

453
00:40:13,100 --> 00:40:21,160
 You have models like GPT-3 is actually language model,

454
00:40:21,160 --> 00:40:24,880
 video model, pattern recognition,

455
00:40:24,880 --> 00:40:28,200
 and things like that.

456
00:40:28,200 --> 00:40:29,520
 And now here is a Moore's law.

457
00:40:29,520 --> 00:40:33,120
 Actually, the Moore's law even forget that it ended.

458
00:40:33,120 --> 00:40:38,000
 Even if it weren't ended, we would be in a big trouble.

459
00:40:38,000 --> 00:40:39,080
 But of course, it ended.

460
00:40:39,080 --> 00:40:41,200
 And this is actually how the Moore's law looked like.

461
00:40:41,200 --> 00:40:46,040
 So you see the gap.

462
00:40:46,040 --> 00:40:46,880
 This is huge.

463
00:40:46,880 --> 00:40:48,120
 And this is exponential.

464
00:40:48,120 --> 00:40:52,040
 It's again, you have a log scale here.

465
00:40:52,040 --> 00:40:56,720
 And the gap increases exponentially every year

466
00:40:56,720 --> 00:40:59,480
 or every day if you want.

467
00:40:59,480 --> 00:41:01,880
 OK?

468
00:41:01,880 --> 00:41:03,240
 So now what do you do about it?

469
00:41:03,240 --> 00:41:11,020
 Of course, you heard about specialized processors.

470
00:41:11,020 --> 00:41:16,040
 You have GPUs like Nvidia GPUs.

471
00:41:16,040 --> 00:41:18,600
 A100 is the latest one.

472
00:41:18,600 --> 00:41:26,960
 TPUs from TensorFlow processor units, from Google.

473
00:41:26,960 --> 00:41:31,680
 Cerebras, this is a company building huge chips,

474
00:41:31,680 --> 00:41:33,600
 very powerful.

475
00:41:33,600 --> 00:41:37,520
 And everyone else builds their own version of GPU.

476
00:41:37,520 --> 00:41:43,460
 Intel, Alchemist, Newer Announcement, AMD, Radion,

477
00:41:43,460 --> 00:41:46,000
 and so forth.

478
00:41:46,000 --> 00:41:50,680
 So the main idea here, obviously with this specialized hardware,

479
00:41:50,680 --> 00:41:54,480
 is that you are going to narrow the workloads you

480
00:41:54,480 --> 00:41:56,840
 want to support.

481
00:41:56,840 --> 00:41:59,680
 And because of that, you know more about that workload.

482
00:41:59,680 --> 00:42:02,600
 So you can do more optimizations.

483
00:42:02,600 --> 00:42:07,560
 And you can be smarter in the way you design the chip.

484
00:42:07,560 --> 00:42:10,480
 You increase the parallelism and things like that.

485
00:42:10,480 --> 00:42:14,080
 So you can make it much faster for that workload

486
00:42:14,080 --> 00:42:16,440
 than a general proposed processor.

487
00:42:16,440 --> 00:42:22,320
 But now you need to program these things as well.

488
00:42:22,320 --> 00:42:25,400
 You may need to share these things as well.

489
00:42:25,400 --> 00:42:29,200
 And they are going to be quite different from the CPUs.

490
00:42:29,200 --> 00:42:31,600
 And who has to deal with that?

491
00:42:31,600 --> 00:42:34,800
 That's biggest stand if your operating system

492
00:42:34,800 --> 00:42:37,120
 has to deal with it.

493
00:42:37,120 --> 00:42:37,620
 OK?

494
00:42:40,760 --> 00:42:47,160
 Now, the problem is that even with this specialized hardware,

495
00:42:47,160 --> 00:42:48,560
 they help.

496
00:42:48,560 --> 00:42:51,800
 Obviously, they are more powerful than a single core.

497
00:42:51,800 --> 00:43:00,960
 But still, they don't close the gap.

498
00:43:00,960 --> 00:43:06,680
 And here, it's the performance of the GPUs and of the TPUs

499
00:43:06,680 --> 00:43:13,160
 on the same plot.

500
00:43:13,160 --> 00:43:15,880
 And there is a star here, basically,

501
00:43:15,880 --> 00:43:20,400
 saying we are assuming in order to make sense

502
00:43:20,400 --> 00:43:26,400
 and to normalize, typically, in particular,

503
00:43:26,400 --> 00:43:32,000
 based on open AI data, the utilization of the hardware

504
00:43:32,000 --> 00:43:35,080
 by this state-of-the-art training algorithms

505
00:43:35,080 --> 00:43:37,480
 is like 33%.

506
00:43:37,480 --> 00:43:41,040
 So when I show the performance of the GPUs and TPUs here,

507
00:43:41,040 --> 00:43:43,560
 I am factoring it for that utilization.

508
00:43:43,560 --> 00:43:51,960
 So that's a huge problem, right?

509
00:43:51,960 --> 00:43:53,880
 Even with the CPUs and GPUs.

510
00:43:53,880 --> 00:43:58,480
 And these memory demands are growing as fast, even faster.

511
00:43:58,480 --> 00:44:02,360
 So here, it's a log-log scale.

512
00:44:02,360 --> 00:44:06,320
 Here is the number of parameters of these models.

513
00:44:06,320 --> 00:44:10,320
 And this is from 2016.

514
00:44:10,320 --> 00:44:16,080
 And now, the last point is this Vodao.

515
00:44:16,080 --> 00:44:18,960
 This is from China.

516
00:44:18,960 --> 00:44:26,400
 And this is 1.75 trillion parameters.

517
00:44:26,400 --> 00:44:31,200
 So it's 10 times larger than GPT-3.

518
00:44:31,200 --> 00:44:32,680
 And I'm sure you are going to hear

519
00:44:32,680 --> 00:44:35,920
 about other announcement, even bigger models.

520
00:44:35,920 --> 00:44:38,240
 So if you plot and if you look at this data,

521
00:44:38,240 --> 00:44:40,440
 it's again, it's again log scale,

522
00:44:40,440 --> 00:44:43,520
 although it may not look like.

523
00:44:43,520 --> 00:44:46,000
 Since 2016, the size of this model

524
00:44:46,000 --> 00:44:48,520
 increased 40 times every 18 months.

525
00:44:48,520 --> 00:44:54,640
 And if you look at the last three years, 340 times.

526
00:44:54,640 --> 00:44:58,800
 This is phenomenal.

527
00:44:58,800 --> 00:45:06,560
 During this time, the GPU memory, 1.7x every 18 months.

528
00:45:06,560 --> 00:45:14,040
 So it used to be, not a few years back, in 2017, '18,

529
00:45:14,040 --> 00:45:19,440
 you can fit the largest models on a single GPU.

530
00:45:19,440 --> 00:45:23,240
 Now, you need more than 1,000 GPUs

531
00:45:23,240 --> 00:45:25,760
 just to store the parameters of the largest models.

532
00:45:25,760 --> 00:45:26,260
 OK?

533
00:45:26,260 --> 00:45:37,240
 So let's see what are the other trends.

534
00:45:37,240 --> 00:45:38,800
 Now, let's move to storage capacity.

535
00:45:38,800 --> 00:45:40,320
 Storage capacity is still growing,

536
00:45:40,320 --> 00:45:43,280
 still growing exponentially.

537
00:45:43,280 --> 00:45:51,280
 And the one thing here, it used to be dominating the storage

538
00:45:51,280 --> 00:45:53,440
 by hard disk drives.

539
00:45:53,440 --> 00:45:54,400
 No longer.

540
00:45:54,400 --> 00:45:59,240
 Now, you have more and more solid state devices.

541
00:45:59,240 --> 00:46:07,240
 And you can see here the capacity of a solid state drive

542
00:46:07,240 --> 00:46:14,000
 started to exceed in 2015, '16.

543
00:46:14,000 --> 00:46:17,840
 So the biggest SSD drive exceeded

544
00:46:17,840 --> 00:46:22,560
 the capacity of the biggest, hardest drive around 2015

545
00:46:22,560 --> 00:46:24,320
 to '16.

546
00:46:24,320 --> 00:46:28,200
 And today, if you are looking, the largest SSD,

547
00:46:28,200 --> 00:46:32,480
 3.5 inch drive, is 100 terabytes.

548
00:46:32,480 --> 00:46:36,360
 The largest SSD is 18 terabytes.

549
00:46:36,360 --> 00:46:42,000
 Now, you are going to pay dearly for this 100 terabyte SSD

550
00:46:42,000 --> 00:46:42,840
 drive.

551
00:46:42,840 --> 00:46:45,280
 It costs 40K.

552
00:46:45,280 --> 00:46:47,720
 It's 400 per terabytes.

553
00:46:47,720 --> 00:46:51,480
 While to get 18 terabytes, sorry, this

554
00:46:51,480 --> 00:46:53,120
 is hardest drive.

555
00:46:53,120 --> 00:46:53,800
 I'm sorry.

556
00:46:53,800 --> 00:46:55,840
 I'm going to just correct this one.

557
00:46:55,840 --> 00:47:03,200
 OK?

558
00:47:03,200 --> 00:47:11,040
 So for that, you pay only $600, so you're $33 per terabytes.

559
00:47:11,040 --> 00:47:16,600
 Now, you can have more economical choices

560
00:47:16,600 --> 00:47:17,880
 when you look at the SSDs.

561
00:47:17,880 --> 00:47:21,120
 Like, for instance, if you want 4 terabytes SSD,

562
00:47:21,120 --> 00:47:24,720
 it costs $95 per terabyte, still more expensive

563
00:47:24,720 --> 00:47:27,440
 than the hardest drives.

564
00:47:27,440 --> 00:47:32,000
 Despite of this, the SSDs are winning the war.

565
00:47:32,000 --> 00:47:34,400
 There is little question about that.

566
00:47:34,400 --> 00:47:35,200
 And why?

567
00:47:35,200 --> 00:47:38,600
 Because, yes, the hardest drive are cheaper,

568
00:47:38,600 --> 00:47:39,960
 but they are much slower.

569
00:47:39,960 --> 00:47:45,040
 Sometimes between 10x and 100x consumes much more power,

570
00:47:45,040 --> 00:47:50,360
 very important for data center and mobile devices or laptops.

571
00:47:50,360 --> 00:47:54,240
 And they are less reliable.

572
00:47:54,240 --> 00:47:58,200
 And these are some projections to drive home

573
00:47:58,200 --> 00:48:00,800
 that point on the left-hand side.

574
00:48:00,800 --> 00:48:06,520
 It's about, you can see different technologies.

575
00:48:06,520 --> 00:48:11,000
 It is projected up to 2030.

576
00:48:11,000 --> 00:48:16,000
 And you can have here with dark blue, it's SSDs.

577
00:48:16,000 --> 00:48:18,960
 With light blue, it's flash.

578
00:48:18,960 --> 00:48:23,680
 So this is USB, the storage in your camera,

579
00:48:23,680 --> 00:48:25,240
 and things like that.

580
00:48:25,240 --> 00:48:28,760
 And then the yellow, it's actually are tapes.

581
00:48:28,760 --> 00:48:29,960
 It's older technology.

582
00:48:29,960 --> 00:48:32,800
 Probably many of you have never seen a tape,

583
00:48:32,800 --> 00:48:33,960
 but they are very cheap.

584
00:48:33,960 --> 00:48:35,120
 That's why.

585
00:48:35,120 --> 00:48:38,040
 And then, always, the dark orange--

586
00:48:38,040 --> 00:48:41,400
 well, with orange, it's actually hardest drives.

587
00:48:41,400 --> 00:48:50,960
 Also, the same study anticipates that in 2026, actually,

588
00:48:50,960 --> 00:48:56,080
 the SSDs will be cheaper per terabyte than hardest drives.

589
00:48:56,080 --> 00:48:57,800
 And that's why probably you are going to see

590
00:48:57,800 --> 00:49:03,760
 on the left-hand side a point in around 2025

591
00:49:03,760 --> 00:49:11,360
 after which the market share of not only of the hardest drive,

592
00:49:11,360 --> 00:49:12,360
 it's going to decrease.

593
00:49:12,360 --> 00:49:19,800
 Networking, still growing very fast.

594
00:49:19,800 --> 00:49:23,480
 Today, you can have 100-gabits connections

595
00:49:23,480 --> 00:49:27,440
 to your machines in AWS.

596
00:49:27,440 --> 00:49:31,320
 Next will be probably 400-gabits per second.

597
00:49:31,320 --> 00:49:33,480
 And there are other factors.

598
00:49:33,480 --> 00:49:41,040
 It's like, for instance, another important aspect

599
00:49:41,040 --> 00:49:48,240
 is the fact that it used to be early on,

600
00:49:48,240 --> 00:49:54,640
 you have very few huge computers because they

601
00:49:54,640 --> 00:49:58,600
 are extremely expensive, tens of millions of dollars.

602
00:49:58,600 --> 00:50:02,400
 So in that case, you have a lot of people

603
00:50:02,400 --> 00:50:05,640
 using the same machine, right?

604
00:50:05,640 --> 00:50:09,320
 Actually, in '60s, if I remember correctly, or '50s,

605
00:50:09,320 --> 00:50:22,240
 when IBM started to build computers, Watson,

606
00:50:22,240 --> 00:50:26,000
 who was the founder of the IBM and the CEO,

607
00:50:26,000 --> 00:50:27,680
 was saying that he doesn't believe

608
00:50:27,680 --> 00:50:32,440
 that there is a need for more than five or six computers

609
00:50:32,440 --> 00:50:35,920
 in the entire United States.

610
00:50:35,920 --> 00:50:40,880
 And of course, over time, the computers have proliferated,

611
00:50:40,880 --> 00:50:43,160
 become smaller and smaller.

612
00:50:43,160 --> 00:50:46,720
 And it used to be probably in 2000s,

613
00:50:46,720 --> 00:50:50,040
 at the end of the previous century,

614
00:50:50,040 --> 00:50:53,280
 you have one user, one computer.

615
00:50:53,280 --> 00:51:01,120
 And now you have one user with many, many computers.

616
00:51:01,120 --> 00:51:06,800
 If you're in your car alone, you have 10 and 10 of CPUs, right?

617
00:51:06,800 --> 00:51:10,160
 So this change, and as you can imagine,

618
00:51:10,160 --> 00:51:12,160
 this also is going to impact the way

619
00:51:12,160 --> 00:51:15,200
 you are going to design the operating systems.

620
00:51:15,200 --> 00:51:20,280
 And there is another aspect here.

621
00:51:20,280 --> 00:51:28,080
 There is an extreme range of timescales.

622
00:51:28,080 --> 00:51:32,240
 This is from Jeff Dean of Google,

623
00:51:32,240 --> 00:51:35,200
 very influential computer scientist,

624
00:51:35,200 --> 00:51:37,400
 built many of the distributed systems there.

625
00:51:37,400 --> 00:51:44,720
 And if you look about from an application and the operating

626
00:51:44,720 --> 00:51:49,760
 system, you have to deal with a latency as low as lower

627
00:51:49,760 --> 00:51:52,320
 than one second.

628
00:51:52,320 --> 00:51:53,440
 This is L1 cache.

629
00:51:53,440 --> 00:51:56,800
 This is a cache which is the first level cache which

630
00:51:56,800 --> 00:52:01,040
 is on the chip, on chip.

631
00:52:01,040 --> 00:52:03,120
 And all the way, if you are going

632
00:52:03,120 --> 00:52:07,240
 to send a packet to communicate with someone in California

633
00:52:07,240 --> 00:52:09,760
 to Netherlands, it's what?

634
00:52:09,760 --> 00:52:14,280
 It's 150 milliseconds.

635
00:52:14,280 --> 00:52:19,120
 So you need to handle a scale, a difference in scale,

636
00:52:19,120 --> 00:52:26,840
 and range of what, eight order of magnitude, more, OK?

637
00:52:26,840 --> 00:52:35,840
 So basically, let me actually stop here

638
00:52:35,840 --> 00:52:37,240
 and see what are the questions.

639
00:52:37,240 --> 00:52:40,160
 [SIDE CONVERSATION]

640
00:52:40,160 --> 00:52:53,480
 Why does industry Intel Apple say the Moore's Law is not

641
00:52:53,480 --> 00:52:54,000
 over?

642
00:53:01,680 --> 00:53:07,160
 So the Moore's Law, from that very definition of the Moore's

643
00:53:07,160 --> 00:53:10,520
 Law, it is pretty much over.

644
00:53:10,520 --> 00:53:13,360
 It's physical, right?

645
00:53:13,360 --> 00:53:17,000
 What they say is that--

646
00:53:17,000 --> 00:53:24,520
 what this company is saying, it's fundamentally-- look,

647
00:53:24,520 --> 00:53:25,600
 if the Moore's Law--

648
00:53:25,600 --> 00:53:28,520
 if you say that the Moore's Law is over,

649
00:53:28,520 --> 00:53:30,680
 and I'm building chips, why would you build--

650
00:53:30,680 --> 00:53:32,680
 why you would buy chips from me?

651
00:53:32,680 --> 00:53:34,280
 Because this means that the new chips

652
00:53:34,280 --> 00:53:37,040
 will be the same like the old chips.

653
00:53:37,040 --> 00:53:40,160
 No more power, right?

654
00:53:40,160 --> 00:53:46,040
 So there is a limit also of this, that I cannot say that

655
00:53:46,040 --> 00:53:49,840
 the Moore's Law is over, because the Moore's Law is

656
00:53:49,840 --> 00:53:55,160
 what the public associate with the performance, right?

657
00:53:55,160 --> 00:53:59,120
 So it's a limit of also marketing.

658
00:53:59,120 --> 00:54:02,680
 The Moore's Law is over, but the Moore's Law

659
00:54:02,680 --> 00:54:05,280
 has a very precise definition.

660
00:54:05,280 --> 00:54:08,400
 And these companies, they talk to the public,

661
00:54:08,400 --> 00:54:11,480
 and the public doesn't know the precise definition.

662
00:54:11,480 --> 00:54:14,000
 Now, Moore's Law means fast.

663
00:54:14,000 --> 00:54:16,760
 Things become faster and faster.

664
00:54:16,760 --> 00:54:21,360
 Now, in truth, they use a lot of other techniques,

665
00:54:21,360 --> 00:54:24,160
 and we are going to talk about those in order

666
00:54:24,160 --> 00:54:28,080
 to improve the performance, right?

667
00:54:28,080 --> 00:54:33,640
 And this is very visible in your iPhone or in your Android phone.

668
00:54:33,640 --> 00:54:36,480
 And we'll talk a little bit about how they do it.

669
00:54:36,480 --> 00:54:39,160
 But that is not by improving necessarily

670
00:54:39,160 --> 00:54:42,120
 the performance of a single core.

671
00:54:42,120 --> 00:54:51,040
 It's by adding GPUs, neural engines, adding more cores,

672
00:54:51,040 --> 00:54:53,480
 things like that.

673
00:54:53,480 --> 00:54:54,080
 OK?

674
00:54:54,080 --> 00:54:56,160
 We'll talk more about it.

675
00:54:56,160 --> 00:54:58,160
 But good question.

676
00:54:58,160 --> 00:55:00,160
 So there are programs like Spark and Mavic

677
00:55:00,160 --> 00:55:05,320
 that allow us to use networks or computers to process

678
00:55:05,320 --> 00:55:06,440
 a parallel workload.

679
00:55:06,440 --> 00:55:08,240
 But would it be feasible to create

680
00:55:08,240 --> 00:55:10,240
 some type of operating system of software

681
00:55:10,240 --> 00:55:14,840
 that could string together resources of multiple computers

682
00:55:14,840 --> 00:55:16,480
 for personal consumer use?

683
00:55:20,120 --> 00:55:29,160
 I think-- so the question is, is a distributed operating system.

684
00:55:29,160 --> 00:55:32,920
 I think that there is not a coherent operating system,

685
00:55:32,920 --> 00:55:36,560
 but the elements of a operating system, distributed operating

686
00:55:36,560 --> 00:55:39,680
 system, are already there.

687
00:55:39,680 --> 00:55:42,080
 Because one thing you can have, you can have--

688
00:55:42,080 --> 00:55:44,960
 you probably know about Kubernetes.

689
00:55:44,960 --> 00:55:47,760
 Kubernetes provides resource orchestration,

690
00:55:47,760 --> 00:55:52,120
 resource management over multiple machines,

691
00:55:52,120 --> 00:55:53,840
 over a cluster.

692
00:55:53,840 --> 00:55:55,600
 So that's one.

693
00:55:55,600 --> 00:56:00,080
 Then now, then you have distributed file systems,

694
00:56:00,080 --> 00:56:06,360
 like HDFS, or you have these block stores, like AWS S3.

695
00:56:06,360 --> 00:56:09,680
 We'll talk more toward the end of the class.

696
00:56:09,680 --> 00:56:11,680
 It's a good question.

697
00:56:11,680 --> 00:56:15,960
 So probably you should expect that at some point

698
00:56:15,960 --> 00:56:20,080
 you are going to see these kind of pieces coming together

699
00:56:20,080 --> 00:56:23,240
 in a more coherent way in what you could call a distributed

700
00:56:23,240 --> 00:56:23,960
 operating system.

701
00:56:23,960 --> 00:56:40,160
 So fundamentally, it's again-- so why things are exciting?

702
00:56:40,160 --> 00:56:42,200
 Because they are challenging.

703
00:56:42,200 --> 00:56:44,000
 Why are things challenging?

704
00:56:44,000 --> 00:56:46,120
 Because they are complex.

705
00:56:46,120 --> 00:56:50,520
 And this complexity, it's growing fast.

706
00:56:50,520 --> 00:56:52,520
 Why is complexity growing?

707
00:56:52,520 --> 00:56:55,560
 Because you have the demands of your new application

708
00:56:55,560 --> 00:56:57,480
 are growing faster than ever.

709
00:56:57,480 --> 00:57:01,040
 Capabilities of the hardware are no longer

710
00:57:01,040 --> 00:57:03,000
 growing like they used to be.

711
00:57:03,000 --> 00:57:06,200
 So then you need to add to have--

712
00:57:06,200 --> 00:57:08,120
 to innovate on the architecture.

713
00:57:08,120 --> 00:57:10,320
 You have different specialized chips.

714
00:57:10,320 --> 00:57:13,360
 You need to distribute these applications.

715
00:57:13,360 --> 00:57:16,160
 You need to parallelize the programs and many more.

716
00:57:16,160 --> 00:57:23,920
 And I'll talk a little more about it.

717
00:57:23,920 --> 00:57:30,800
 So and then the applications themselves are more complicated.

718
00:57:30,800 --> 00:57:34,520
 The application consists of a variety of software modules.

719
00:57:34,520 --> 00:57:35,800
 And we'll talk more about that.

720
00:57:35,800 --> 00:57:37,840
 But remember, if you--

721
00:57:37,840 --> 00:57:41,000
 almost every application you are using today

722
00:57:41,000 --> 00:57:44,640
 is not running only on your machine.

723
00:57:44,640 --> 00:57:45,360
 It has a back end.

724
00:57:45,360 --> 00:57:47,040
 Use Facebook.

725
00:57:47,040 --> 00:57:48,600
 A lot of things happen in the back end.

726
00:57:48,600 --> 00:57:53,600
 Use Google or any other Google applications.

727
00:57:53,600 --> 00:57:56,400
 80% is in the back end.

728
00:57:56,400 --> 00:57:58,080
 Twitter, everything almost, right?

729
00:57:58,080 --> 00:58:00,520
 Netflix, name it, right?

730
00:58:00,520 --> 00:58:05,680
 And then it has to run on different hardware

731
00:58:05,680 --> 00:58:06,400
 architectures.

732
00:58:06,400 --> 00:58:08,920
 And because of the Moore's law has ended,

733
00:58:08,920 --> 00:58:11,400
 you are going to have to see a proliferation.

734
00:58:11,400 --> 00:58:13,040
 You are already seeing a proliferation

735
00:58:13,040 --> 00:58:15,720
 of hardware architectures.

736
00:58:15,720 --> 00:58:17,560
 Just to give you an example here,

737
00:58:17,560 --> 00:58:20,320
 and it's a personal example.

738
00:58:20,320 --> 00:58:24,600
 When we started Spark and we started in 2009, so what,

739
00:58:24,600 --> 00:58:27,400
 12 years ago, we are focusing only

740
00:58:27,400 --> 00:58:30,800
 for processing data which is in the memory efficiently.

741
00:58:30,800 --> 00:58:33,920
 We are focusing only on CPUs, right?

742
00:58:33,920 --> 00:58:36,360
 It's like we assume that the processing is

743
00:58:36,360 --> 00:58:43,360
 done by the general proposed processors, Intel.

744
00:58:43,360 --> 00:58:46,680
 When we started Ray, which was--

745
00:58:46,680 --> 00:58:49,000
 that was happening like in 2016.

746
00:58:49,000 --> 00:58:53,440
 So it's after only six, seven years.

747
00:58:53,440 --> 00:58:57,080
 We already have to take into account

748
00:58:57,080 --> 00:59:00,560
 and to design it for heterogeneous hardware

749
00:59:00,560 --> 00:59:05,400
 to handle GPUs at that time, now to handle GPUs and so forth.

750
00:59:05,400 --> 00:59:07,080
 So this is real.

751
00:59:07,080 --> 00:59:11,880
 And obviously, this comes with additional complexity.

752
00:59:11,880 --> 00:59:13,960
 And of course, it's once you are over the network,

753
00:59:13,960 --> 00:59:15,200
 you are also exposed to attacks.

754
00:59:15,200 --> 00:59:23,320
 And this means that because the heterogeneity is increasing

755
00:59:23,320 --> 00:59:27,760
 dramatically, that the operating system becomes

756
00:59:27,760 --> 00:59:30,520
 even more important because it's much harder

757
00:59:30,520 --> 00:59:34,680
 to abstract them away, right?

758
00:59:34,680 --> 00:59:36,200
 Because if you don't abstract away,

759
00:59:36,200 --> 00:59:37,960
 it's very hard to write applications.

760
00:59:37,960 --> 00:59:40,600
 And the operating system is one of the key roles,

761
00:59:40,600 --> 00:59:43,360
 like we discussed, is to make that writing, developing

762
00:59:43,360 --> 00:59:48,800
 application very easy, right?

763
00:59:48,800 --> 00:59:53,200
 So that's why its operating system are more challenging

764
00:59:53,200 --> 00:59:55,520
 and more needed than ever.

765
00:59:55,520 --> 01:00:00,890
 Now, we discussed and when we discussed about specialized hardware, I mentioned that it's

766
01:00:00,890 --> 01:00:09,670
 not only specialized hardware, how people try to go around the more slow or kind of,

767
01:00:09,670 --> 01:00:12,190
 so to speak, extend in terms of performance.

768
01:00:12,190 --> 01:00:18,170
 In other ways, having more and more cores, even for general proposed processors.

769
01:00:18,170 --> 01:00:27,070
 Like Intel Xeon Phi has a processor with 64 cores, AMD Epic, the same 64 cores, although

770
01:00:27,070 --> 01:00:32,890
 there are rumors that the new version will have 128 cores.

771
01:00:32,890 --> 01:00:39,190
 And if you look at these processors, actually, they are damn complicated, right?

772
01:00:39,190 --> 01:00:41,430
 This is how it looks like.

773
01:00:41,430 --> 01:00:51,950
 You have a bunch of cores, you have cache, you have some other components to manage memory.

774
01:00:51,950 --> 01:01:03,790
 You have other components here down to also control the IO, input output, getting the

775
01:01:03,790 --> 01:01:12,150
 data in and out of the processor and reading from the memory, which is not on the chip,

776
01:01:12,150 --> 01:01:15,270
 it's off the chip.

777
01:01:15,270 --> 01:01:22,030
 And you have also in many systems, you have processor, you have some integrated graphics,

778
01:01:22,030 --> 01:01:23,710
 right?

779
01:01:23,710 --> 01:01:30,890
 And this is a trend which, sorry, if you look under the hood, they are connected.

780
01:01:30,890 --> 01:01:36,970
 It's like a mini system in miniature, right?

781
01:01:36,970 --> 01:01:42,790
 In this case, you are going to have, this is a core, processor core, and now you are

782
01:01:42,790 --> 01:01:54,510
 connected to different IO ports, memory, and many other things, right?

783
01:01:54,510 --> 01:01:56,350
 And this complexity just increasing.

784
01:01:56,350 --> 01:02:00,190
 So here down is like, it's what we are seeing here, it's another trend.

785
01:02:00,190 --> 01:02:04,090
 It's system on a chip, right?

786
01:02:04,090 --> 01:02:09,330
 And when going back to that question, when Apple say, maybe say Moore's law is not done,

787
01:02:09,330 --> 01:02:15,630
 this is what they do and how they sustain the increasing performance, again, which is

788
01:02:15,630 --> 01:02:18,750
 not necessarily related with the Moore's law.

789
01:02:18,750 --> 01:02:28,810
 It's putting more and more intelligence, more and more functionality on the same chip, right?

790
01:02:28,810 --> 01:02:37,010
 And here I will show, you have not only CPUs and if CPU have multiple cores, I mean, send

791
01:02:37,010 --> 01:02:44,390
 or eight between six and 10, but you have GPUs, right?

792
01:02:44,390 --> 01:02:45,790
 Integrated on the same chip.

793
01:02:45,790 --> 01:02:48,810
 You have eight core GPUs, right?

794
01:02:48,810 --> 01:02:50,090
 Eight core CPUs.

795
01:02:50,090 --> 01:02:58,790
 And in addition to that, you have neural engine, which is really focused on neural, to sort

796
01:02:58,790 --> 01:03:04,870
 of supporting machine learning workloads, deep neural network workloads, right?

797
01:03:04,870 --> 01:03:09,350
 This is the things which are like, you know, your fingerprint sensor or recognizing, you

798
01:03:09,350 --> 01:03:13,450
 know, as your face, using your face to unlock the phone, right?

799
01:03:13,450 --> 01:03:15,750
 Face recognition, right?

800
01:03:15,750 --> 01:03:22,570
 So that's why, how you are going to get more performance.

801
01:03:22,570 --> 01:03:24,470
 The code is also very complicated.

802
01:03:24,470 --> 01:03:30,350
 It's growing in complexity and I don't have the numbers, more recent numbers, but here

803
01:03:30,350 --> 01:03:35,730
 is a Vista, this one, you know, 15 years ago, code.

804
01:03:35,730 --> 01:03:36,730
 It was what?

805
01:03:36,730 --> 01:03:39,430
 50 millions code, lines of code.

806
01:03:39,430 --> 01:03:42,230
 It's huge, huge complexity.

807
01:03:42,230 --> 01:03:47,030
 And just to give you a sense, the NASA space shuttle, you know, you remember it was a space

808
01:03:47,030 --> 01:03:48,030
 shuttle.

809
01:03:48,030 --> 01:03:49,810
 It's no longer in service.

810
01:03:49,810 --> 01:03:50,810
 It has what?

811
01:03:50,810 --> 01:03:51,810
 I don't know.

812
01:03:51,810 --> 01:03:53,750
 One or two millions lines of code.

813
01:03:53,750 --> 01:03:57,550
 It's crazy.

814
01:03:57,550 --> 01:04:05,070
 And then it's again, like I mentioned several times, you have to scale everyone to, because

815
01:04:05,070 --> 01:04:11,970
 you can no longer do these workloads on a single node, on a single machine, right?

816
01:04:11,970 --> 01:04:14,570
 Like I show you the data for machine learning workloads.

817
01:04:14,570 --> 01:04:18,750
 The same thing is for big data analytics, scientific computing.

818
01:04:18,750 --> 01:04:24,390
 You have, so we have supercomputers, which are parallel computers or in this big computers

819
01:04:24,390 --> 01:04:28,470
 since 80s to support this kind of workloads.

820
01:04:28,470 --> 01:04:30,870
 And then on top of that, everything is connected.

821
01:04:30,870 --> 01:04:32,470
 This is the internet.

822
01:04:32,470 --> 01:04:38,210
 Probably the most impressive artifact that humans have created, right?

823
01:04:38,210 --> 01:04:41,810
 It's linked the entire world, right?

824
01:04:41,810 --> 01:04:42,810
 And it's what?

825
01:04:42,810 --> 01:04:46,190
 You have 4.5 billions people connected to the internet.

826
01:04:46,190 --> 01:04:49,910
 This is what this plot shows, right?

827
01:04:49,910 --> 01:04:50,910
 And this is what?

828
01:04:50,910 --> 01:04:54,670
 It happens only 25 years.

829
01:04:54,670 --> 01:04:57,870
 It's quite amazing.

830
01:04:57,870 --> 01:05:09,470
 And then the smartphone shipments exceeded the PC shipments, what I think in 2011.

831
01:05:09,470 --> 01:05:21,070
 And today, right, today actually it turns out that you have close to 4 billion smartphones

832
01:05:21,070 --> 01:05:27,870
 and 5 point something billions mobile phones, right?

833
01:05:27,870 --> 01:05:30,650
 This data is a little bit old.

834
01:05:30,650 --> 01:05:32,790
 And all of those, all the phones are connected.

835
01:05:32,790 --> 01:05:38,390
 So you have 4 billion, this kind of very powerful devices at the end of the day, which are connected,

836
01:05:38,390 --> 01:05:39,390
 right?

837
01:05:39,390 --> 01:05:41,610
 So you have everything.

838
01:05:41,610 --> 01:05:43,070
 You have a huge range, right?

839
01:05:43,070 --> 01:05:50,710
 You have everything from data center, which hundreds of thousands of computers to sensor

840
01:05:50,710 --> 01:05:53,490
 networks, right?

841
01:05:53,490 --> 01:05:57,150
 Which you may not be even able to see these chips, right?

842
01:05:57,150 --> 01:06:00,510
 And everything in between, right?

843
01:06:00,510 --> 01:06:02,270
 And different workloads.

844
01:06:02,270 --> 01:06:10,790
 And just to drive home the point and I'll here, so just like I mentioned earlier, many

845
01:06:10,790 --> 01:06:15,710
 of the applications you are using today, they are distributed, right?

846
01:06:15,710 --> 01:06:19,150
 Facebook, Twitter, and so forth.

847
01:06:19,150 --> 01:06:23,750
 And this is what happens under the hood, right?

848
01:06:23,750 --> 01:06:27,390
 And let's say you do a simple search, right?

849
01:06:27,390 --> 01:06:30,990
 From your Android 4 or iPhone, right?

850
01:06:30,990 --> 01:06:32,690
 What do you do?

851
01:06:32,690 --> 01:06:37,790
 So first of all, you need to figure out what backend, what servers you need to connect

852
01:06:37,790 --> 01:06:44,430
 to, to get, to send the request, your search request, and to get the answer.

853
01:06:44,430 --> 01:06:54,350
 In order to do that, you need to do this DNS request, domain name service, right?

854
01:06:54,350 --> 01:06:58,070
 And this is, you know, it's like you need to resolve, use this link, right?

855
01:06:58,070 --> 01:07:03,030
 It's google.com to a particular server, right?

856
01:07:03,030 --> 01:07:16,430
 So you have an entire domain DNS infrastructure, which consisting of many servers, and they

857
01:07:16,430 --> 01:07:21,070
 will cooperate to give you an answer to tell you who you need to connect to, who you need

858
01:07:21,070 --> 01:07:22,070
 to send the packets.

859
01:07:22,070 --> 01:07:28,270
 Now, so once you get that address, which is an IP address, you are going to send it over

860
01:07:28,270 --> 01:07:29,270
 the internet, right?

861
01:07:29,270 --> 01:07:35,110
 Over the internet, these packets are going to be routed by switches, routers, and so

862
01:07:35,110 --> 01:07:36,910
 forth.

863
01:07:36,910 --> 01:07:42,110
 And it's going to go, based on the IP address, probably in a data center, they are going

864
01:07:42,110 --> 01:07:44,690
 to land to a load balancer.

865
01:07:44,690 --> 01:07:50,230
 The load balancer, you get the packets, you send to a server, the web server probably.

866
01:07:50,230 --> 01:07:56,110
 The web server is going to look at the request and based on the request, it's going to send,

867
01:07:56,110 --> 01:08:04,030
 you know, request an entire other system to resolve that request, right?

868
01:08:04,030 --> 01:08:07,830
 To give you the answers if you have a Google query.

869
01:08:07,830 --> 01:08:12,950
 And obviously, you may also have to get some ads in the process.

870
01:08:12,950 --> 01:08:18,870
 You have another infrastructure doing only that, figuring out what ads to show.

871
01:08:18,870 --> 01:08:23,390
 And then you need to put together the entire page and send it back and to be displayed

872
01:08:23,390 --> 01:08:26,470
 on your computer, right?

873
01:08:26,470 --> 01:08:29,310
 So this is just to give you a sense how complicated things are.

874
01:08:29,310 --> 01:08:36,150
 And all of these interactions are handled by the operating system, right, at the low

875
01:08:36,150 --> 01:08:42,150
 level.

876
01:08:42,150 --> 01:08:45,870
 So let me just, we have only five minutes.

877
01:08:45,870 --> 01:08:50,490
 So what I'm going to do, I'm going to do the following thing and we are going to continue

878
01:08:50,490 --> 01:08:53,310
 next time.

879
01:08:53,310 --> 01:08:58,510
 Let me first try to answer some of the questions and then I'm going to go straight to some

880
01:08:58,510 --> 01:09:06,350
 logistics.

881
01:09:06,350 --> 01:09:08,870
 How low level does this class get?

882
01:09:08,870 --> 01:09:13,090
 Do we talk about things like pipelining?

883
01:09:13,090 --> 01:09:19,150
 We won't talk much about like pipelining, if you are referring at the CPU process, in

884
01:09:19,150 --> 01:09:23,270
 the CPU pipelining, like instruction pipelining.

885
01:09:23,270 --> 01:09:24,270
 We are not going to talk.

886
01:09:24,270 --> 01:09:28,910
 We are going to talk a little bit about hyper-threading.

887
01:09:28,910 --> 01:09:31,730
 We are going to talk about that.

888
01:09:31,730 --> 01:09:34,410
 So we'll answer, so this is about hyper-threading.

889
01:09:34,410 --> 01:09:40,310
 We are going to talk more about, in short, it's a way in which you can share the core,

890
01:09:40,310 --> 01:09:48,790
 one core between two threads, which can come from different applications.

891
01:09:48,790 --> 01:09:50,930
 So it's multiplexing one core.

892
01:09:50,930 --> 01:09:53,130
 Okay, so yeah.

893
01:09:53,130 --> 01:10:03,630
 Okay, so let me just skip and obviously we'll do the rest next time and talk a little bit

894
01:10:03,630 --> 01:10:11,990
 here about, more about the class.

895
01:10:11,990 --> 01:10:18,430
 Okay, syllabus and it's online.

896
01:10:18,430 --> 01:10:19,550
 You have the class.

897
01:10:19,550 --> 01:10:27,310
 So we are going to obviously to learn the operating system concepts and how a system

898
01:10:27,310 --> 01:10:30,770
 programmer is going to use these concepts.

899
01:10:30,770 --> 01:10:36,990
 What are the interfaces, APIs, and then we are going to learn about how the operating

900
01:10:36,990 --> 01:10:40,790
 system implements some of this functionality.

901
01:10:40,790 --> 01:10:46,210
 Like how is it going to manage concurrency, multiple applications accessing shared resources

902
01:10:46,210 --> 01:10:47,210
 at the same time.

903
01:10:47,210 --> 01:10:53,490
 Address space, how you are going to provide isolation between different applications so

904
01:10:53,490 --> 01:11:00,930
 that each one application or process will not step over the memory of another application

905
01:11:00,930 --> 01:11:01,930
 or process.

906
01:11:01,930 --> 01:11:09,590
 File systems, how you are going to access and store the data and retrieve the data,

907
01:11:09,590 --> 01:11:15,130
 send the data and receive the data over the network.

908
01:11:15,130 --> 01:11:21,390
 We are going to talk a little bit about distributed systems and the protocols, which are, and

909
01:11:21,390 --> 01:11:30,130
 the mechanisms which are implemented by distributed systems to make them easier to use and to

910
01:11:30,130 --> 01:11:32,870
 be more efficient.

911
01:11:32,870 --> 01:11:36,670
 And we are going to talk about reliability and security, fault tolerance protection and

912
01:11:36,670 --> 01:11:39,210
 so forth.

913
01:11:39,210 --> 01:11:42,330
 And finally, we are going to talk about a little bit about cloud infrastructure, which

914
01:11:42,330 --> 01:11:48,290
 is very relevant because right now, cloud is a de facto standard.

915
01:11:48,290 --> 01:11:54,770
 Many companies are building, especially startups are building their application.

916
01:11:54,770 --> 01:11:57,290
 This class is hands-on.

917
01:11:57,290 --> 01:11:59,610
 You are going to learn by doing.

918
01:11:59,610 --> 01:12:03,110
 You have a bunch of homeworks and projects.

919
01:12:03,110 --> 01:12:05,650
 Projects are extremely important.

920
01:12:05,650 --> 01:12:10,510
 And with the projects you are going to implement actually also is the homework, some mechanism,

921
01:12:10,510 --> 01:12:15,490
 some functionality that operating system do.

922
01:12:15,490 --> 01:12:20,830
 Like your stress and scheduling, file systems and so forth.

923
01:12:20,830 --> 01:12:21,830
 Memory allocation.

924
01:12:21,830 --> 01:12:26,950
 This will be very, very exciting.

925
01:12:26,950 --> 01:12:28,430
 Now what are the demands?

926
01:12:28,430 --> 01:12:35,050
 The project will require you to be very comfortable with programming and debugging C. So remember,

927
01:12:35,050 --> 01:12:42,010
 recall pointers, memory management, use GDB for debugging.

928
01:12:42,010 --> 01:12:49,690
 So just go over 61C again.

929
01:12:49,690 --> 01:12:55,250
 And you need to know how to use Git for version control.

930
01:12:55,250 --> 01:12:59,170
 And there is a C programming reference here if you need.

931
01:12:59,170 --> 01:13:04,970
 So please consult that.

932
01:13:04,970 --> 01:13:09,810
 I think the first two sections are dedicated to programming and debugging reviews.

933
01:13:09,810 --> 01:13:12,570
 So please attend these sections.

934
01:13:12,570 --> 01:13:15,810
 And you can attend any two section, I believe, for the first two weeks.

935
01:13:15,810 --> 01:13:19,930
 After that, you need to choose one section.

936
01:13:19,930 --> 01:13:30,170
 The other thing I want to say, and to be quick here, but also I want to emphasize that projects

937
01:13:30,170 --> 01:13:31,170
 are very important.

938
01:13:31,170 --> 01:13:35,490
 And projects are not only about doing a piece of software and building a piece of software,

939
01:13:35,490 --> 01:13:41,050
 a project about teaching you how to collaborate, how to work in a team.

940
01:13:41,050 --> 01:13:43,290
 This will be extremely important for you.

941
01:13:43,290 --> 01:13:49,770
 If you go and to be a software engineer, this is a key skill you need to learn.

942
01:13:49,770 --> 01:13:53,050
 You are going to learn to work in a team.

943
01:13:53,050 --> 01:13:57,870
 You need to make the team successful because that's how you are going to become successful.

944
01:13:57,870 --> 01:14:00,370
 You are not going to work alone.

945
01:14:00,370 --> 01:14:09,050
 We require the project to have four members, number five.

946
01:14:09,050 --> 01:14:12,290
 And the exception will be very rare.

947
01:14:12,290 --> 01:14:15,090
 Please, this is pandemic, still pandemic.

948
01:14:15,090 --> 01:14:17,010
 It's very hard.

949
01:14:17,010 --> 01:14:19,730
 Most of the activities will be online.

950
01:14:19,730 --> 01:14:23,170
 If you do online, turn the camera on.

951
01:14:23,170 --> 01:14:26,870
 Try to emulate the physical presence as much as possible.

952
01:14:26,870 --> 01:14:30,530
 But also now you can also, the campus is open.

953
01:14:30,530 --> 01:14:34,930
 You know, if you feel comfortable, you can go and meet in person.

954
01:14:34,930 --> 01:14:38,590
 But collaborate, collaborate, collaborate.

955
01:14:38,590 --> 01:14:45,130
 And also not only between you and your members of the team, but also your TA.

956
01:14:45,130 --> 01:14:51,490
 Overcommunication is how you make this project successful.

957
01:14:51,490 --> 01:14:58,070
 Then you need to devise the work among the members of the team to require both decision

958
01:14:58,070 --> 01:15:03,310
 and additional collaboration because you are going to depend on the work of other people

959
01:15:03,310 --> 01:15:06,150
 do in your team.

960
01:15:06,150 --> 01:15:11,070
 This is a grading, 36% is for three midterms.

961
01:15:11,070 --> 01:15:13,870
 We have only midterms, no final.

962
01:15:13,870 --> 01:15:23,690
 36% projects, 80% homework, 10% participation, section, lectures, and so forth.

963
01:15:23,690 --> 01:15:25,050
 You'll hear more about the project.

964
01:15:25,050 --> 01:15:27,570
 You'll have a design document.

965
01:15:27,570 --> 01:15:28,570
 Design document will be due.

966
01:15:28,570 --> 01:15:33,290
 You are going to get feedback from the TAs and so forth.

967
01:15:33,290 --> 01:15:35,390
 Books and infrastructures.

968
01:15:35,390 --> 01:15:37,530
 You should be able to find all the information.

969
01:15:37,530 --> 01:15:39,930
 There's a class web page.

970
01:15:39,930 --> 01:15:40,930
 There is a Piazza.

971
01:15:40,930 --> 01:15:44,150
 You find the link to the Piazza as well there.

972
01:15:44,150 --> 01:15:46,150
 The lectures will be recorded.

973
01:15:46,150 --> 01:15:51,270
 Yeah, sorry about today, about the beginning of the lecture.

974
01:15:51,270 --> 01:15:59,070
 The textbook is the operating system principles and practice from Tom Anderson and Mike Dalin.

975
01:15:59,070 --> 01:16:02,350
 And there are a few other books, very good.

976
01:16:02,350 --> 01:16:09,950
 And you are encouraged to consult and you can refer to.

977
01:16:09,950 --> 01:16:14,890
 And we are going to have a few supplemental materials, a few research papers and so forth.

978
01:16:14,890 --> 01:16:17,250
 We are going to let you know.

979
01:16:17,250 --> 01:16:24,970
 Finally, please, it's like, this is not a joke.

980
01:16:24,970 --> 01:16:29,550
 Personal integrity, you signed the UCB Academy Honor Code.

981
01:16:29,550 --> 01:16:36,050
 So please live by it.

982
01:16:36,050 --> 01:16:38,690
 You can explain the concept of other people in the group.

983
01:16:38,690 --> 01:16:41,190
 You can discuss the concept with other people on the group.

984
01:16:41,190 --> 01:16:45,190
 You can even help your friend to debug your code, the code.

985
01:16:45,190 --> 01:16:48,750
 Or you can search online for generic codes.

986
01:16:48,750 --> 01:16:53,430
 This is good, but you cannot share the code with other groups.

987
01:16:53,430 --> 01:16:58,830
 You cannot copy or read another group's code or test cases.

988
01:16:58,830 --> 01:17:08,210
 You cannot copy or reading online code or test cases from prior years.

989
01:17:08,210 --> 01:17:12,990
 And we are going, as you know that, we compare all project submission against prior year

990
01:17:12,990 --> 01:17:18,790
 submissions and online solutions and will take actions right against your funder.

991
01:17:18,790 --> 01:17:20,590
 So please don't do that.

992
01:17:20,590 --> 01:17:27,950
 It's not going to help you with learning.

993
01:17:27,950 --> 01:17:30,990
 That's probably the most important reason you shouldn't do it.

994
01:17:30,990 --> 01:17:36,510
 Let's try hard to make this class and to keep this class interactive.

995
01:17:36,510 --> 01:17:37,790
 And I'm going to stop here.

996
01:17:37,790 --> 01:17:42,830
 I'm going to take it about the talk, obviously, a little bit more about the operating system

997
01:17:42,830 --> 01:17:45,290
 general overview next time.

998
01:17:45,290 --> 01:17:51,710
 And now let me answer the questions which are still here.

999
01:17:51,710 --> 01:17:56,090
 So there are two other questions.

1000
01:17:56,090 --> 01:17:58,130
 There is actually one last question.

1001
01:17:58,130 --> 01:18:01,910
 Will it be good to review material of the later half of 6.1c like cache?

1002
01:18:01,910 --> 01:18:03,790
 Yes, absolutely.

1003
01:18:03,790 --> 01:18:05,870
 Components of the CPU, how much of this?

1004
01:18:05,870 --> 01:18:06,870
 Yes, absolutely.

1005
01:18:06,870 --> 01:18:08,590
 This will be very useful.

1006
01:18:08,590 --> 01:18:10,230
 We are going to talk about caching.

1007
01:18:10,230 --> 01:18:16,450
 We are going to talk and reviewing that it will be so useful.

1008
01:18:16,450 --> 01:18:19,710
 How does participation grading work?

1009
01:18:19,710 --> 01:18:29,530
 This will be mostly because it will be smaller groups from interacting with your TAs, office

1010
01:18:29,530 --> 01:18:33,070
 hours and discussion sections.

1011
01:18:33,070 --> 01:18:38,270
 I am, at the size of this class, I don't think I will have the opportunity to interact with

1012
01:18:38,270 --> 01:18:41,310
 many of you, especially since we are remote.

1013
01:18:41,310 --> 01:18:46,150
 But obviously, if you have any problem, anything, please do not hesitate to drop me an email

1014
01:18:46,150 --> 01:18:47,670
 and you can look for me.

1015
01:18:47,670 --> 01:18:55,890
 I'll be in soda, soda hall, at least now and then.

1016
01:18:55,890 --> 01:18:59,430
 So thank you so much, everyone.

1017
01:18:59,430 --> 01:19:03,710
 And I'll see you next Tuesday.

1018
01:19:03,710 --> 01:19:08,910
 And if you have any other questions, please ask the questions.

1019
01:19:08,910 --> 01:19:14,550
 And if you also have any other suggestions about how to make the class better, more interactive,

1020
01:19:14,550 --> 01:19:16,870
 please do not hesitate to let us know.

1021
01:19:16,870 --> 01:19:24,550
 It's again, the first time I'm using the webinar and it's not a lot of, you know, it's hard

1022
01:19:24,550 --> 01:19:31,030
 to just talk at the screen and see the slide, not see any of your faces.

1023
01:19:31,030 --> 01:19:35,670
 So but, you know, let's try to do our best.

1024
01:19:35,670 --> 01:19:42,190
 And yeah, any idea you see, you have to improve interactivity, to improve the class in general,

1025
01:19:42,190 --> 01:19:43,190
 let us know.

1026
01:19:43,190 --> 01:19:43,310
 Thank you.

1027
01:19:43,310 --> 01:20:09,310
 [ Applause ]


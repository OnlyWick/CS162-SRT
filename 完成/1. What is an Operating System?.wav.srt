1
00:00:00,000 --> 00:00:19,000
Okay, awesome. Okay, thanks for pointing this out. Sorry about that, everyone. So we have
好的，太棒了。好的，谢谢你指出这一点。对不起，大家。所以我们有...

2
00:00:19,000 --> 00:00:31,240
now what are the rules for the GCR? Still mostly this class will be remote. All lecture
现在GCR的规定是什么？大部分课程仍然是远程授课。所有的讲座都是远程授课。

3
00:00:31,240 --> 00:00:38,680
will be remote. This is what the department decided actually early on even before Delta
将是远程工作。实际上，这是部门在Delta疫情爆发之前就做出的决定。

4
00:00:38,680 --> 00:00:50,480
variant and all exams will be remote. We'll have three midterms. There is no final. And
变种病毒，所有考试都将远程进行。我们将有三次期中考试，没有期末考试。而且

5
00:00:50,480 --> 00:00:58,520
we have 17 discussion sections on Thursday and Fridays, four on Thursday, 13 on Friday.
我们在周四和周五有17个讨论小组，其中四个在周四，13个在周五。

6
00:00:58,520 --> 00:01:07,920
Out of those, four will be in person. They will be on Friday and 30 will be remote. Now,
其中有四个将是面对面的。它们将在星期五进行，而其他30个将是远程的。现在，

7
00:01:07,920 --> 00:01:13,600
please make sure because of that you have a working camera because you are going to
请确保你有一台工作正常的相机，因为你将要使用它。

8
00:01:13,600 --> 00:01:23,160
have Zoom proctoring of exams and require section design reviews, working with your
进行Zoom监考以及要求进行部分设计审查，与您合作。

9
00:01:23,160 --> 00:01:37,360
colleagues for the group projects, all requires to see each other and also screenshots. So
同事们对于小组项目都要求相互见面，并且还需要截屏。所以

10
00:01:37,360 --> 00:01:43,400
goals of today lectures, it's an introductory lecture, obviously, is to try to figure out
今天讲座的目标是弄清楚，显然，这是一堂介绍性的讲座。

11
00:01:43,400 --> 00:01:50,160
a little bit what is an operating system and in particular also what is not. And also I'm
一个操作系统是一种软件，它管理计算机硬件和软件资源，并提供给用户和应用程序一个统一的接口。操作系统负责协调和控制计算机的各种活动，例如文件管理、内存管理、进程调度和设备驱动程序等。

操作系统的主要功能包括：
1. 提供用户界面，使用户能够与计算机进行交互。
2. 管理计算机的硬件资源，例如处理器、内存和存储设备。
3. 提供文件系统，用于管理和组织数据。
4. 控制和协调应用程序的执行，包括进程调度和资源分配。
5. 提供网络功能，使计算机能够连接到其他计算机和设备。

操作系统不是应用程序。它是一种系统级软件，与应用程序不同，它不直接为用户提供功能，而是为应用程序提供运行环境和资源管理。操作系统是计算机系统的核心组成部分，它使得计算机能够运行各种应用程序，并提供了对硬件资源的抽象和管理。

12
00:01:50,160 --> 00:01:57,760
going to say a few words about what makes operating systems so exciting. It's a while
我要说一些关于操作系统为何如此令人兴奋的话。已经有一段时间了。

13
00:01:57,760 --> 00:02:07,280
and is actually probably one of the most exciting times to study and work on operating systems.
并且实际上，现在可能是研究和工作于操作系统最令人兴奋的时期之一。

14
00:02:07,280 --> 00:02:14,480
And then we are going to talk a little bit more at the end about how does a class operate.
然后我们在最后会再多谈一点班级是如何运作的。

15
00:02:14,480 --> 00:02:22,960
Please interactivity is important. Now I know that it's harder, especially with a webinar.
请注意互动性很重要。现在我知道这更难，尤其是在网络研讨会中。

16
00:02:22,960 --> 00:02:30,800
I'm going to stop from time to time and look and take questions. And of course, please
我会不时停下来观察并回答问题。当然，请问有什么需要帮助的吗？

17
00:02:30,800 --> 00:02:37,160
ask questions and notes because even while I am talking, other people could answer them,
请问问题和做笔记，因为即使我在说话的时候，其他人也可以回答。

18
00:02:37,160 --> 00:02:49,960
you know, some of our TAs. So what is fundamentally an operating system? So one way to think about
你知道，我们的一些助教。那么，操作系统从根本上是什么呢？有一种思考方式是这样的：

19
00:02:49,960 --> 00:02:57,560
the operating system is that is that software layer which runs on top of hardware of the
操作系统是运行在硬件之上的软件层。

20
00:02:57,560 --> 00:03:04,880
hardware and provide support to the application. Right. What does that mean, providing support
硬件并为应用程序提供支持。对的。提供支持是什么意思？

21
00:03:04,880 --> 00:03:13,440
to applications means that it makes it easier to develop applications and take advantage
对于应用程序来说，这意味着它使开发应用程序和利用其优势变得更加容易。

22
00:03:13,440 --> 00:03:22,000
of the hardware capabilities. It also protects applications from each other. It provides
硬件能力的抽象化。它还保护应用程序之间的隔离。它提供了

23
00:03:22,000 --> 00:03:33,020
security and authentication. So only the applications which should use the hardware and have access
安全和身份验证。因此，只有应该使用硬件并具有访问权限的应用程序可以使用。

24
00:03:33,020 --> 00:03:40,160
to the data and also provide support for cooperation. There are applications which cooperate with
数据，并为合作提供支持。有一些应用程序与之合作。

25
00:03:40,160 --> 00:03:45,500
each other. And obviously this is more and more expected today. We are in the age of
互联网和全球化，人们之间的联系和交流变得更加频繁和紧密。无论是在个人生活还是商业活动中，人们都需要与不同国家和文化背景的人进行交流。因此，相互理解和跨文化交流变得越来越重要。人们需要学习不同的语言和文化，以便更好地与他人沟通和合作。在当今世界，多语言能力和跨文化交际技巧已经成为一种竞争优势。

26
00:03:45,500 --> 00:03:54,820
the internet. Right. And why do we care to provide support for applications? Well, because
互联网。对的。我们为什么要关心为应用程序提供支持呢？嗯，因为

27
00:03:54,820 --> 00:04:01,620
most of the things you do online, you do through applications. That's it. Right. It's the most
大部分你在网上做的事情都是通过应用程序完成的。就是这样。对吧。这是最常见的情况。

28
00:04:01,620 --> 00:04:07,880
is a way people interact with computers is that people are going to interact with the
人们与计算机互动的一种方式是人们将与计算机互动

29
00:04:07,880 --> 00:04:14,560
virtual world. So a physical world, virtual world. Virtual world means applications. And
虚拟世界。所以一个物理世界，虚拟世界。虚拟世界指的是应用程序。而

30
00:04:14,560 --> 00:04:23,440
also to drive home the point, here are some numbers about how the global mobile market
此外，为了强调这一点，以下是一些关于全球移动市场的数据。

31
00:04:23,440 --> 00:04:32,860
size. And you can see it is huge. And actually even year over year, the growth is significant.
尺寸。你可以看到它很大。实际上，即使是年度增长也是显著的。

32
00:04:32,860 --> 00:04:43,940
Right. 20% or more. Right. And it's again an application provides the abstraction, manages
正确。20%或更多。正确。而且这又是一个提供抽象化、管理的应用程序。

33
00:04:43,940 --> 00:04:52,680
the resources, hardware resources. And it's achieving that through using a bunch of algorithms
资源，硬件资源。它通过使用一系列算法来实现这一目标。

34
00:04:52,680 --> 00:05:01,700
for scheduling application or processes, providing access to resources from different concurrent
用于调度应用程序或进程，提供对不同并发资源的访问。

35
00:05:01,700 --> 00:05:20,160
applications running at the same time. And security and many more. Okay. So right now,
同时运行的应用程序。还有安全性等等。好的。所以现在，

36
00:05:20,160 --> 00:05:29,300
let's look again a little bit. Oh, there is a question here. What is now an exciting time
让我们再仔细看一下。哦，这里有一个问题。现在是什么时候最令人兴奋？

37
00:05:29,300 --> 00:05:37,780
for starting working in OS? Yes, we are going to answer that later because the impact of
开始在操作系统中工作？是的，我们稍后会回答这个问题，因为这会对...产生影响。

38
00:05:37,780 --> 00:05:47,500
the OS and the challenges are bigger than ever. That's a short answer. Okay. And here
操作系统和挑战比以往任何时候都更大。这是一个简短的回答。好的。然后呢？

39
00:05:47,500 --> 00:05:52,920
it's again, it's not a problem during this lecture if you don't understand everything.
这又是一次，在这堂课上，如果你不理解一切，也不是问题。

40
00:05:52,920 --> 00:06:02,160
This is, you know, we are in here to provide some kind of end to end feeling about what
这个，你知道的，我们在这里是为了提供一种端到端的感觉，让人明白什么

41
00:06:02,160 --> 00:06:08,160
the operating system is doing. But the rest of the class, we are going to dive in and
操作系统正在做什么。但是，我们班的其他同学，我们将深入研究并

42
00:06:08,160 --> 00:06:13,240
we are going to, you know, to look at all these aspects I'm going to touch during this
我们打算，你知道的，去看看我在这个过程中要涉及的所有方面。

43
00:06:13,240 --> 00:06:19,840
lecture in more detail. So basically it's again, it's an application you want to run
讲座需要更详细的解释。基本上，这是一个你想要运行的应用程序。

44
00:06:19,840 --> 00:06:27,000
an application, run a program and you have to run it on top of the hardware. Now, what
一个应用程序，运行一个程序，你必须在硬件之上运行它。现在，什么呢？

45
00:06:27,000 --> 00:06:33,080
is a hardware consisting from? You have a processor which needs to execute the instructions
硬件由什么组成？你有一个需要执行指令的处理器。

46
00:06:33,080 --> 00:06:39,900
to run your applications and you clearly have a memory, right? We store the data and store
运行您的应用程序，您肯定有内存，对吗？我们存储数据并存储

47
00:06:39,900 --> 00:06:46,220
the program, you store the application code, right? So the processors read the instructions
这个程序，你存储应用代码，对吗？所以处理器读取指令。

48
00:06:46,220 --> 00:06:56,480
and read the data and executes those instructions on the data and this is how your application
并读取数据并在数据上执行这些指令，这就是您的应用程序的工作方式。

49
00:06:56,480 --> 00:07:06,260
is running. In addition to just memory, you have a cache to keep the most recent data
正在运行。除了内存之外，您还有一个缓存来保存最近的数据。

50
00:07:06,260 --> 00:07:13,280
or the most accessed data around closer to the processor. So this is obviously for improving
或者将最常访问的数据更靠近处理器。所以这显然是为了提高

51
00:07:13,280 --> 00:07:22,680
the performance. You have a page table and TLB translation, look at side buffers, this
表现。你有一个页表和TLB翻译，看看侧缓冲区，这个

52
00:07:22,680 --> 00:07:31,560
is again, it's our mechanism for improving the performance. And besides that, you have
再次强调，这是我们提高性能的机制。除此之外，你还有什么问题？

53
00:07:31,560 --> 00:07:37,680
a storage where you need to store the data, the program at rest, the processor and memory
一个需要存储数据的存储设备，程序处于休眠状态，处理器和内存。

54
00:07:37,680 --> 00:07:44,180
are storing the data and run the program only when they are powered on. And obviously you
只有在通电时才能存储数据和运行程序。显然，你

55
00:07:44,180 --> 00:07:52,860
have a lot of peripherals. You have displays, you have a mouse, you have network, you are
有很多外设。你有显示器，你有鼠标，你有网络，你是

56
00:07:52,860 --> 00:07:59,960
connected to the internet and many more, right? So this is quite complex, right? So now the
连接到互联网和更多的功能，对吗？所以这相当复杂，对吗？那么现在的情况是这样的。

57
00:07:59,960 --> 00:08:05,940
key here and they are connected, right? All of these pieces are connected. So the key
是的，这里的关键是它们之间的连接，对吗？所有这些部分都是相互连接的。所以关键是

58
00:08:05,940 --> 00:08:15,760
here is basically how you are going to make easy and secure for the application to run
这里基本上是你要如何使应用程序易于运行和安全的方法。

59
00:08:15,760 --> 00:08:24,080
on this hardware and also take advantage of the hardware capabilities. Okay. And many
在这个硬件上，并且充分利用硬件的功能。好的。还有很多

60
00:08:24,080 --> 00:08:32,700
of these things you learn, like this is a machine structure in CX61C. And it's again,
关于这些你学到的东西，比如这是CX61C的机器结构。而且，它又是...

61
00:08:32,700 --> 00:08:39,500
one of the main functionality of the operating system is to abstract away this hardware to
操作系统的主要功能之一是将这些硬件抽象化

62
00:08:39,500 --> 00:08:53,720
the application. Okay. So let me do this next set of few slides and then I'll stop for
应用程序。好的。那么让我继续做下一组幻灯片，然后我就停下来。

63
00:08:53,720 --> 00:09:03,460
questions. So one way to think about operating system is this like illusionist, right? And
问题。所以一个思考操作系统的方式就像是魔术师，对吗？而且

64
00:09:03,460 --> 00:09:09,340
why is that? Because again, it's provide this kind of abstraction of the physical resources
为什么会这样呢？因为它再次提供了对物理资源的抽象。

65
00:09:09,340 --> 00:09:15,460
and the abstractions are much easier to use on the applications than the application using
并且在应用程序上使用抽象比直接使用应用程序要容易得多。

66
00:09:15,460 --> 00:09:24,080
directly the hardware, right? And one of the way it makes it easier to use, the operating
是的，直接操作硬件，对吗？而且其中一种使其更易于使用的方式是操作系统。

67
00:09:24,080 --> 00:09:30,380
system makes easier for the application to use is removing limitations, right? So for
系统的作用是简化应用程序的使用，是通过消除限制来实现的，对吗？所以对于...

68
00:09:30,380 --> 00:09:36,320
instance, it provides you the illusion to you being the application, the illusion that
它给你提供了一种错觉，让你觉得自己是这个应用程序，一种让你觉得自己是这个应用程序的错觉。

69
00:09:36,320 --> 00:09:42,880
you are the only one, the application is the only one using that machine. It provides the
你是唯一的，这个应用是唯一一个使用那台机器的。它提供了

70
00:09:42,880 --> 00:09:49,780
illusion that the memory is like infinite, there are no limits, right? It provides a
幻觉是记忆无限的感觉，没有限制，对吗？它提供了

71
00:09:49,780 --> 00:09:56,460
illusion, you know, you have files and data is stored in files. You have users, you have
幻觉，你知道，你有文件和数据存储在文件中。你有用户，你有

72
00:09:56,460 --> 00:10:07,780
messages. So it's a much higher level of abstraction than operating just on bits, right? And the
是的，消息传递是比仅仅操作位更高层次的抽象，对吗？而且

73
00:10:07,780 --> 00:10:17,840
main way the operating system provides abstracts these resources, hardware resources to the
主要的方式是操作系统将这些资源进行抽象化，将硬件资源提供给应用程序。

74
00:10:17,840 --> 00:10:27,220
application is through the process. The process is execution environment in which the applications
应用程序正在进行中。该过程是应用程序执行的环境。

75
00:10:27,220 --> 00:10:40,460
run and the process consists of threads. This is basically the concept, the unit of execution.
运行和进程由线程组成。这基本上是执行的概念，执行的单位。

76
00:10:40,460 --> 00:10:45,860
It's an address space. This is a unit kind of allocates, allocation, right? Allocate
这是一个地址空间。这是一种分配、分配的单位，对吗？分配

77
00:10:45,860 --> 00:10:55,620
the resources and you allocate addresses, memory, and you have access to files and sockets
资源和您分配地址、内存，并且您可以访问文件和套接字。

78
00:10:55,620 --> 00:11:03,860
to communicate over network, right? So the process encapsulate and provides all this
是的，用于在网络上进行通信。因此，该过程封装并提供所有这些功能。

79
00:11:03,860 --> 00:11:09,240
abstraction to the application. So the application only need to understand about how to operate
抽象化对应用程序来说非常重要。因此，应用程序只需要了解如何操作即可。

80
00:11:09,240 --> 00:11:14,220
on threads and address space, how to read, write files, how to communicate over a sockets
关于线程和地址空间，如何读取、写入文件，以及如何通过套接字进行通信。

81
00:11:14,220 --> 00:11:22,860
to communicate over network, right? So that's it much easier. And how does application take
与网络通信，对吗？这样就容易多了。那么应用程序如何进行接收呢？

82
00:11:22,860 --> 00:11:28,820
advantage? You write the code and you compile the code and your code is not only the code
优势？你编写代码，编译代码，而且你的代码不仅仅是代码。

83
00:11:28,820 --> 00:11:34,220
you are writing, but it's going to use also libraries and a bunch of system libraries,
你正在编写代码，但它将使用一些库和一系列系统库。

84
00:11:34,220 --> 00:11:42,980
which are coming with any operating system, right? So again, to summarize the application
是指那些随附任何操作系统的应用程序，对吗？所以，再次总结一下这个应用程序。

85
00:11:42,980 --> 00:11:50,700
view of machine is that of the process. Each application program runs in its own process
机器的视角是过程的视角。每个应用程序在自己的进程中运行。

86
00:11:50,700 --> 00:11:58,460
and this process provides this much higher level, much nicer interfaces than the raw
而这个过程提供了比原始界面更高级、更好的界面。

87
00:11:58,460 --> 00:12:07,540
hardware. Okay? So it's again, here you can see is like I mentioned, you have the program,
硬件。好吗？所以，再次说一下，你可以看到这里就像我提到的那样，你有程序，

88
00:12:07,540 --> 00:12:13,780
the code you write, which is going to use some calls to the system libraries, which
你编写的代码将使用一些对系统库的调用。

89
00:12:13,780 --> 00:12:19,640
are going basically to implement this API for this abstraction, API, it's application
我们基本上要为这个抽象实现这个API，API是应用程序。

90
00:12:19,640 --> 00:12:25,480
programming interfaces to manipulate these abstractions. And then you take care of this,
编写用于操作这些抽象的编程接口。然后你负责处理这个。

91
00:12:25,480 --> 00:12:32,400
you compile it, you get the executable code and that you run it on your machine. Okay?
你编译它，得到可执行代码，然后在你的机器上运行它。好吗？

92
00:12:32,400 --> 00:12:41,740
So let me stop here and let's see, there is a question. Oh, what OS do you like the best?
让我在这里停下来，我们来看看，有一个问题。哦，你最喜欢哪个操作系统？

93
00:12:41,740 --> 00:12:50,520
Well, I think that's a good question. I think, look, you know, it's like you, I'm not going
好的，我认为这是一个好问题。我认为，你知道的，就像你一样，我不会

94
00:12:50,520 --> 00:12:56,900
to surprise you here. I think that our two systems which are quite good, it's and I'm
让你惊讶的是，我认为我们的两个系统都相当不错，它们是这样的，而我也是这样的。

95
00:12:56,900 --> 00:13:05,860
using them, it's Linux and Mac OS. And you know, Mac OS, we are going to talk about that.
使用它们的话，就是Linux和Mac OS。而且你知道，Mac OS，我们要谈谈它。

96
00:13:05,860 --> 00:13:18,880
It's actually built also of the Unix BSD, which originated from Berkeley. So, okay.
它实际上也是基于Unix BSD构建的，而Unix BSD起源于伯克利。所以，好的。

97
00:13:18,880 --> 00:13:26,480
So please ask questions. I am, and sorry, you know, again, it's I've never used webinar.
所以请问问题。我是的，抱歉，你知道的，再次说，我从来没有使用过网络研讨会。

98
00:13:26,480 --> 00:13:35,580
We are using it because it's more scalable, but it's less interactive. And yeah, so, but
我们使用它是因为它更具可扩展性，但交互性较差。嗯，所以，但是

99
00:13:35,580 --> 00:13:50,400
we promise to improve on using these tools. So, excellent. Again, just to summarize, and
我们承诺在使用这些工具上进行改进。所以，非常好。再次总结一下，然后

100
00:13:50,400 --> 00:13:55,800
I'm going to repeat a lot of things, you know, a lot of over and over again. So hopefully
我会重复很多事情，你知道的，很多次重复。所以希望

101
00:13:55,800 --> 00:14:00,740
I'm not going to bore you, but you know, there are actually not a lot of big concepts you
我不会让你感到无聊，但是你知道，实际上并没有很多大的概念。

102
00:14:00,740 --> 00:14:06,000
are going to learn in this class, but the concepts are quite difficult and intricate
你将在这堂课上学习，但是概念相当困难和复杂。

103
00:14:06,000 --> 00:14:10,200
it. And also because they need to, they are going to inter-operate and interact with each
它。而且因为他们需要，他们将相互操作和互动。

104
00:14:10,200 --> 00:14:17,120
other. But just to summarize a process consists of an address space, one or more thread, and
其他。但是简单来说，一个进程由一个地址空间、一个或多个线程和其他组件组成。

105
00:14:17,120 --> 00:14:23,440
this is the controls execution in that address space and a bunch of other resources like
这是在该地址空间中的控制执行以及一堆其他资源，比如...

106
00:14:23,440 --> 00:14:33,220
files, sockets, and things like that. Okay. This is activity monitor. If you go, if you
文件、套接字和类似的东西。好的。这是活动监视器。如果你去，如果你

107
00:14:33,220 --> 00:14:40,860
have a Mac, if you go on here, you can look and you can see all these processes and you
有一台Mac电脑，如果你在这里上网，你可以查看并且可以看到所有这些进程和你

108
00:14:40,860 --> 00:14:45,160
can see actually the processes. It tells you also, I think the column probably, I'm not
能够实际看到这些过程。它还告诉你，我想可能是柱子，我不太确定。

109
00:14:45,160 --> 00:14:52,020
sure you see my mouse, but there is a column here called threads, right? So this is your
当然，你能看到我的鼠标，但这里有一个叫做"threads"的列，对吗？所以这是你的。

110
00:14:52,020 --> 00:15:01,900
unit of execution. So basically for Chrome here, you have 22 threads. So 22 activities
执行单元。所以基本上对于Chrome来说，你有22个线程。所以有22个活动。

111
00:15:01,900 --> 00:15:12,960
which are running concurrently in the same process. Okay. So that's one. Again, we abstracting
同时在同一个进程中运行的是哪些？好的。那就是一个。再次，我们正在抽象化。

112
00:15:12,960 --> 00:15:24,600
away hardware resources to the applications. It's one of the main, main things that the
应用程序占用硬件资源。这是其中一个主要的、主要的事情。

113
00:15:24,600 --> 00:15:33,020
application is that the operating system is doing. The main capabilities. Now let's, we
应用程序是操作系统正在执行的任务。主要功能。现在让我们，我们

114
00:15:33,020 --> 00:15:37,400
are going to look for other, we are going to go over the other capabilities that the
我们要去寻找其他的，我们要去了解其他的能力。

115
00:15:37,400 --> 00:15:44,580
operating system provides and to illustrate the need for the next one. Now assume that
操作系统提供并且说明了对下一个操作系统的需求。现在假设

116
00:15:44,580 --> 00:15:50,660
you are going to have not only one program, but two programs, two applications running
你将不仅拥有一个程序，而是两个程序，两个应用程序在运行。

117
00:15:50,660 --> 00:15:59,860
on your machine. And you know that every actually today, almost every computer your laptop,
在你的机器上。而且你知道，实际上今天几乎每台电脑都是你的笔记本电脑，

118
00:15:59,860 --> 00:16:08,780
your phone allows you to run multiple applications, which means multiple processes at the same
你的手机可以运行多个应用程序，这意味着可以同时运行多个进程。

119
00:16:08,780 --> 00:16:18,480
time. Right? And this now the point is that it's again, it's like one of the abstractions
时间。对吗？现在的关键是，它又是一个抽象的东西，就像其中一个抽象一样。

120
00:16:18,480 --> 00:16:26,740
remember that I mentioned that the operating system provides to the application is that
记得我提到过操作系统提供给应用程序的是什么。

121
00:16:26,740 --> 00:16:33,580
provides the illusion of a dedicated machine. Right? But now how you are going to do it
提供了一个专用机器的幻觉。对吗？但是现在你打算如何做到这一点呢？

122
00:16:33,580 --> 00:16:39,140
when you are going to have multiple applications running at the same time, because they are
当您要同时运行多个应用程序时，因为它们是

123
00:16:39,140 --> 00:16:46,040
going to run on the same hardware. And here is where it comes this kind of the other way
将在相同的硬件上运行。这就是它采取这种另一种方式的地方。

124
00:16:46,040 --> 00:16:52,040
you can look at the operating system as a referee. Because the only way you can provide
你可以把操作系统看作是一名裁判。因为它是唯一能够提供公平和有序环境的方式。

125
00:16:52,040 --> 00:16:58,920
the illusion of two applications and each of them they have their own virtual machine,
两个应用程序的幻觉，每个应用程序都有自己的虚拟机。

126
00:16:58,920 --> 00:17:07,040
so to speak, is to protect one of each other, to isolate one of each other. Right? That's
所谓保护彼此，就是相互保护，相互隔离。对吗？

127
00:17:07,040 --> 00:17:13,800
the only way. And here it's just let's go in a little bit more details to illustrate
唯一的方法。这里我们只是稍微详细地说明一下。

128
00:17:13,800 --> 00:17:21,760
the need for that. Now, let's start with a processor. So you have only one processor
对此的需求。现在，让我们从处理器开始。所以你只有一个处理器。

129
00:17:21,760 --> 00:17:27,760
and you have two applications and you have to run on the same processor. At a given time,
你有两个应用程序，需要在同一处理器上运行。在给定的时间，

130
00:17:27,760 --> 00:17:33,160
you can run on the processor only one application. So to give the illusion that both of them
你只能在处理器上运行一个应用程序。所以为了给人一种两者都在运行的错觉，

131
00:17:33,160 --> 00:17:40,000
are going to run, you know, they have their own machine, so to speak. The way you do it
他们打算跑步，你知道，他们有自己的机器，可以这么说。你要做的方式是这样的。

132
00:17:40,000 --> 00:17:48,680
is that you are going to divide the processor time in slots or slices. And each slice you
将处理器时间分割成时间片或切片。每个时间片你都会

133
00:17:48,680 --> 00:17:55,080
have a different application running. The slices are, you know, a few milliseconds.
有一个不同的应用程序正在运行。这些切片，你知道的，只有几毫秒。

134
00:17:55,080 --> 00:18:02,680
One millisecond, 10 milliseconds, something like that. Right? So in this particular example,
一毫秒，十毫秒，差不多是这样。对吗？所以在这个特定的例子中，

135
00:18:02,680 --> 00:18:09,720
you have the brown application, right, running. And if you can see here, the processor accesses
你有布朗大学的申请表，对吧，正在运行。如果你能看到这里，处理器正在访问。

136
00:18:09,720 --> 00:18:19,640
memory, which is allocated to the brown process, process one, and it reads the code and executes
内存分配给了进程一，也就是棕色进程，它读取代码并执行。

137
00:18:19,640 --> 00:18:30,160
that code. So is there a for running program one. Right? But now, next, you will also have
那段代码。所以有一个用于运行程序的循环，对吗？但是现在，接下来，你还会有什么？

138
00:18:30,160 --> 00:18:37,200
program two. So for program two, in memory, you also have some piece of, you also have
程序二。所以对于程序二，在内存中，你也有一些片段，你也有

139
00:18:37,200 --> 00:18:45,200
some piece of memory which is allocated to process two. Right? And at some point, right,
一些分配给进程二的内存块，对吗？然后，在某个时刻，对吗？

140
00:18:45,200 --> 00:18:51,760
you run, and at some point now, I said after a little bit of time, you allocate to program
你在跑步，然后在某个时刻，现在我说，在一段时间后，你分配时间来编程。

141
00:18:51,760 --> 00:18:59,560
one to run. Now you are going to switch to program two. Right? And you are going to run.
一个要运行。现在你要切换到程序二。对吗？然后你要运行。

142
00:18:59,560 --> 00:19:06,480
And by doing so and switching at a very high frequency, you give the illusion to each of
并通过这样做并以非常高的频率切换，你给每个人一种错觉

143
00:19:06,480 --> 00:19:13,720
these applications that it's using the computer alone. Right?
这些应用程序是独自使用电脑的，对吗？

144
00:19:13,720 --> 00:19:18,800
Now, the problem here, if you can see, for instance, if you look at the memory, you're
现在，这里的问题是，如果你能看到的话，比如说，如果你看一下内存，你会发现

145
00:19:18,800 --> 00:19:24,120
having the same memory, physical memory, you have the data from multiple applications,
拥有相同的内存，物理内存，你可以获取来自多个应用程序的数据。

146
00:19:24,120 --> 00:19:32,040
and they have to read and write the data. Right? And certainly, you do not want, say
他们必须阅读和写入数据。对吗？当然，你不希望，比如说

147
00:19:32,040 --> 00:19:39,860
in this case, a program two or process two to read or even more to write the data in
在这种情况下，一个程序或者进程可以读取甚至写入多个数据。

148
00:19:39,860 --> 00:19:47,600
process one, of process one. Right? You also don't want any process two or for that matter
第一步，关于第一步。对吗？你也不想要任何第二步或者其他的步骤。

149
00:19:47,600 --> 00:19:58,120
of fact, any process to write, to modify the operating system memory. Right? Right?
事实上，任何编写、修改操作系统内存的过程。对吗？对吗？

150
00:19:58,140 --> 00:20:00,860
because then the operating system may crash, right?
因为那样的话操作系统可能会崩溃，对吗？

151
00:20:00,860 --> 00:20:02,140
If you let out an application,
如果你提交了一份申请，

152
00:20:02,140 --> 00:20:05,740
modify the operating system in memory, right?
修改操作系统的内存中，对吗？

153
00:20:05,740 --> 00:20:10,500
And also you need to be careful with the storage, right?
而且你需要注意存储，对吗？

154
00:20:10,500 --> 00:20:15,500
You shouldn't allow one program of one user
你不应该允许一个用户的一个程序。

155
00:20:15,500 --> 00:20:21,580
to modify the data of another users,
修改其他用户的数据。

156
00:20:21,580 --> 00:20:26,620
especially if that data is private or read it, okay?
尤其是如果这些数据是私密的或者阅读它，好吗？

157
00:20:28,020 --> 00:20:31,260
So this is what we mean now you need to,
这就是我们现在的意思，你需要...

158
00:20:31,260 --> 00:20:32,660
you protect, protection.
你保护，保护。

159
00:20:32,660 --> 00:20:35,540
So you need to protect one application,
所以你需要保护一个应用程序，

160
00:20:35,540 --> 00:20:36,780
one process from another.
一个过程从另一个过程中产生。

161
00:20:36,780 --> 00:20:40,300
You need to protect one process from the operating system
你需要保护一个进程免受操作系统的影响。

162
00:20:40,300 --> 00:20:44,660
and protect the operating system from the process, right?
并保护操作系统免受进程的影响，对吗？

163
00:20:44,660 --> 00:20:51,700
So when an application on a program tries to
因此，当程序中的一个应用程序尝试

164
00:20:54,220 --> 00:20:59,220
execute some of these actions, which are precluded,
执行一些被排除的行动。

165
00:20:59,220 --> 00:21:04,700
like accessing the data of, or the memory,
喜欢访问数据或内存的方式，

166
00:21:04,700 --> 00:21:07,460
which belongs to another process
属于另一个进程

167
00:21:07,460 --> 00:21:11,220
or accessing the memory belongs to the operating system.
或者访问属于操作系统的内存。

168
00:21:11,220 --> 00:21:15,780
The operating system, one way is going to deal with this
操作系统有一种方法来处理这个问题。

169
00:21:15,780 --> 00:21:19,820
offending application is crashing, crashing the processes,
冒犯的应用程序崩溃了，导致进程崩溃，

170
00:21:19,820 --> 00:21:22,220
segmentation fault, okay?
分段错误，好吗？

171
00:21:22,220 --> 00:21:27,220
But it's again, the main point here is that
但是，这里的主要问题是

172
00:21:27,220 --> 00:21:32,300
in order to create this illusion of,
为了营造这种幻觉，

173
00:21:32,300 --> 00:21:36,140
to a process that they are using the machine alone,
他们正在使用这台机器进行一个独立的过程。

174
00:21:36,140 --> 00:21:39,700
you need to isolate and to protect processes
你需要隔离和保护进程。

175
00:21:39,700 --> 00:21:40,540
from each other.
彼此之间。

176
00:21:40,540 --> 00:21:45,660
Also in order to make sure that the operating system itself
也为了确保操作系统本身

177
00:21:45,660 --> 00:21:50,380
is not crashes as a result of processes,
不会因为进程而崩溃。

178
00:21:52,020 --> 00:21:56,060
modifying operating system data,
修改操作系统数据。

179
00:21:56,060 --> 00:21:58,580
then you need also to,
然后你也需要，

180
00:21:58,580 --> 00:22:02,340
we need also to isolate the operating system itself
我们还需要隔离操作系统本身。

181
00:22:02,340 --> 00:22:03,620
from the processes.
从这些过程中。

182
00:22:03,620 --> 00:22:12,020
So let's see.
那么让我们来看看。

183
00:22:12,020 --> 00:22:17,620
Okay, I was looking at the question,
好的，我正在看这个问题，

184
00:22:17,620 --> 00:22:20,060
why is a good time for learning OS right now?
为什么现在是学习操作系统的好时机？

185
00:22:20,060 --> 00:22:24,300
It's again, we are going stick around until,
再次来了，我们会一直待下去，直到……

186
00:22:24,300 --> 00:22:26,660
you know, for the next half an hour or so.
你知道，接下来大约半个小时。

187
00:22:26,660 --> 00:22:35,860
Okay, so now the last way we can look at the
好的，现在我们可以看一下最后一种方式

188
00:22:35,860 --> 00:22:40,140
operating system is like a glue, right?
操作系统就像一种胶水，对吗？

189
00:22:40,140 --> 00:22:42,260
So why is that?
那为什么呢？

190
00:22:42,260 --> 00:22:46,180
It's again, it's like, it's very logic, right?
这又是，就像，这非常合乎逻辑，对吗？

191
00:22:46,180 --> 00:22:47,020
It's logical.
这是合乎逻辑的。

192
00:22:48,020 --> 00:22:51,980
First, you need to abstract away the hardware
首先，你需要将硬件抽象化。

193
00:22:51,980 --> 00:22:54,900
to make it much easier for the application developers
为了让应用开发者更容易

194
00:22:54,900 --> 00:22:56,220
to write applications.
编写应用程序。

195
00:22:56,220 --> 00:23:02,820
Second, you need to provide protection, isolations,
其次，您需要提供保护、隔离措施，

196
00:23:02,820 --> 00:23:05,220
because typically you are going to have multiple
因为通常情况下，你会有多个

197
00:23:05,220 --> 00:23:10,220
applications, multiple processes sharing the same hardware.
应用程序，多个进程共享相同的硬件。

198
00:23:10,220 --> 00:23:16,700
And the final part is that these applications
而最后一部分是这些应用程序

199
00:23:16,900 --> 00:23:20,660
or some applications are communicating with each other.
或者一些应用程序正在相互通信。

200
00:23:20,660 --> 00:23:24,500
So you need to provide some kind of glue between them.
所以你需要提供一种粘合剂将它们连接起来。

201
00:23:24,500 --> 00:23:28,100
You provide some common services.
你提供一些常见的服务。

202
00:23:28,100 --> 00:23:34,500
And this is coming in the form of networking or storage,
这是以网络或存储的形式呈现的。

203
00:23:34,500 --> 00:23:38,660
right? You can, application can communicate through files.
对吗？你可以，应用程序可以通过文件进行通信。

204
00:23:38,660 --> 00:23:40,020
One application writing a file,
一个应用程序正在写入一个文件，

205
00:23:40,020 --> 00:23:41,860
another application reads from a file.
另一个应用程序从文件中读取。

206
00:23:43,940 --> 00:23:48,540
And obviously this also comes with authorization
而且显然这也需要授权。

207
00:23:48,540 --> 00:23:49,540
and things like that.
等等之类的东西。

208
00:23:49,540 --> 00:23:55,740
But this is when you can think about the operating system
但是这是你可以考虑操作系统的时候

209
00:23:55,740 --> 00:23:58,540
as a glue, right?
作为胶水，对吗？

210
00:23:58,540 --> 00:24:04,980
And they need to provide the communications,
他们需要提供通讯设备。

211
00:24:04,980 --> 00:24:09,900
enable you the ability to share the resources.
使您能够共享资源。

212
00:24:09,900 --> 00:24:14,500
And again, the operating system is doing that
再次，操作系统正在执行这个任务。

213
00:24:14,500 --> 00:24:17,100
by providing these common services,
通过提供这些常见的服务，

214
00:24:17,100 --> 00:24:20,780
file systems, networking, and so forth.
文件系统、网络等等。

215
00:24:20,780 --> 00:24:23,940
Okay?
好的。

216
00:24:23,940 --> 00:24:25,100
So I'm going to stop here.
所以我要在这里停下来。

217
00:24:25,100 --> 00:24:26,740
Are there any questions?
有没有任何问题？

218
00:24:26,740 --> 00:24:35,660
So one question is what are the methods
所以一个问题是什么方法

219
00:24:35,660 --> 00:24:38,900
that allow different processes to talk with each other?
允许不同进程之间进行通信的方法是什么？

220
00:24:39,900 --> 00:24:43,420
I know with socket communication, it's a valid method.
我知道使用套接字通信是一种有效的方法。

221
00:24:43,420 --> 00:24:44,660
So there are a few of them
所以有几个他们。

222
00:24:44,660 --> 00:24:47,620
and we are going to learn about them.
我们将要学习关于它们的知识。

223
00:24:47,620 --> 00:24:49,740
Yeah, one is socket communication.
是的，其中一个是套接字通信。

224
00:24:49,740 --> 00:24:52,540
So it's like networking, right?
所以这就像是建立人际关系，对吗？

225
00:24:52,540 --> 00:24:56,300
You can communicate with each other, two processes,
你们可以互相交流，两个进程。

226
00:24:56,300 --> 00:24:57,940
whether they are on the same machine
他们是否在同一台机器上

227
00:24:57,940 --> 00:25:00,860
or different machines through sockets,
或者通过套接字连接到不同的机器，

228
00:25:00,860 --> 00:25:02,860
through a network interface.
通过网络接口。

229
00:25:02,860 --> 00:25:05,420
Okay?
好的？

230
00:25:06,620 --> 00:25:09,260
The processes which are on the same machine,
这些在同一台机器上运行的进程，

231
00:25:09,260 --> 00:25:11,780
they can also communicate through shared memory.
他们还可以通过共享内存进行通信。

232
00:25:11,780 --> 00:25:13,900
You can also have the ability
你也可以拥有这个能力。

233
00:25:13,900 --> 00:25:15,740
to communicate through shared memory.
通过共享内存进行通信。

234
00:25:15,740 --> 00:25:18,540
And also, like I mentioned earlier,
而且，正如我之前提到的，

235
00:25:18,540 --> 00:25:20,580
you can communicate through storage.
你可以通过存储进行通信。

236
00:25:20,580 --> 00:25:26,020
An application can write a piece of data
一个应用程序可以写入一段数据。

237
00:25:26,020 --> 00:25:29,100
on the local file system,
在本地文件系统上，

238
00:25:29,100 --> 00:25:31,900
or even for a global file system,
或者甚至是用于全球文件系统，

239
00:25:31,900 --> 00:25:34,780
and others application can read.
其他应用程序也可以阅读。

240
00:25:35,780 --> 00:25:36,620
Okay?
好的。

241
00:25:36,620 --> 00:25:42,060
Is a processor just what we call a CPU?
处理器就是我们所说的中央处理器（CPU）吗？

242
00:25:42,060 --> 00:25:46,780
Yes, for most cases, these are interchangeable.
是的，对大多数情况来说，它们是可以互换的。

243
00:25:46,780 --> 00:25:50,380
Although we are also going to call processor
虽然我们也会称之为处理器

244
00:25:50,380 --> 00:25:54,060
like specialized hardware, specialized processors.
像专用硬件、专用处理器一样。

245
00:25:54,060 --> 00:25:56,660
So processor is a little bit broader,
所以处理器的范围稍微广泛一些，

246
00:25:56,660 --> 00:25:59,380
but unless otherwise specified, they are equivalent.
但是除非另有规定，否则它们是等效的。

247
00:26:02,540 --> 00:26:06,660
Will ARM replace x86 in consumer space soon?
ARM is already making significant inroads in the consumer space and has the potential to replace x86 architecture in the future.

248
00:26:06,660 --> 00:26:14,100
Well, it's clear that ARM has a lot of momentum right now.
嗯，很明显，ARM目前势头很强劲。

249
00:26:14,100 --> 00:26:20,380
One example, it's obviously it's M1 from Apple.
一个例子，显然是苹果的M1。

250
00:26:20,380 --> 00:26:28,060
And you see that become more and more powerful,
而且你会看到它变得越来越强大，

251
00:26:28,060 --> 00:26:33,060
but there are also ARM starts to be deployed in data centers.
但是现在也开始在数据中心中部署ARM处理器。

252
00:26:33,060 --> 00:26:38,100
Actually, there is one new instance
实际上，有一个新的实例。

253
00:26:38,100 --> 00:26:41,500
which from Amazon called Graviton.
其中来自亚马逊的产品名为Graviton。

254
00:26:41,500 --> 00:26:44,340
And this is around ARM processor.
这是关于ARM处理器的内容。

255
00:26:44,340 --> 00:26:47,220
And it's quite fast.
而且它非常快速。

256
00:26:47,220 --> 00:26:50,540
It's actually has very good performance and it's cheaper.
它实际上性能非常好，而且价格更便宜。

257
00:26:50,540 --> 00:26:53,660
Now we'll see, right?
现在我们就看看，对吧？

258
00:26:53,660 --> 00:26:57,100
Because you know what Intel is going to do,
因为你知道Intel将要做什么，

259
00:26:57,100 --> 00:27:01,500
clearly they announced a bunch of initiatives, but yes.
显然他们宣布了一系列的举措，但是是的。

260
00:27:01,500 --> 00:27:06,500
ARM, it's has a lot of momentum at this point.
ARM在目前有很大的势头。

261
00:27:06,500 --> 00:27:11,740
Okay.
Sure, I can help you with that. Please go ahead and provide me with the text you would like me to translate.

262
00:27:11,740 --> 00:27:20,540
Let me go here.
让我去这里。

263
00:27:20,540 --> 00:27:26,020
Yeah, there is something about virtualization.
是的，虚拟化确实有一些特点。

264
00:27:26,020 --> 00:27:27,780
There is something about,
有一件事情，

265
00:27:27,780 --> 00:27:29,220
there are a few more questions here.
这里还有几个问题。

266
00:27:29,220 --> 00:27:31,420
Let me answer them.
让我来回答它们。

267
00:27:31,420 --> 00:27:36,700
It's one question on the chat.
这是一个聊天中的问题。

268
00:27:36,700 --> 00:27:41,700
By the way, please try to ask question for on Q&A.
顺便说一下，请尝试在问答环节提出问题。

269
00:27:41,700 --> 00:27:46,500
So I have one source I can read them from.
所以我有一个可以从中阅读它们的来源。

270
00:27:46,500 --> 00:27:54,260
So yeah, there are a few more questions here.
嗯，是的，这里还有几个问题。

271
00:27:54,620 --> 00:27:59,620
Yeah, there are some comments about VMware,
是的，有一些关于VMware的评论。

272
00:27:59,620 --> 00:28:00,980
about virtualization.
关于虚拟化。

273
00:28:00,980 --> 00:28:03,180
Yes, we are going to talk about virtualization
是的，我们将要讨论虚拟化。

274
00:28:03,180 --> 00:28:06,620
even a little bit during this lecture.
在这堂讲座中，即使只有一点点也可以。

275
00:28:06,620 --> 00:28:13,060
But yes, virtualization is a way to provide the illusion
但是，是的，虚拟化是一种提供幻觉的方式。

276
00:28:13,060 --> 00:28:15,780
to every process, to every application
对于每个进程，对于每个应用程序

277
00:28:15,780 --> 00:28:20,620
that they are using alone the machine.
他们正在独自使用这台机器。

278
00:28:21,980 --> 00:28:25,500
There is another question about RISC-V.
关于RISC-V还有一个问题。

279
00:28:25,500 --> 00:28:29,100
This obviously was done at Berkeley.
这显然是在伯克利完成的。

280
00:28:29,100 --> 00:28:34,100
I think RISC-V has a great future.
我认为RISC-V有着很好的前景。

281
00:28:34,100 --> 00:28:38,700
And for those of you who don't know,
对于那些不知道的人，

282
00:28:38,700 --> 00:28:42,900
RISC-V is an open instruction set architecture,
RISC-V是一种开放的指令集架构，

283
00:28:42,900 --> 00:28:47,900
which means that you don't need to pay any license to use it
这意味着您使用它时不需要支付任何许可费用。

284
00:28:48,980 --> 00:28:52,620
to build processors around it.
围绕它来构建处理器。

285
00:28:52,620 --> 00:28:58,860
In contrast ARM, for ARM you need to pay license
与ARM相比，对于ARM，您需要支付许可费用。

286
00:28:58,860 --> 00:29:03,860
in order to use and to provide the ARM instruction set.
为了使用和提供ARM指令集。

287
00:29:03,860 --> 00:29:15,940
But RISC-V now it's targeting Internet of Things
但是RISC-V现在的目标是物联网。

288
00:29:16,420 --> 00:29:21,420
or mobile devices, very low power.
或移动设备，功耗非常低。

289
00:29:21,420 --> 00:29:27,380
This is how they started, but this is the way ARM started.
这是他们的起点，但这就是ARM的起点。

290
00:29:27,380 --> 00:29:32,780
So you'll see maybe RISC, there is a chance
所以你可能会看到RISC，有机会的话。

291
00:29:32,780 --> 00:29:36,900
they are going to follow the trajectory of ARM
他们将会追随ARM的轨迹。

292
00:29:36,900 --> 00:29:41,900
and it can become for ARM what ARM is for Intel, right?
是的，它可以成为对于ARM来说，就像ARM对于英特尔一样的存在，对吗？

293
00:29:41,900 --> 00:29:44,820
But it's okay, it's obvious.
但没关系，这是显而易见的。

294
00:29:44,820 --> 00:29:49,820
This is in the future, but obviously it has a lot of promise.
这是在未来，但显然有很多潜力。

295
00:29:49,820 --> 00:29:55,820
Okay, I'm going to go back now to the lecture slides.
好的，我现在要回去看讲义幻灯片了。

296
00:29:55,820 --> 00:30:03,140
Oops, okay.
抱歉，好的。

297
00:30:03,140 --> 00:30:09,580
So it's again, this is give examples
所以，这是再次给出例子。

298
00:30:09,580 --> 00:30:13,060
about some of the services which are provided
关于一些提供的服务

299
00:30:13,060 --> 00:30:15,820
by the operating system, we didn't discuss so far.
关于操作系统，我们到目前为止还没有讨论过。

300
00:30:15,820 --> 00:30:22,100
And some of the management services
和一些管理服务

301
00:30:22,100 --> 00:30:24,740
and that the operating system provides
并且操作系统提供了什么。

302
00:30:24,740 --> 00:30:27,660
and maybe you do not think right away to them.
也许你并不立刻想到他们。

303
00:30:27,660 --> 00:30:31,020
It's like power management, right?
这就像是电源管理，对吗？

304
00:30:31,020 --> 00:30:33,460
Well, especially for mobile devices,
好的，尤其是对于移动设备来说，

305
00:30:33,460 --> 00:30:37,020
you need to manage the power and across the application,
你需要管理电源和应用程序之间的连接。

306
00:30:37,020 --> 00:30:40,020
you have a application which use a disproportionate amount
你有一个应用程序使用了不成比例的数量。

307
00:30:40,020 --> 00:30:41,980
of battery, maybe you want to isolate
电池没电了，也许你想要隔离一下。

308
00:30:41,980 --> 00:30:44,300
to protect other application from that.
保护其他应用程序免受此影响。

309
00:30:44,300 --> 00:30:48,780
And of course you need to manage the network,
当然，你还需要管理网络，

310
00:30:48,780 --> 00:30:53,340
you need to manage almost every shared resource, right?
你需要管理几乎所有的共享资源，对吗？

311
00:30:53,340 --> 00:31:00,060
When I mean share, I refer share by multiple applications.
当我说分享时，我指的是通过多个应用程序进行分享。

312
00:31:00,060 --> 00:31:05,060
Okay, so in summary, it's again repeating, right?
好的，所以总结一下，又是在重复，对吗？

313
00:31:05,060 --> 00:31:09,500
There are three things an operating system is doing.
操作系统正在进行三件事情。

314
00:31:09,500 --> 00:31:13,460
One is providing a clean, easy to use abstractions
一个是提供一个干净、易于使用的抽象化界面。

315
00:31:13,460 --> 00:31:16,220
of the physical resources to the application,
将物理资源分配给应用程序，

316
00:31:16,220 --> 00:31:19,060
make it much easier for application developers
让应用开发者更容易。

317
00:31:19,060 --> 00:31:21,100
to develop this application.
开发这个应用程序。

318
00:31:21,100 --> 00:31:23,420
And this piece like you can think about this,
这个片子就像你可以思考一下，

319
00:31:23,420 --> 00:31:25,580
like is like you lose your list.
喜欢就像你失去了清单。

320
00:31:25,580 --> 00:31:31,780
Then which follows from providing clean abstractions,
从提供清晰的抽象中得出的结论是什么？

321
00:31:31,780 --> 00:31:34,540
you can think about operating system as a referee.
你可以把操作系统看作是一名裁判。

322
00:31:34,540 --> 00:31:38,780
And in this case, the operating system provides protection
而在这种情况下，操作系统提供保护。

323
00:31:38,780 --> 00:31:42,820
and isolations of shared resources
和共享资源的隔离

324
00:31:42,820 --> 00:31:47,820
across for multiple applications, right?
是的，可以用于多个应用。

325
00:31:47,820 --> 00:31:53,100
We share those resources, okay?
我们共享这些资源，好吗？

326
00:31:53,100 --> 00:31:58,020
And the final is that it's a glue
最后的结果是它是一种胶水。

327
00:31:58,020 --> 00:32:02,540
that operating system provides common services
该操作系统提供常见的服务。

328
00:32:02,540 --> 00:32:06,940
and in particularly also enables this application
并且特别是还使得这个应用程序能够实现

329
00:32:06,940 --> 00:32:09,700
to communicate to each other, right?
是的，互相沟通，对吗？

330
00:32:09,700 --> 00:32:16,700
So now let's talk a little bit more
所以现在让我们再多聊一点吧。

331
00:32:16,700 --> 00:32:21,740
about CS162 in general,
关于CS162的总体情况，

332
00:32:21,740 --> 00:32:25,260
and then talk a little bit about why now
然后稍微谈一下为什么现在。

333
00:32:25,260 --> 00:32:28,900
and why it's exciting and challenging.
为什么这令人兴奋和具有挑战性。

334
00:32:28,900 --> 00:32:32,700
So why take CS162?
那为什么要选修CS162呢？

335
00:32:32,700 --> 00:32:35,140
It's again, because some of you will actually design
这又是因为你们中的一些人实际上会设计。

336
00:32:35,140 --> 00:32:38,780
and build operating system or components of them,
并构建操作系统或其组件。

337
00:32:38,780 --> 00:32:41,100
like file systems, right?
像文件系统一样，对吗？

338
00:32:41,100 --> 00:32:45,340
You go to Google, you may work on Android, for instance.
你去Google，你可以在Android上工作，例如。

339
00:32:45,340 --> 00:32:48,300
You go to Apple, you may, or Microsoft,
你可以去苹果公司，或者微软公司。

340
00:32:48,300 --> 00:32:50,820
you may work on their operating systems.
你可以在他们的操作系统上工作。

341
00:32:50,820 --> 00:32:54,300
Or if you are to any company,
或者如果你对任何公司感兴趣的话，

342
00:32:54,300 --> 00:32:58,580
which depend running its software on Linux,
依赖于在Linux上运行其软件的

343
00:32:58,580 --> 00:33:02,980
you may work on Linux to provide new capabilities
你可以在Linux上工作，提供新的功能。

344
00:33:02,980 --> 00:33:06,540
for the applications that are important for your company.
对于对您公司重要的应用程序。

345
00:33:06,540 --> 00:33:14,180
But many of you are going to build software
但是你们中的许多人将要开发软件。

346
00:33:14,180 --> 00:33:17,220
which run on top of the operating systems.
运行在操作系统之上的。

347
00:33:17,220 --> 00:33:18,820
And to build better software,
为了构建更好的软件，

348
00:33:18,820 --> 00:33:22,300
you need to understand how the operating system was working.
你需要了解操作系统是如何工作的。

349
00:33:22,300 --> 00:33:26,140
You need to understand the concepts, right?
你需要理解这些概念，对吗？

350
00:33:26,140 --> 00:33:29,340
So that's what it is.
这就是它的原因。

351
00:33:29,340 --> 00:33:32,780
So next time I'm going to talk about
下次我要谈论的是什么？

352
00:33:32,780 --> 00:33:36,100
what makes operating system exciting and challenging.
什么使操作系统变得令人兴奋和具有挑战性。

353
00:33:36,100 --> 00:33:39,020
And let me check again for the questions.
让我再次检查一下问题。

354
00:33:39,020 --> 00:33:54,940
How can application interact with these common services?
应用程序如何与这些常见服务进行交互？

355
00:33:54,940 --> 00:33:58,420
Through the API, application programming interfaces.
通过API，应用程序编程接口。

356
00:34:00,100 --> 00:34:03,700
I mentioned a little bit in passing earlier on.
我之前只是顺便提到了一点。

357
00:34:03,700 --> 00:34:08,700
And these are exposed by system libraries, right?
是的，这些是由系统库暴露出来的，对吗？

358
00:34:08,700 --> 00:34:12,980
For instance, if you want to access a file,
例如，如果你想要访问一个文件，

359
00:34:12,980 --> 00:34:16,340
you are going to have an API to access that file.
你将拥有一个API来访问那个文件。

360
00:34:16,340 --> 00:34:18,420
Read, write, seek.
读，写，探索。

361
00:34:18,420 --> 00:34:23,420
The same for communication, sending and receiving data.
通信、发送和接收数据也是一样的。

362
00:34:23,420 --> 00:34:26,980
You are going to have another API.
你将会有另一个API。

363
00:34:27,900 --> 00:34:30,260
And this is exposed by the system libraries
这是由系统库暴露出来的。

364
00:34:30,260 --> 00:34:32,340
and implement it.
并且实施它。

365
00:34:32,340 --> 00:34:35,340
Well, why does searching for files
好的，为什么要搜索文件呢？

366
00:34:35,340 --> 00:34:39,100
on Windows File Explorer feel super slow?
在Windows文件资源管理器上感觉非常慢吗？

367
00:34:39,100 --> 00:34:40,300
Unfortunately, I don't know.
很遗憾，我不知道。

368
00:34:40,300 --> 00:34:42,100
I have no answer to that question,
我对那个问题没有答案。

369
00:34:42,100 --> 00:34:43,860
but if you get the answer,
但是如果你得到答案，

370
00:34:43,860 --> 00:34:45,500
I'll be interested in the answer.
我对答案很感兴趣。

371
00:34:45,500 --> 00:34:53,540
Okay, so in short,
好的，简而言之，

372
00:34:53,540 --> 00:34:58,420
what makes the system, the operating system,
什么构成了系统，操作系统，

373
00:34:58,420 --> 00:35:01,980
now extremely exciting
现在非常令人兴奋。

374
00:35:01,980 --> 00:35:04,220
is because there are many things happening.
是因为有很多事情正在发生。

375
00:35:04,220 --> 00:35:06,100
In the next few slides,
在接下来的几张幻灯片中，

376
00:35:06,100 --> 00:35:08,100
I'm going to tell you what happens.
我要告诉你发生了什么事情。

377
00:35:08,100 --> 00:35:13,100
And these things actually makes operating systems,
这些东西实际上构成了操作系统。

378
00:35:13,100 --> 00:35:19,460
addressing the operating system problems more difficult
解决操作系统问题更加困难。

379
00:35:19,460 --> 00:35:22,580
and hopefully more rewarding once you solve the problems.
并且一旦你解决了问题，希望会更加有回报。

380
00:35:23,580 --> 00:35:26,900
So as you probably know, and you heard that,
所以你可能知道，你听说过，

381
00:35:26,900 --> 00:35:29,700
I'm sure everyone heard that many times,
我相信每个人都听过很多次，

382
00:35:29,700 --> 00:35:34,020
for the most than, more than 50 years,
在过去的50多年中，

383
00:35:34,020 --> 00:35:38,700
all our industry, hardware industry, software industry,
我们所有的行业，硬件行业，软件行业，

384
00:35:38,700 --> 00:35:43,700
and large part was really driven by the morsel.
而且很大一部分实际上是由这个细小的部分推动的。

385
00:35:43,700 --> 00:35:51,100
Machines are harder becoming more and more powerful,
机器变得越来越强大。

386
00:35:51,100 --> 00:35:52,100
very fast.
非常快。

387
00:35:52,100 --> 00:35:55,940
So according to Gordon Moore,
据戈登·摩尔所说，

388
00:35:55,940 --> 00:35:58,860
who was a co-founder of Intel,
英特尔的联合创始人是谁？

389
00:35:58,860 --> 00:36:02,180
in '65 he predicted that the transistor density
在1965年，他预测晶体管密度会增加。

390
00:36:02,180 --> 00:36:06,060
of semiconductor chips will double roughly every two years.
半导体芯片的数量大约每两年翻一番。

391
00:36:06,060 --> 00:36:10,220
That's a morsel, right?
那是一小口，对吗？

392
00:36:10,220 --> 00:36:14,460
And you have this plus here and you see a line,
而且你在这里有一个加号，然后你会看到一条线，

393
00:36:14,460 --> 00:36:17,620
but you see a line on the X axis is the time,
但是你看到X轴上的一条线代表的是时间，

394
00:36:17,620 --> 00:36:21,100
on the Y axis it's the performance
在Y轴上是性能。

395
00:36:21,100 --> 00:36:22,900
or the number of transistors.
或者晶体管的数量。

396
00:36:22,900 --> 00:36:26,660
And you have a line, why?
你有什么问题吗？

397
00:36:26,660 --> 00:36:28,820
Because the Y axis is in log scale.
因为Y轴是对数刻度。

398
00:36:28,820 --> 00:36:35,660
Now, Moore's law says every,
现在，摩尔定律说每

399
00:36:35,660 --> 00:36:40,140
the transistor density doubles roughly every two years.
晶体管密度大约每两年翻一番。

400
00:36:40,140 --> 00:36:42,340
So in the same, on the same area,
在同一个地方

401
00:36:42,340 --> 00:36:46,180
you can cram twice as many transistors.
你可以将晶体管数量增加一倍。

402
00:36:46,180 --> 00:36:50,660
And this leads to the performance of the processor,
这导致了处理器的性能。

403
00:36:50,660 --> 00:36:54,020
doubling roughly every 18 months.
每18个月翻一番左右。

404
00:36:54,020 --> 00:36:55,780
Why discrepancy?
为什么不一致？

405
00:36:55,780 --> 00:36:59,620
The discrepancy is because since the transistors
差异是因为自从晶体管

406
00:36:59,620 --> 00:37:01,540
are becoming closer to each other,
彼此越来越接近，

407
00:37:01,540 --> 00:37:05,260
the latency between transistors to communicate
晶体管之间的延迟以进行通信

408
00:37:05,260 --> 00:37:07,860
between transistors decreases.
晶体管之间的距离减小了。

409
00:37:07,860 --> 00:37:11,460
And therefore you have double reasons.
所以你有双重理由。

410
00:37:11,460 --> 00:37:14,620
You know, you have, there are these compounds.
你知道，你有，有这些化合物。

411
00:37:15,620 --> 00:37:19,420
To increasing the transistor density.
为了增加晶体管密度。

412
00:37:19,420 --> 00:37:23,860
And therefore the performance increases a little bit faster
所以性能提升速度稍微快一点。

413
00:37:23,860 --> 00:37:25,820
or used to increase a little bit faster.
或者用来稍微增加一点速度。

414
00:37:25,820 --> 00:37:28,300
Okay?
好的。

415
00:37:28,300 --> 00:37:34,780
The challenge is that the Moore's law ended.
挑战在于摩尔定律的终结。

416
00:37:34,780 --> 00:37:38,660
Okay?
好的。

417
00:37:38,660 --> 00:37:42,660
This again, it shows here the performance
这又是一次，这里显示了表现。

418
00:37:43,660 --> 00:37:48,660
and versus time, the performance of a single core
和时间的对比，单个核心的性能

419
00:37:48,660 --> 00:37:50,100
of a processor.
处理器的一部分。

420
00:37:50,100 --> 00:37:56,580
And between 1985 and 2002 or 2003,
1985年至2002年或2003年之间，

421
00:37:56,580 --> 00:38:00,860
this was where you see here with green,
这是你在这里看到的绿色地方。

422
00:38:00,860 --> 00:38:05,860
this is the golden age, so to speak.
这是所谓的黄金时代。

423
00:38:05,860 --> 00:38:12,140
Because in this period, performance,
因为在这个时期，表现，

424
00:38:13,300 --> 00:38:18,300
increased, doubled every 18 months
每18个月增加一倍。

425
00:38:18,300 --> 00:38:20,900
or increased 52% every year.
或者每年增长52%。

426
00:38:20,900 --> 00:38:28,380
And the problem right now is that this performance per core
目前的问题是每个核心的性能。

427
00:38:28,380 --> 00:38:31,980
increases just a few percent every year.
每年只增长几个百分点。

428
00:38:31,980 --> 00:38:33,740
Okay?
好的？

429
00:38:33,740 --> 00:38:35,580
So that's it.
就是这样了。

430
00:38:35,580 --> 00:38:37,540
Okay?
好的？

431
00:38:37,540 --> 00:38:39,980
So this is a big problem.
这是一个大问题。

432
00:38:39,980 --> 00:38:42,900
And why is this a big problem?
为什么这是一个大问题呢？

433
00:38:42,900 --> 00:38:47,220
Because at the time when the capabilities of a single core
因为在单个核心的能力达到极限的时候

434
00:38:47,220 --> 00:38:52,380
basically are no longer increasing.
基本上不再增加。

435
00:38:52,380 --> 00:38:57,180
The demands of the new applications
新应用的需求

436
00:38:57,180 --> 00:38:59,380
are increasing faster than ever.
正在以前所未有的速度增长。

437
00:38:59,380 --> 00:39:08,100
So here it's a plot, open AI plot.
这是一个情节，开放AI的情节。

438
00:39:08,100 --> 00:39:10,980
Many of you maybe may have seen it.
你们中的许多人可能已经看过了。

439
00:39:10,980 --> 00:39:15,980
And it shows compute requirements
并且显示了计算要求。

440
00:39:15,980 --> 00:39:19,740
to train the state of the art models.
训练最先进的模型。

441
00:39:19,740 --> 00:39:25,180
This is plot was going back to 2012, was published in 2019.
这个情节是回溯到2012年，于2019年出版。

442
00:39:25,180 --> 00:39:29,020
Again, it's a log scale.
再次强调，这是一个对数刻度。

443
00:39:29,020 --> 00:39:34,020
And if you look here, this growth is absolutely astounding.
而且，如果你看这里，这个增长绝对令人惊讶。

444
00:39:34,020 --> 00:39:39,140
The requirements, compute requirements
需求，计算需求

445
00:39:40,140 --> 00:39:44,980
grew 35 times every 18 months.
每18个月增长了35倍。

446
00:39:44,980 --> 00:39:52,260
And I added here another data point for 2020.
我在这里添加了2020年的另一个数据点。

447
00:39:52,260 --> 00:39:54,340
A new model was released, if you remember,
一款新型号已经发布了，如果你还记得的话，

448
00:39:54,340 --> 00:39:56,580
a little more than one year ago, GPT-C.
一年多前，GPT-C。

449
00:39:56,580 --> 00:40:01,120
3 from OpenAI made a lot of waves.
3来自OpenAI引起了很大的轰动。

450
00:40:01,120 --> 00:40:07,560
It has 175 million parameters.
它有1.75亿个参数。

451
00:40:07,560 --> 00:40:09,880
And it's again, it fills a curve.
而且，它又填满了一个曲线。

452
00:40:09,880 --> 00:40:13,100
And this again, is not only esoteric models.
而且，这并不仅限于深奥的模型。

453
00:40:13,100 --> 00:40:21,160
You have models like GPT-3 is actually language model,
你们有像GPT-3这样的模型，实际上是语言模型。

454
00:40:21,160 --> 00:40:24,880
video model, pattern recognition,
视频模型，模式识别。

455
00:40:24,880 --> 00:40:28,200
and things like that.
等等之类的东西。

456
00:40:28,200 --> 00:40:29,520
And now here is a Moore's law.
现在，这里是摩尔定律。

457
00:40:29,520 --> 00:40:33,120
Actually, the Moore's law even forget that it ended.
实际上，摩尔定律甚至忘记了它已经结束了。

458
00:40:33,120 --> 00:40:38,000
Even if it weren't ended, we would be in a big trouble.
即使它没有结束，我们也会陷入大麻烦中。

459
00:40:38,000 --> 00:40:39,080
But of course, it ended.
但是当然，它结束了。

460
00:40:39,080 --> 00:40:41,200
And this is actually how the Moore's law looked like.
这实际上就是摩尔定律的样子。

461
00:40:41,200 --> 00:40:46,040
So you see the gap.
所以你看到了这个差距。

462
00:40:46,040 --> 00:40:46,880
This is huge.
这是巨大的。

463
00:40:46,880 --> 00:40:48,120
And this is exponential.
这是指数级的增长

464
00:40:48,120 --> 00:40:52,040
It's again, you have a log scale here.
这里又是一个对数刻度。

465
00:40:52,040 --> 00:40:56,720
And the gap increases exponentially every year
而且这个差距每年呈指数增长。

466
00:40:56,720 --> 00:40:59,480
or every day if you want.
或者每天，如果你愿意的话。

467
00:40:59,480 --> 00:41:01,880
OK?
好的？

468
00:41:01,880 --> 00:41:03,240
So now what do you do about it?
那么现在你打算怎么处理呢？

469
00:41:03,240 --> 00:41:11,020
Of course, you heard about specialized processors.
当然，你听说过专用处理器。

470
00:41:11,020 --> 00:41:16,040
You have GPUs like Nvidia GPUs.
你有像Nvidia GPU这样的GPU。

471
00:41:16,040 --> 00:41:18,600
A100 is the latest one.
A100是最新的。

472
00:41:18,600 --> 00:41:26,960
TPUs from TensorFlow processor units, from Google.
来自谷歌的TensorFlow处理器单元（TPUs）。

473
00:41:26,960 --> 00:41:31,680
Cerebras, this is a company building huge chips,
Cerebras，这是一家正在制造巨型芯片的公司，

474
00:41:31,680 --> 00:41:33,600
very powerful.
非常强大。

475
00:41:33,600 --> 00:41:37,520
And everyone else builds their own version of GPU.
而其他人都在构建自己的GPU版本。

476
00:41:37,520 --> 00:41:43,460
Intel, Alchemist, Newer Announcement, AMD, Radion,
英特尔，炼金术士，新的公告，AMD，雷龙。

477
00:41:43,460 --> 00:41:46,000
and so forth.
等等。

478
00:41:46,000 --> 00:41:50,680
So the main idea here, obviously with this specialized hardware,
所以这里的主要思想显然是，通过这种专用硬件，

479
00:41:50,680 --> 00:41:54,480
is that you are going to narrow the workloads you
你是要减少工作量吗？

480
00:41:54,480 --> 00:41:56,840
want to support.
想要支持。

481
00:41:56,840 --> 00:41:59,680
And because of that, you know more about that workload.
因此，你对那个工作量更了解。

482
00:41:59,680 --> 00:42:02,600
So you can do more optimizations.
所以你可以进行更多的优化。

483
00:42:02,600 --> 00:42:07,560
And you can be smarter in the way you design the chip.
你可以在设计芯片的方式上更加聪明。

484
00:42:07,560 --> 00:42:10,480
You increase the parallelism and things like that.
你增加并行性和类似的东西。

485
00:42:10,480 --> 00:42:14,080
So you can make it much faster for that workload
所以你可以让它处理那个工作负载更快速一些。

486
00:42:14,080 --> 00:42:16,440
than a general proposed processor.
比一般提议的处理器更好。

487
00:42:16,440 --> 00:42:22,320
But now you need to program these things as well.
但是现在你也需要编程这些东西。

488
00:42:22,320 --> 00:42:25,400
You may need to share these things as well.
你可能也需要分享这些东西。

489
00:42:25,400 --> 00:42:29,200
And they are going to be quite different from the CPUs.
而它们将与中央处理器（CPU）相当不同。

490
00:42:29,200 --> 00:42:31,600
And who has to deal with that?
那个问题由谁来处理？

491
00:42:31,600 --> 00:42:34,800
That's biggest stand if your operating system
这是你操作系统的最大支持。

492
00:42:34,800 --> 00:42:37,120
has to deal with it.
必须处理它。

493
00:42:37,120 --> 00:42:37,620
OK?
好的。

494
00:42:40,760 --> 00:42:47,160
Now, the problem is that even with this specialized hardware,
现在的问题是，即使有了这种专用硬件，

495
00:42:47,160 --> 00:42:48,560
they help.
他们帮忙。

496
00:42:48,560 --> 00:42:51,800
Obviously, they are more powerful than a single core.
显然，它们比单核更强大。

497
00:42:51,800 --> 00:43:00,960
But still, they don't close the gap.
但是，他们仍然没有弥合差距。

498
00:43:00,960 --> 00:43:06,680
And here, it's the performance of the GPUs and of the TPUs
这里是GPU和TPU的性能表现。

499
00:43:06,680 --> 00:43:13,160
on the same plot.
在同一地块上。

500
00:43:13,160 --> 00:43:15,880
And there is a star here, basically,
这里有一颗星星，基本上，

501
00:43:15,880 --> 00:43:20,400
saying we are assuming in order to make sense
我们假设是为了让事情有意义。

502
00:43:20,400 --> 00:43:26,400
and to normalize, typically, in particular,
并且进行标准化，通常来说，特别是，

503
00:43:26,400 --> 00:43:32,000
based on open AI data, the utilization of the hardware
基于Open AI的数据，硬件的利用率

504
00:43:32,000 --> 00:43:35,080
by this state-of-the-art training algorithms
通过这些先进的训练算法

505
00:43:35,080 --> 00:43:37,480
is like 33%.
是大约33%。

506
00:43:37,480 --> 00:43:41,040
So when I show the performance of the GPUs and TPUs here,
那么当我在这里展示GPU和TPU的性能时，

507
00:43:41,040 --> 00:43:43,560
I am factoring it for that utilization.
我正在为那个用途进行因式分解。

508
00:43:43,560 --> 00:43:51,960
So that's a huge problem, right?
那是一个巨大的问题，对吗？

509
00:43:51,960 --> 00:43:53,880
Even with the CPUs and GPUs.
即使有中央处理器（CPUs）和图形处理器（GPUs）。

510
00:43:53,880 --> 00:43:58,480
And these memory demands are growing as fast, even faster.
而且这些内存需求正在以更快的速度增长。

511
00:43:58,480 --> 00:44:02,360
So here, it's a log-log scale.
这里是一个对数-对数尺度。

512
00:44:02,360 --> 00:44:06,320
Here is the number of parameters of these models.
这些模型的参数数量如下。

513
00:44:06,320 --> 00:44:10,320
And this is from 2016.
这是来自2016年的。

514
00:44:10,320 --> 00:44:16,080
And now, the last point is this Vodao.
现在，最后一个点是这个Vodao。

515
00:44:16,080 --> 00:44:18,960
This is from China.
这是来自中国的。

516
00:44:18,960 --> 00:44:26,400
And this is 1.75 trillion parameters.
这是1.75万亿个参数。

517
00:44:26,400 --> 00:44:31,200
So it's 10 times larger than GPT-3.
所以它比GPT-3大10倍。

518
00:44:31,200 --> 00:44:32,680
And I'm sure you are going to hear
我相信你会听到的。

519
00:44:32,680 --> 00:44:35,920
about other announcement, even bigger models.
关于其他公告，甚至还有更大的型号。

520
00:44:35,920 --> 00:44:38,240
So if you plot and if you look at this data,
那么，如果你绘制图表并查看这些数据，

521
00:44:38,240 --> 00:44:40,440
it's again, it's again log scale,
这又是，这又是对数刻度。

522
00:44:40,440 --> 00:44:43,520
although it may not look like.
虽然它可能看起来不像。

523
00:44:43,520 --> 00:44:46,000
Since 2016, the size of this model
自2016年以来，这个模型的尺寸

524
00:44:46,000 --> 00:44:48,520
increased 40 times every 18 months.
每18个月增长了40倍。

525
00:44:48,520 --> 00:44:54,640
And if you look at the last three years, 340 times.
而且如果你看过去三年，共计340次。

526
00:44:54,640 --> 00:44:58,800
This is phenomenal.
这太棒了。

527
00:44:58,800 --> 00:45:06,560
During this time, the GPU memory, 1.7x every 18 months.
在这段时间内，GPU的内存每18个月增长1.7倍。

528
00:45:06,560 --> 00:45:14,040
So it used to be, not a few years back, in 2017, '18,
那么，不是几年前的事了，在2017年、2018年，

529
00:45:14,040 --> 00:45:19,440
you can fit the largest models on a single GPU.
你可以在单个GPU上容纳最大的模型。

530
00:45:19,440 --> 00:45:23,240
Now, you need more than 1,000 GPUs
现在，你需要超过1,000个GPU。

531
00:45:23,240 --> 00:45:25,760
just to store the parameters of the largest models.
只是为了存储最大模型的参数。

532
00:45:25,760 --> 00:45:26,260
OK?
好的。

533
00:45:26,260 --> 00:45:37,240
So let's see what are the other trends.
那么让我们看看其他的趋势是什么。

534
00:45:37,240 --> 00:45:38,800
Now, let's move to storage capacity.
现在，让我们来谈谈存储容量。

535
00:45:38,800 --> 00:45:40,320
Storage capacity is still growing,
存储容量仍在增长。

536
00:45:40,320 --> 00:45:43,280
still growing exponentially.
仍在指数级增长。

537
00:45:43,280 --> 00:45:51,280
And the one thing here, it used to be dominating the storage
而这里的一件事，它曾经主导着存储。

538
00:45:51,280 --> 00:45:53,440
by hard disk drives.
通过硬盘驱动器。

539
00:45:53,440 --> 00:45:54,400
No longer.
不再。

540
00:45:54,400 --> 00:45:59,240
Now, you have more and more solid state devices.
现在，你有越来越多的固态设备。

541
00:45:59,240 --> 00:46:07,240
And you can see here the capacity of a solid state drive
这里可以看到固态硬盘的容量。

542
00:46:07,240 --> 00:46:14,000
started to exceed in 2015, '16.
开始在2015年和2016年超过。

543
00:46:14,000 --> 00:46:17,840
So the biggest SSD drive exceeded
所以最大的固态硬盘超出了预期。

544
00:46:17,840 --> 00:46:22,560
the capacity of the biggest, hardest drive around 2015
2015年左右最大、最硬的硬盘容量是多少？

545
00:46:22,560 --> 00:46:24,320
to '16.
到'16年。

546
00:46:24,320 --> 00:46:28,200
And today, if you are looking, the largest SSD,
而今天，如果你在寻找的话，最大的固态硬盘是

547
00:46:28,200 --> 00:46:32,480
3.5 inch drive, is 100 terabytes.
3.5英寸硬盘，容量为100TB。

548
00:46:32,480 --> 00:46:36,360
The largest SSD is 18 terabytes.
最大的固态硬盘容量为18TB

549
00:46:36,360 --> 00:46:42,000
Now, you are going to pay dearly for this 100 terabyte SSD
现在，你将为这个100TB固态硬盘付出巨大的代价。

550
00:46:42,000 --> 00:46:42,840
drive.
驾驶。

551
00:46:42,840 --> 00:46:45,280
It costs 40K.
它的价格是40K。

552
00:46:45,280 --> 00:46:47,720
It's 400 per terabytes.
每个太字节是400元。

553
00:46:47,720 --> 00:46:51,480
While to get 18 terabytes, sorry, this
虽然要获得18TB，抱歉，这

554
00:46:51,480 --> 00:46:53,120
is hardest drive.
是最困难的驱动器。

555
00:46:53,120 --> 00:46:53,800
I'm sorry.
对不起。

556
00:46:53,800 --> 00:46:55,840
I'm going to just correct this one.
我只是要纠正这一个。

557
00:46:55,840 --> 00:47:03,200
OK?
好的。

558
00:47:03,200 --> 00:47:11,040
So for that, you pay only $600, so you're $33 per terabytes.
所以为此，你只需支付600美元，即每TB 33美元。

559
00:47:11,040 --> 00:47:16,600
Now, you can have more economical choices
现在，你可以有更经济实惠的选择。

560
00:47:16,600 --> 00:47:17,880
when you look at the SSDs.
当你看着固态硬盘时。

561
00:47:17,880 --> 00:47:21,120
Like, for instance, if you want 4 terabytes SSD,
比如，如果你想要4TB的固态硬盘，

562
00:47:21,120 --> 00:47:24,720
it costs $95 per terabyte, still more expensive
每个1TB的价格是95美元，仍然比较贵。

563
00:47:24,720 --> 00:47:27,440
than the hardest drives.
比最难的驱动器更耐用。

564
00:47:27,440 --> 00:47:32,000
Despite of this, the SSDs are winning the war.
尽管如此，固态硬盘（SSD）正在赢得这场战争。

565
00:47:32,000 --> 00:47:34,400
There is little question about that.
这毫无疑问。

566
00:47:34,400 --> 00:47:35,200
And why?
为什么呢？

567
00:47:35,200 --> 00:47:38,600
Because, yes, the hardest drive are cheaper,
因为，是的，最难的驱动器更便宜。

568
00:47:38,600 --> 00:47:39,960
but they are much slower.
但是它们要慢得多。

569
00:47:39,960 --> 00:47:45,040
Sometimes between 10x and 100x consumes much more power,
有时候，10倍到100倍之间的功耗会更高。

570
00:47:45,040 --> 00:47:50,360
very important for data center and mobile devices or laptops.
非常重要的是数据中心和移动设备或笔记本电脑。

571
00:47:50,360 --> 00:47:54,240
And they are less reliable.
而且它们不太可靠。

572
00:47:54,240 --> 00:47:58,200
And these are some projections to drive home
这些是一些用来强调的投影。

573
00:47:58,200 --> 00:48:00,800
that point on the left-hand side.
左侧的那个点。

574
00:48:00,800 --> 00:48:06,520
It's about, you can see different technologies.
这是关于，你可以看到不同的技术。

575
00:48:06,520 --> 00:48:11,000
It is projected up to 2030.
这是预计到2030年的。

576
00:48:11,000 --> 00:48:16,000
And you can have here with dark blue, it's SSDs.
你可以选择这里的深蓝色，它是固态硬盘。

577
00:48:16,000 --> 00:48:18,960
With light blue, it's flash.
用浅蓝色，它闪烁。

578
00:48:18,960 --> 00:48:23,680
So this is USB, the storage in your camera,
这是USB，相机中的存储设备，

579
00:48:23,680 --> 00:48:25,240
and things like that.
等等之类的东西。

580
00:48:25,240 --> 00:48:28,760
And then the yellow, it's actually are tapes.
然后那个黄色的，实际上是磁带。

581
00:48:28,760 --> 00:48:29,960
It's older technology.
这是较旧的技术。

582
00:48:29,960 --> 00:48:32,800
Probably many of you have never seen a tape,
可能你们中的很多人从未见过磁带，

583
00:48:32,800 --> 00:48:33,960
but they are very cheap.
但是它们非常便宜。

584
00:48:33,960 --> 00:48:35,120
That's why.
这就是为什么。

585
00:48:35,120 --> 00:48:38,040
And then, always, the dark orange--
然后，总是，深橙色--

586
00:48:38,040 --> 00:48:41,400
well, with orange, it's actually hardest drives.
嗯，对于橙色来说，实际上是最难的驱动器。

587
00:48:41,400 --> 00:48:50,960
Also, the same study anticipates that in 2026, actually,
同样的研究预测，实际上在2026年，

588
00:48:50,960 --> 00:48:56,080
the SSDs will be cheaper per terabyte than hardest drives.
SSD的每TB价格将比硬盘更便宜。

589
00:48:56,080 --> 00:48:57,800
And that's why probably you are going to see
而这也是为什么你可能会看到的原因

590
00:48:57,800 --> 00:49:03,760
on the left-hand side a point in around 2025
在左侧大约2025年的一个点。

591
00:49:03,760 --> 00:49:11,360
after which the market share of not only of the hardest drive,
之后，不仅是最难的驱动器的市场份额，

592
00:49:11,360 --> 00:49:12,360
it's going to decrease.
会减少。

593
00:49:12,360 --> 00:49:19,800
Networking, still growing very fast.
网络，仍然以非常快的速度增长。

594
00:49:19,800 --> 00:49:23,480
Today, you can have 100-gabits connections
今天，你可以拥有100兆比特的连接速度。

595
00:49:23,480 --> 00:49:27,440
to your machines in AWS.
将您的机器部署在AWS上。

596
00:49:27,440 --> 00:49:31,320
Next will be probably 400-gabits per second.
下一个可能是每秒400个千兆位。

597
00:49:31,320 --> 00:49:33,480
And there are other factors.
还有其他因素。

598
00:49:33,480 --> 00:49:41,040
It's like, for instance, another important aspect
这是，例如，另一个重要的方面。

599
00:49:41,040 --> 00:49:48,240
is the fact that it used to be early on,
这个事实是它过去曾经早期的一个原因，

600
00:49:48,240 --> 00:49:54,640
you have very few huge computers because they
你们有很少的大型计算机，因为它们

601
00:49:54,640 --> 00:49:58,600
are extremely expensive, tens of millions of dollars.
非常昂贵，数千万美元。

602
00:49:58,600 --> 00:50:02,400
So in that case, you have a lot of people
那么在这种情况下，你有很多人。

603
00:50:02,400 --> 00:50:05,640
using the same machine, right?
使用同一台机器，对吗？

604
00:50:05,640 --> 00:50:09,320
Actually, in '60s, if I remember correctly, or '50s,
实际上，在60年代，如果我没记错的话，或者50年代，

605
00:50:09,320 --> 00:50:22,240
when IBM started to build computers, Watson,
当IBM开始建造计算机时，沃森，

606
00:50:22,240 --> 00:50:26,000
who was the founder of the IBM and the CEO,
IBM的创始人和首席执行官是谁？

607
00:50:26,000 --> 00:50:27,680
was saying that he doesn't believe
他说他不相信。

608
00:50:27,680 --> 00:50:32,440
that there is a need for more than five or six computers
需要超过五六台电脑。

609
00:50:32,440 --> 00:50:35,920
in the entire United States.
在整个美国。

610
00:50:35,920 --> 00:50:40,880
And of course, over time, the computers have proliferated,
当然，随着时间的推移，计算机数量不断增加，

611
00:50:40,880 --> 00:50:43,160
become smaller and smaller.
越来越小。

612
00:50:43,160 --> 00:50:46,720
And it used to be probably in 2000s,
而且它可能是在2000年代的时候，

613
00:50:46,720 --> 00:50:50,040
at the end of the previous century,
上个世纪末，

614
00:50:50,040 --> 00:50:53,280
you have one user, one computer.
你有一个用户，一个电脑。

615
00:50:53,280 --> 00:51:01,120
And now you have one user with many, many computers.
现在你有一个用户拥有很多很多台电脑。

616
00:51:01,120 --> 00:51:06,800
If you're in your car alone, you have 10 and 10 of CPUs, right?
如果你一个人在车里，你有10个和10个CPU，对吗？

617
00:51:06,800 --> 00:51:10,160
So this change, and as you can imagine,
所以这个变化，正如你所能想象的，

618
00:51:10,160 --> 00:51:12,160
this also is going to impact the way
这也将影响的方式。

619
00:51:12,160 --> 00:51:15,200
you are going to design the operating systems.
你将要设计操作系统。

620
00:51:15,200 --> 00:51:20,280
And there is another aspect here.
还有另一个方面。

621
00:51:20,280 --> 00:51:28,080
There is an extreme range of timescales.
时间尺度有非常广泛的范围。

622
00:51:28,080 --> 00:51:32,240
This is from Jeff Dean of Google,
这是来自Google的Jeff Dean。

623
00:51:32,240 --> 00:51:35,200
very influential computer scientist,
非常有影响力的计算机科学家

624
00:51:35,200 --> 00:51:37,400
built many of the distributed systems there.
在那里构建了许多分布式系统。

625
00:51:37,400 --> 00:51:44,720
And if you look about from an application and the operating
如果你从一个应用程序和操作系统的角度来看的话，

626
00:51:44,720 --> 00:51:49,760
system, you have to deal with a latency as low as lower
系统，你需要处理尽可能低的延迟。

627
00:51:49,760 --> 00:51:52,320
than one second.
少于一秒钟。

628
00:51:52,320 --> 00:51:53,440
This is L1 cache.
这是L1缓存。

629
00:51:53,440 --> 00:51:56,800
This is a cache which is the first level cache which
这是一个缓存，是第一级缓存。

630
00:51:56,800 --> 00:52:01,040
is on the chip, on chip.
在芯片上，就在芯片上。

631
00:52:01,040 --> 00:52:03,120
And all the way, if you are going
一路上，如果你要去的话

632
00:52:03,120 --> 00:52:07,240
to send a packet to communicate with someone in California
发送一个数据包与加利福尼亚的某人进行通信

633
00:52:07,240 --> 00:52:09,760
to Netherlands, it's what?
去荷兰，是什么？

634
00:52:09,760 --> 00:52:14,280
It's 150 milliseconds.
这是150毫秒。

635
00:52:14,280 --> 00:52:19,120
So you need to handle a scale, a difference in scale,
所以你需要处理一个尺度，一个尺度的差异，

636
00:52:19,120 --> 00:52:26,840
and range of what, eight order of magnitude, more, OK?
和范围是什么，八个数量级以上，对吗？

637
00:52:26,840 --> 00:52:35,840
So basically, let me actually stop here
所以基本上，让我实际上在这里停下来。

638
00:52:35,840 --> 00:52:37,240
and see what are the questions.
然后看看有哪些问题。

639
00:52:37,240 --> 00:52:40,160
[SIDE CONVERSATION]
[侧面对话]

640
00:52:40,160 --> 00:52:53,480
Why does industry Intel Apple say the Moore's Law is not
为什么英特尔和苹果公司都说摩尔定律不再适用？

641
00:52:53,480 --> 00:52:54,000
over?
结束了吗？

642
00:53:01,680 --> 00:53:07,160
So the Moore's Law, from that very definition of the Moore's
摩尔定律，从摩尔定律的定义来看，

643
00:53:07,160 --> 00:53:10,520
Law, it is pretty much over.
法律，基本上已经结束了。

644
00:53:10,520 --> 00:53:13,360
It's physical, right?
是身体的，对吗？

645
00:53:13,360 --> 00:53:17,000
What they say is that--
他们说的是--

646
00:53:17,000 --> 00:53:24,520
what this company is saying, it's fundamentally-- look,
这家公司所说的，从根本上说——看，

647
00:53:24,520 --> 00:53:25,600
if the Moore's Law--
如果摩尔定律--

648
00:53:25,600 --> 00:53:28,520
if you say that the Moore's Law is over,
如果你说摩尔定律结束了，

649
00:53:28,520 --> 00:53:30,680
and I'm building chips, why would you build--
而我正在制造芯片，你为什么要制造——

650
00:53:30,680 --> 00:53:32,680
why you would buy chips from me?
为什么你要从我这里购买薯片呢？

651
00:53:32,680 --> 00:53:34,280
Because this means that the new chips
因为这意味着新芯片

652
00:53:34,280 --> 00:53:37,040
will be the same like the old chips.
将会和旧的芯片一样。

653
00:53:37,040 --> 00:53:40,160
No more power, right?
没有更多的电力了，对吗？

654
00:53:40,160 --> 00:53:46,040
So there is a limit also of this, that I cannot say that
所以这也有一个限制，我不能说

655
00:53:46,040 --> 00:53:49,840
the Moore's Law is over, because the Moore's Law is
摩尔定律已经结束了，因为摩尔定律已经达到了极限。

656
00:53:49,840 --> 00:53:55,160
what the public associate with the performance, right?
公众与表演相关联的是什么，对吗？

657
00:53:55,160 --> 00:53:59,120
So it's a limit of also marketing.
所以这也是市场营销的限制。

658
00:53:59,120 --> 00:54:02,680
The Moore's Law is over, but the Moore's Law
摩尔定律已经结束，但摩尔定律

659
00:54:02,680 --> 00:54:05,280
has a very precise definition.
有一个非常精确的定义。

660
00:54:05,280 --> 00:54:08,400
And these companies, they talk to the public,
这些公司，他们与公众交流，

661
00:54:08,400 --> 00:54:11,480
and the public doesn't know the precise definition.
而公众并不知道确切的定义。

662
00:54:11,480 --> 00:54:14,000
Now, Moore's Law means fast.
现在，摩尔定律意味着快速。

663
00:54:14,000 --> 00:54:16,760
Things become faster and faster.
事情变得越来越快。

664
00:54:16,760 --> 00:54:21,360
Now, in truth, they use a lot of other techniques,
现在，实际上，他们使用了很多其他技术，

665
00:54:21,360 --> 00:54:24,160
and we are going to talk about those in order
我们将按顺序讨论这些事项。

666
00:54:24,160 --> 00:54:28,080
to improve the performance, right?
提高表现，对吗？

667
00:54:28,080 --> 00:54:33,640
And this is very visible in your iPhone or in your Android phone.
这一点在你的iPhone或Android手机上非常明显。

668
00:54:33,640 --> 00:54:36,480
And we'll talk a little bit about how they do it.
然后我们会稍微谈谈他们是如何做到的。

669
00:54:36,480 --> 00:54:39,160
But that is not by improving necessarily
但这并不一定是通过改进来实现的。

670
00:54:39,160 --> 00:54:42,120
the performance of a single core.
单核性能。

671
00:54:42,120 --> 00:54:51,040
It's by adding GPUs, neural engines, adding more cores,
通过添加GPU、神经引擎和更多核心来实现。

672
00:54:51,040 --> 00:54:53,480
things like that.
这样的事情。

673
00:54:53,480 --> 00:54:54,080
OK?
好的。

674
00:54:54,080 --> 00:54:56,160
We'll talk more about it.
我们会进一步讨论这个问题。

675
00:54:56,160 --> 00:54:58,160
But good question.
但是好问题。

676
00:54:58,160 --> 00:55:00,160
So there are programs like Spark and Mavic
所以有像Spark和Mavic这样的程序。

677
00:55:00,160 --> 00:55:05,320
that allow us to use networks or computers to process
这允许我们使用网络或计算机进行处理。

678
00:55:05,320 --> 00:55:06,440
a parallel workload.
一个并行工作负载。

679
00:55:06,440 --> 00:55:08,240
But would it be feasible to create
但是创建这个是否可行呢？

680
00:55:08,240 --> 00:55:10,240
some type of operating system of software
一种操作系统或软件类型

681
00:55:10,240 --> 00:55:14,840
that could string together resources of multiple computers
可以将多台计算机的资源串联起来。

682
00:55:14,840 --> 00:55:16,480
for personal consumer use?
个人消费使用？

683
00:55:20,120 --> 00:55:29,160
I think-- so the question is, is a distributed operating system.
我认为--所以问题是，它是一个分布式操作系统。

684
00:55:29,160 --> 00:55:32,920
I think that there is not a coherent operating system,
我认为目前没有一个连贯的操作系统。

685
00:55:32,920 --> 00:55:36,560
but the elements of a operating system, distributed operating
但操作系统的要素，分布式操作系统

686
00:55:36,560 --> 00:55:39,680
system, are already there.
系统已经存在。

687
00:55:39,680 --> 00:55:42,080
Because one thing you can have, you can have--
因为有一件事情你可以拥有，你可以拥有--

688
00:55:42,080 --> 00:55:44,960
you probably know about Kubernetes.
你可能了解Kubernetes。

689
00:55:44,960 --> 00:55:47,760
Kubernetes provides resource orchestration,
Kubernetes 提供资源编排，

690
00:55:47,760 --> 00:55:52,120
resource management over multiple machines,
多台机器上的资源管理

691
00:55:52,120 --> 00:55:53,840
over a cluster.
在一个集群上。

692
00:55:53,840 --> 00:55:55,600
So that's one.
那就是一个。

693
00:55:55,600 --> 00:56:00,080
Then now, then you have distributed file systems,
然后现在，你有分布式文件系统。

694
00:56:00,080 --> 00:56:06,360
like HDFS, or you have these block stores, like AWS S3.
像HDFS这样的，或者你有这些块存储，像AWS S3。

695
00:56:06,360 --> 00:56:09,680
We'll talk more toward the end of the class.
我们会在课程结束前再多聊一些。

696
00:56:09,680 --> 00:56:11,680
It's a good question.
这是一个好问题。

697
00:56:11,680 --> 00:56:15,960
So probably you should expect that at some point
所以你应该预计在某个时候会发生这种情况

698
00:56:15,960 --> 00:56:20,080
you are going to see these kind of pieces coming together
你将会看到这些部分开始组合在一起。

699
00:56:20,080 --> 00:56:23,240
in a more coherent way in what you could call a distributed
以更连贯的方式，可以称之为分布式的方式。

700
00:56:23,240 --> 00:56:23,960
operating system.
操作系统。

701
00:56:23,960 --> 00:56:40,160
So fundamentally, it's again-- so why things are exciting?
所以从根本上说，为什么事情会令人兴奋呢？

702
00:56:40,160 --> 00:56:42,200
Because they are challenging.
因为它们具有挑战性。

703
00:56:42,200 --> 00:56:44,000
Why are things challenging?
为什么事情会具有挑战性？

704
00:56:44,000 --> 00:56:46,120
Because they are complex.
因为它们很复杂。

705
00:56:46,120 --> 00:56:50,520
And this complexity, it's growing fast.
而且这种复杂性正在迅速增长。

706
00:56:50,520 --> 00:56:52,520
Why is complexity growing?
为什么复杂性在增加？

707
00:56:52,520 --> 00:56:55,560
Because you have the demands of your new application
因为你有新应用的需求

708
00:56:55,560 --> 00:56:57,480
are growing faster than ever.
正在以前所未有的速度增长。

709
00:56:57,480 --> 00:57:01,040
Capabilities of the hardware are no longer
硬件的功能已不再是

710
00:57:01,040 --> 00:57:03,000
growing like they used to be.
不再像过去那样快速增长。

711
00:57:03,000 --> 00:57:06,200
So then you need to add to have--
那么你需要添加的是--

712
00:57:06,200 --> 00:57:08,120
to innovate on the architecture.
创新建筑设计。

713
00:57:08,120 --> 00:57:10,320
You have different specialized chips.
你有不同的专用芯片。

714
00:57:10,320 --> 00:57:13,360
You need to distribute these applications.
你需要分发这些应用程序。

715
00:57:13,360 --> 00:57:16,160
You need to parallelize the programs and many more.
你需要将程序并行化，还有很多其他的事情。

716
00:57:16,160 --> 00:57:23,920
And I'll talk a little more about it.
然后我会再多谈一点关于它的事情。

717
00:57:23,920 --> 00:57:30,800
So and then the applications themselves are more complicated.
所以，这些应用程序本身更加复杂。

718
00:57:30,800 --> 00:57:34,520
The application consists of a variety of software modules.
该应用程序由多个软件模块组成。

719
00:57:34,520 --> 00:57:35,800
And we'll talk more about that.
我们会更详细地讨论这个问题。

720
00:57:35,800 --> 00:57:37,840
But remember, if you--
但是记住，如果你--

721
00:57:37,840 --> 00:57:41,000
almost every application you are using today
几乎你今天使用的每个应用程序

722
00:57:41,000 --> 00:57:44,640
is not running only on your machine.
不仅在你的机器上无法运行。

723
00:57:44,640 --> 00:57:45,360
It has a back end.
它有一个后端。

724
00:57:45,360 --> 00:57:47,040
Use Facebook.
使用Facebook。

725
00:57:47,040 --> 00:57:48,600
A lot of things happen in the back end.
后台发生了很多事情。

726
00:57:48,600 --> 00:57:53,600
Use Google or any other Google applications.
使用谷歌或任何其他谷歌应用程序。

727
00:57:53,600 --> 00:57:56,400
80% is in the back end.
80%是在后端。

728
00:57:56,400 --> 00:57:58,080
Twitter, everything almost, right?
Twitter, 几乎什么都有，对吧？

729
00:57:58,080 --> 00:58:00,520
Netflix, name it, right?
是的，Netflix，没错吧？

730
00:58:00,520 --> 00:58:05,680
And then it has to run on different hardware
然后它必须在不同的硬件上运行。

731
00:58:05,680 --> 00:58:06,400
architectures.
建筑设计。

732
00:58:06,400 --> 00:58:08,920
And because of the Moore's law has ended,
由于摩尔定律的终结，

733
00:58:08,920 --> 00:58:11,400
you are going to have to see a proliferation.
你将会看到一种增加。

734
00:58:11,400 --> 00:58:13,040
You are already seeing a proliferation
你已经看到了一种激增。

735
00:58:13,040 --> 00:58:15,720
of hardware architectures.
硬件架构的研究领域。

736
00:58:15,720 --> 00:58:17,560
Just to give you an example here,
只是给你举个例子，

737
00:58:17,560 --> 00:58:20,320
and it's a personal example.
这是一个个人的例子。

738
00:58:20,320 --> 00:58:24,600
When we started Spark and we started in 2009, so what,
当我们开始创办Spark时，是在2009年，那又怎样呢？

739
00:58:24,600 --> 00:58:27,400
12 years ago, we are focusing only
12年前，我们只关注

740
00:58:27,400 --> 00:58:30,800
for processing data which is in the memory efficiently.
用于高效处理存储在内存中的数据。

741
00:58:30,800 --> 00:58:33,920
We are focusing only on CPUs, right?
我们只专注于CPU，对吗？

742
00:58:33,920 --> 00:58:36,360
It's like we assume that the processing is
这就像我们假设处理是...

743
00:58:36,360 --> 00:58:43,360
done by the general proposed processors, Intel.
由英特尔提出的通用处理器完成。

744
00:58:43,360 --> 00:58:46,680
When we started Ray, which was--
当我们开始Ray的时候，这是-

745
00:58:46,680 --> 00:58:49,000
that was happening like in 2016.
那是发生在2016年的事情。

746
00:58:49,000 --> 00:58:53,440
So it's after only six, seven years.
所以只过了六七年。

747
00:58:53,440 --> 00:58:57,080
We already have to take into account
我们已经必须考虑到

748
00:58:57,080 --> 00:59:00,560
and to design it for heterogeneous hardware
并为异构硬件进行设计。

749
00:59:00,560 --> 00:59:05,400
to handle GPUs at that time, now to handle GPUs and so forth.
在那个时候处理GPU，现在处理GPU等等。

750
00:59:05,400 --> 00:59:07,080
So this is real.
是的，这是真的。

751
00:59:07,080 --> 00:59:11,880
And obviously, this comes with additional complexity.
显然，这会带来额外的复杂性。

752
00:59:11,880 --> 00:59:13,960
And of course, it's once you are over the network,
当然，这是在你连接到网络之后，

753
00:59:13,960 --> 00:59:15,200
you are also exposed to attacks.
你也会受到攻击的威胁。

754
00:59:15,200 --> 00:59:23,320
And this means that because the heterogeneity is increasing
这意味着由于异质性的增加

755
00:59:23,320 --> 00:59:27,760
dramatically, that the operating system becomes
显著地，操作系统变得

756
00:59:27,760 --> 00:59:30,520
even more important because it's much harder
更重要的是，因为它更加困难。

757
00:59:30,520 --> 00:59:34,680
to abstract them away, right?
将它们抽象化，对吗？

758
00:59:34,680 --> 00:59:36,200
Because if you don't abstract away,
因为如果你不进行抽象处理，

759
00:59:36,200 --> 00:59:37,960
it's very hard to write applications.
写应用程序非常困难。

760
00:59:37,960 --> 00:59:40,600
And the operating system is one of the key roles,
而操作系统是其中一个关键角色。

761
00:59:40,600 --> 00:59:43,360
like we discussed, is to make that writing, developing
像我们讨论过的那样，目标是将那篇写作进一步发展。

762
00:59:43,360 --> 00:59:48,800
application very easy, right?
申请非常简单，对吗？

763
00:59:48,800 --> 00:59:53,200
So that's why its operating system are more challenging
所以这就是为什么它的操作系统更具挑战性。

764
00:59:53,200 --> 00:59:55,520
and more needed than ever.
比以往任何时候都更加需要。

765
00:59:55,520 --> 01:00:00,890
Now, we discussed and when we discussed about specialized hardware, I mentioned that it's
现在，我们讨论了一下，当我们讨论专用硬件时，我提到它是...

766
01:00:00,890 --> 01:00:09,670
not only specialized hardware, how people try to go around the more slow or kind of,
不仅仅是专用硬件，人们还尝试绕过更慢或类似的问题。

767
01:00:09,670 --> 01:00:12,190
so to speak, extend in terms of performance.
所谓的，就性能而言，扩展。

768
01:00:12,190 --> 01:00:18,170
In other ways, having more and more cores, even for general proposed processors.
在其他方面，即使对于一般提议的处理器来说，拥有越来越多的核心也是有益的。

769
01:00:18,170 --> 01:00:27,070
Like Intel Xeon Phi has a processor with 64 cores, AMD Epic, the same 64 cores, although
像英特尔骁龙Phi一样，它拥有一个拥有64个核心的处理器，AMD Epic也是一样的，拥有64个核心，尽管如此。

770
01:00:27,070 --> 01:00:32,890
there are rumors that the new version will have 128 cores.
有传言称新版本将拥有128个核心。

771
01:00:32,890 --> 01:00:39,190
And if you look at these processors, actually, they are damn complicated, right?
如果你看这些处理器，实际上，它们真的非常复杂，对吧？

772
01:00:39,190 --> 01:00:41,430
This is how it looks like.
这是它的外观。

773
01:00:41,430 --> 01:00:51,950
You have a bunch of cores, you have cache, you have some other components to manage memory.
你有一堆核心，你有缓存，你有其他组件来管理内存。

774
01:00:51,950 --> 01:01:03,790
You have other components here down to also control the IO, input output, getting the
您在这里还有其他组件，用于控制输入输出（IO）。

775
01:01:03,790 --> 01:01:12,150
data in and out of the processor and reading from the memory, which is not on the chip,
处理器内部的数据进出和从存储器中读取，存储器不在芯片上。

776
01:01:12,150 --> 01:01:15,270
it's off the chip.
它不在芯片上。

777
01:01:15,270 --> 01:01:22,030
And you have also in many systems, you have processor, you have some integrated graphics,
而且在许多系统中，你还有处理器，还有一些集成的图形处理器，

778
01:01:22,030 --> 01:01:23,710
right?
对吗？

779
01:01:23,710 --> 01:01:30,890
And this is a trend which, sorry, if you look under the hood, they are connected.
这是一个趋势，抱歉，如果你仔细观察，它们是相互关联的。

780
01:01:30,890 --> 01:01:36,970
It's like a mini system in miniature, right?
是的，就像一个迷你版的系统一样，对吗？

781
01:01:36,970 --> 01:01:42,790
In this case, you are going to have, this is a core, processor core, and now you are
在这种情况下，你将拥有一个核心，处理器核心，现在你正在使用它。

782
01:01:42,790 --> 01:01:54,510
connected to different IO ports, memory, and many other things, right?
连接到不同的IO端口、内存和许多其他东西，对吗？

783
01:01:54,510 --> 01:01:56,350
And this complexity just increasing.
而且这种复杂性还在不断增加。

784
01:01:56,350 --> 01:02:00,190
So here down is like, it's what we are seeing here, it's another trend.
所以这里下面就像是，我们在这里看到的，是另一种趋势。

785
01:02:00,190 --> 01:02:04,090
It's system on a chip, right?
是的，它是一款系统级芯片，对吗？

786
01:02:04,090 --> 01:02:09,330
And when going back to that question, when Apple say, maybe say Moore's law is not done,
当回到那个问题时，当苹果说，也许说摩尔定律还没有完成时，

787
01:02:09,330 --> 01:02:15,630
this is what they do and how they sustain the increasing performance, again, which is
这是他们所做的以及如何保持不断提高的表现，再次强调，这是他们的方式。

788
01:02:15,630 --> 01:02:18,750
not necessarily related with the Moore's law.
不一定与摩尔定律相关。

789
01:02:18,750 --> 01:02:28,810
It's putting more and more intelligence, more and more functionality on the same chip, right?
是的，它正在将越来越多的智能和功能集成在同一芯片上，对吗？

790
01:02:28,810 --> 01:02:37,010
And here I will show, you have not only CPUs and if CPU have multiple cores, I mean, send
在这里，我将展示给你看，你不仅拥有CPU，而且如果CPU有多个核心，我是说，发送。

791
01:02:37,010 --> 01:02:44,390
or eight between six and 10, but you have GPUs, right?
或者六到十之间的八个，但是你有GPU吗？

792
01:02:44,390 --> 01:02:45,790
Integrated on the same chip.
集成在同一芯片上。

793
01:02:45,790 --> 01:02:48,810
You have eight core GPUs, right?
你有八个核心的GPU，对吗？

794
01:02:48,810 --> 01:02:50,090
Eight core CPUs.
八核心的中央处理器。

795
01:02:50,090 --> 01:02:58,790
And in addition to that, you have neural engine, which is really focused on neural, to sort
而且，你还有神经引擎，它专注于神经网络的排序。

796
01:02:58,790 --> 01:03:04,870
of supporting machine learning workloads, deep neural network workloads, right?
是的，支持机器学习工作负载和深度神经网络工作负载。

797
01:03:04,870 --> 01:03:09,350
This is the things which are like, you know, your fingerprint sensor or recognizing, you
这些东西就像指纹传感器或识别器一样，你知道的。

798
01:03:09,350 --> 01:03:13,450
know, as your face, using your face to unlock the phone, right?
是的，你可以使用你的脸来解锁手机。

799
01:03:13,450 --> 01:03:15,750
Face recognition, right?
人脸识别，对吗？

800
01:03:15,750 --> 01:03:22,570
So that's why, how you are going to get more performance.
所以这就是为什么，你打算如何提高性能。

801
01:03:22,570 --> 01:03:24,470
The code is also very complicated.
这段代码也非常复杂。

802
01:03:24,470 --> 01:03:30,350
It's growing in complexity and I don't have the numbers, more recent numbers, but here
它的复杂性正在增加，我没有最新的数据，但是

803
01:03:30,350 --> 01:03:35,730
is a Vista, this one, you know, 15 years ago, code.
这是一个Vista，你知道的，15年前的代码。

804
01:03:35,730 --> 01:03:36,730
It was what?
这是什么意思？

805
01:03:36,730 --> 01:03:39,430
50 millions code, lines of code.
五千万行代码。

806
01:03:39,430 --> 01:03:42,230
It's huge, huge complexity.
这是巨大的、极其复杂的。

807
01:03:42,230 --> 01:03:47,030
And just to give you a sense, the NASA space shuttle, you know, you remember it was a space
而且只是为了让你有个概念，NASA的航天飞机，你知道的，你还记得它是一个航天飞机。

808
01:03:47,030 --> 01:03:48,030
shuttle.
穿梭机。

809
01:03:48,030 --> 01:03:49,810
It's no longer in service.
它已经停止服务了。

810
01:03:49,810 --> 01:03:50,810
It has what?
它有什么？

811
01:03:50,810 --> 01:03:51,810
I don't know.
我不知道。

812
01:03:51,810 --> 01:03:53,750
One or two millions lines of code.
一到两百万行代码。

813
01:03:53,750 --> 01:03:57,550
It's crazy.
太疯狂了。

814
01:03:57,550 --> 01:04:05,070
And then it's again, like I mentioned several times, you have to scale everyone to, because
然后又是一样的，就像我之前多次提到的那样，你必须对每个人进行衡量，因为

815
01:04:05,070 --> 01:04:11,970
you can no longer do these workloads on a single node, on a single machine, right?
你不能再在单个节点、单个机器上完成这些工作负载了，对吗？

816
01:04:11,970 --> 01:04:14,570
Like I show you the data for machine learning workloads.
我给你展示机器学习工作负载的数据。

817
01:04:14,570 --> 01:04:18,750
The same thing is for big data analytics, scientific computing.
同样的情况也适用于大数据分析和科学计算。

818
01:04:18,750 --> 01:04:24,390
You have, so we have supercomputers, which are parallel computers or in this big computers
你有，所以我们有超级计算机，它们是并行计算机或者说是大型计算机。

819
01:04:24,390 --> 01:04:28,470
since 80s to support this kind of workloads.
自80年代以来，支持这种工作量。

820
01:04:28,470 --> 01:04:30,870
And then on top of that, everything is connected.
而且，除此之外，一切都是相互关联的。

821
01:04:30,870 --> 01:04:32,470
This is the internet.
这是互联网。

822
01:04:32,470 --> 01:04:38,210
Probably the most impressive artifact that humans have created, right?
可能是人类创造的最令人印象深刻的文物，对吧？

823
01:04:38,210 --> 01:04:41,810
It's linked the entire world, right?
是的，它连接了整个世界，对吗？

824
01:04:41,810 --> 01:04:42,810
And it's what?
这是什么？

825
01:04:42,810 --> 01:04:46,190
You have 4.5 billions people connected to the internet.
你有45亿人连接到互联网。

826
01:04:46,190 --> 01:04:49,910
This is what this plot shows, right?
这个图表显示的就是这个，对吗？

827
01:04:49,910 --> 01:04:50,910
And this is what?
这是什么？

828
01:04:50,910 --> 01:04:54,670
It happens only 25 years.
这只发生在25年内。

829
01:04:54,670 --> 01:04:57,870
It's quite amazing.
真是太令人惊叹了。

830
01:04:57,870 --> 01:05:09,470
And then the smartphone shipments exceeded the PC shipments, what I think in 2011.
然后智能手机的出货量超过了个人电脑的出货量，我认为是在2011年。

831
01:05:09,470 --> 01:05:21,070
And today, right, today actually it turns out that you have close to 4 billion smartphones
今天，对吧，今天实际上发现你们拥有接近40亿部智能手机。

832
01:05:21,070 --> 01:05:27,870
and 5 point something billions mobile phones, right?
是的，大约有50多亿部手机，对吗？

833
01:05:27,870 --> 01:05:30,650
This data is a little bit old.
这些数据有点旧了。

834
01:05:30,650 --> 01:05:32,790
And all of those, all the phones are connected.
而且所有这些，所有的手机都已连接。

835
01:05:32,790 --> 01:05:38,390
So you have 4 billion, this kind of very powerful devices at the end of the day, which are connected,
所以你最终拥有了40亿台非常强大的设备，它们都连接在一起。

836
01:05:38,390 --> 01:05:39,390
right?
对吗？

837
01:05:39,390 --> 01:05:41,610
So you have everything.
所以你有一切。

838
01:05:41,610 --> 01:05:43,070
You have a huge range, right?
你们有很大的产品范围，对吗？

839
01:05:43,070 --> 01:05:50,710
You have everything from data center, which hundreds of thousands of computers to sensor
你拥有从数以十万计的计算机到传感器的一切数据中心。

840
01:05:50,710 --> 01:05:53,490
networks, right?
是的，网络。

841
01:05:53,490 --> 01:05:57,150
Which you may not be even able to see these chips, right?
你可能甚至看不到这些芯片，对吗？

842
01:05:57,150 --> 01:06:00,510
And everything in between, right?
对，包括中间的一切，对吗？

843
01:06:00,510 --> 01:06:02,270
And different workloads.
和不同的工作量。

844
01:06:02,270 --> 01:06:10,790
And just to drive home the point and I'll here, so just like I mentioned earlier, many
而且为了强调这一点，我在这里，就像我之前提到的一样，很多...

845
01:06:10,790 --> 01:06:15,710
of the applications you are using today, they are distributed, right?
你今天使用的应用程序都是分布式的，对吗？

846
01:06:15,710 --> 01:06:19,150
Facebook, Twitter, and so forth.
Facebook, Twitter,等等。

847
01:06:19,150 --> 01:06:23,750
And this is what happens under the hood, right?
是的，这就是发生在引擎盖下的情况，对吗？

848
01:06:23,750 --> 01:06:27,390
And let's say you do a simple search, right?
然后假设你进行了一个简单的搜索，对吗？

849
01:06:27,390 --> 01:06:30,990
From your Android 4 or iPhone, right?
是的，我可以从Android 4或iPhone上进行翻译。

850
01:06:30,990 --> 01:06:32,690
What do you do?
你做什么工作？

851
01:06:32,690 --> 01:06:37,790
So first of all, you need to figure out what backend, what servers you need to connect
首先，你需要弄清楚你需要连接哪些后端和服务器。

852
01:06:37,790 --> 01:06:44,430
to, to get, to send the request, your search request, and to get the answer.
去，获取，发送请求，你的搜索请求，以及获取答案。

853
01:06:44,430 --> 01:06:54,350
In order to do that, you need to do this DNS request, domain name service, right?
为了做到这一点，你需要进行这个DNS请求，域名服务，对吗？

854
01:06:54,350 --> 01:06:58,070
And this is, you know, it's like you need to resolve, use this link, right?
这个，你知道的，就是你需要解决的问题，使用这个链接，对吧？

855
01:06:58,070 --> 01:07:03,030
It's google.com to a particular server, right?
是的，它是将google.com发送到特定的服务器，对吗？

856
01:07:03,030 --> 01:07:16,430
So you have an entire domain DNS infrastructure, which consisting of many servers, and they
是的，您拥有一个完整的域名系统（DNS）基础架构，由许多服务器组成。

857
01:07:16,430 --> 01:07:21,070
will cooperate to give you an answer to tell you who you need to connect to, who you need
合作以告诉你需要联系的人，你需要什么答案。

858
01:07:21,070 --> 01:07:22,070
to send the packets.
发送数据包。

859
01:07:22,070 --> 01:07:28,270
Now, so once you get that address, which is an IP address, you are going to send it over
现在，一旦你获得了那个地址，也就是一个IP地址，你就会将它发送出去。

860
01:07:28,270 --> 01:07:29,270
the internet, right?
互联网，对吗？

861
01:07:29,270 --> 01:07:35,110
Over the internet, these packets are going to be routed by switches, routers, and so
通过互联网，这些数据包将会通过交换机、路由器等设备进行路由。

862
01:07:35,110 --> 01:07:36,910
forth.
前进。

863
01:07:36,910 --> 01:07:42,110
And it's going to go, based on the IP address, probably in a data center, they are going
而且根据IP地址来看，它很可能位于一个数据中心，它们正在去的地方。

864
01:07:42,110 --> 01:07:44,690
to land to a load balancer.
将流量导向负载均衡器。

865
01:07:44,690 --> 01:07:50,230
The load balancer, you get the packets, you send to a server, the web server probably.
负载均衡器，你接收数据包，然后将其发送给一个服务器，可能是Web服务器。

866
01:07:50,230 --> 01:07:56,110
The web server is going to look at the request and based on the request, it's going to send,
网络服务器将会查看请求，并根据请求发送。

867
01:07:56,110 --> 01:08:04,030
you know, request an entire other system to resolve that request, right?
你知道，请求一个完全不同的系统来解决那个请求，对吧？

868
01:08:04,030 --> 01:08:07,830
To give you the answers if you have a Google query.
如果你有一个谷歌查询，我可以给你答案。

869
01:08:07,830 --> 01:08:12,950
And obviously, you may also have to get some ads in the process.
显然，你在这个过程中可能还需要一些广告。

870
01:08:12,950 --> 01:08:18,870
You have another infrastructure doing only that, figuring out what ads to show.
你有另一个基础设施专门负责这个，找出要展示哪些广告。

871
01:08:18,870 --> 01:08:23,390
And then you need to put together the entire page and send it back and to be displayed
然后你需要将整个页面组合起来并发送回去以供展示。

872
01:08:23,390 --> 01:08:26,470
on your computer, right?
在你的电脑上，对吗？

873
01:08:26,470 --> 01:08:29,310
So this is just to give you a sense how complicated things are.
所以这只是为了让你了解事情有多复杂。

874
01:08:29,310 --> 01:08:36,150
And all of these interactions are handled by the operating system, right, at the low
是的，所有这些交互都由操作系统处理，对吗，在底层。

875
01:08:36,150 --> 01:08:42,150
level.
水平。

876
01:08:42,150 --> 01:08:45,870
So let me just, we have only five minutes.
好的，让我看看，我们只有五分钟。

877
01:08:45,870 --> 01:08:50,490
So what I'm going to do, I'm going to do the following thing and we are going to continue
那么我要做的是，我要做以下的事情，然后我们会继续。

878
01:08:50,490 --> 01:08:53,310
next time.
下次。

879
01:08:53,310 --> 01:08:58,510
Let me first try to answer some of the questions and then I'm going to go straight to some
让我先试着回答一些问题，然后我会直接进入一些其他的话题。

880
01:08:58,510 --> 01:09:06,350
logistics.
物流。

881
01:09:06,350 --> 01:09:08,870
How low level does this class get?
这个类有多底层？

882
01:09:08,870 --> 01:09:13,090
Do we talk about things like pipelining?
我们是在讨论像流水线这样的事情吗？

883
01:09:13,090 --> 01:09:19,150
We won't talk much about like pipelining, if you are referring at the CPU process, in
我们不会过多讨论流水线技术，如果你指的是CPU的处理过程的话。

884
01:09:19,150 --> 01:09:23,270
the CPU pipelining, like instruction pipelining.
CPU流水线，如指令流水线。

885
01:09:23,270 --> 01:09:24,270
We are not going to talk.
我们不打算谈话。

886
01:09:24,270 --> 01:09:28,910
We are going to talk a little bit about hyper-threading.
我们要稍微谈一下超线程技术。

887
01:09:28,910 --> 01:09:31,730
We are going to talk about that.
我们将要讨论这个。

888
01:09:31,730 --> 01:09:34,410
So we'll answer, so this is about hyper-threading.
所以我们会回答，这是关于超线程的问题。

889
01:09:34,410 --> 01:09:40,310
We are going to talk more about, in short, it's a way in which you can share the core,
我们将会更多地讨论，简而言之，这是一种你可以分享核心的方式。

890
01:09:40,310 --> 01:09:48,790
one core between two threads, which can come from different applications.
一个核心在两个线程之间，这两个线程可以来自不同的应用程序。

891
01:09:48,790 --> 01:09:50,930
So it's multiplexing one core.
所以它是将一个核心进行多路复用。

892
01:09:50,930 --> 01:09:53,130
Okay, so yeah.
好的，是的。

893
01:09:53,130 --> 01:10:03,630
Okay, so let me just skip and obviously we'll do the rest next time and talk a little bit
好的，那么让我跳过一些，显然我们下次会完成剩下的，现在我们聊一下。

894
01:10:03,630 --> 01:10:11,990
here about, more about the class.
这里是关于课程的更多信息。

895
01:10:11,990 --> 01:10:18,430
Okay, syllabus and it's online.
好的，教学大纲已经上传到网上了。

896
01:10:18,430 --> 01:10:19,550
You have the class.
你有课。

897
01:10:19,550 --> 01:10:27,310
So we are going to obviously to learn the operating system concepts and how a system
所以我们显然要学习操作系统的概念以及系统的运行方式。

898
01:10:27,310 --> 01:10:30,770
programmer is going to use these concepts.
程序员将要使用这些概念。

899
01:10:30,770 --> 01:10:36,990
What are the interfaces, APIs, and then we are going to learn about how the operating
什么是接口、API，然后我们将学习操作系统的工作原理。

900
01:10:36,990 --> 01:10:40,790
system implements some of this functionality.
系统实现了部分功能。

901
01:10:40,790 --> 01:10:46,210
Like how is it going to manage concurrency, multiple applications accessing shared resources
并发管理是如何进行的？多个应用程序如何访问共享资源？

902
01:10:46,210 --> 01:10:47,210
at the same time.
同时。

903
01:10:47,210 --> 01:10:53,490
Address space, how you are going to provide isolation between different applications so
地址空间，你将如何在不同应用程序之间提供隔离？

904
01:10:53,490 --> 01:11:00,930
that each one application or process will not step over the memory of another application
每个应用程序或进程都不会超出其他应用程序的内存限制。

905
01:11:00,930 --> 01:11:01,930
or process.
或者处理。

906
01:11:01,930 --> 01:11:09,590
File systems, how you are going to access and store the data and retrieve the data,
文件系统，是指如何访问、存储和检索数据的方式。

907
01:11:09,590 --> 01:11:15,130
send the data and receive the data over the network.
发送数据并通过网络接收数据。

908
01:11:15,130 --> 01:11:21,390
We are going to talk a little bit about distributed systems and the protocols, which are, and
我们要稍微谈一下分布式系统和协议，它们是什么，

909
01:11:21,390 --> 01:11:30,130
the mechanisms which are implemented by distributed systems to make them easier to use and to
分布式系统实施的机制旨在使其更易于使用和管理。

910
01:11:30,130 --> 01:11:32,870
be more efficient.
更高效。

911
01:11:32,870 --> 01:11:36,670
And we are going to talk about reliability and security, fault tolerance protection and
我们将讨论可靠性和安全性，容错保护和

912
01:11:36,670 --> 01:11:39,210
so forth.
等等。

913
01:11:39,210 --> 01:11:42,330
And finally, we are going to talk about a little bit about cloud infrastructure, which
最后，我们要稍微谈一下云基础设施，它

914
01:11:42,330 --> 01:11:48,290
is very relevant because right now, cloud is a de facto standard.
非常相关，因为现在云已经成为事实上的标准。

915
01:11:48,290 --> 01:11:54,770
Many companies are building, especially startups are building their application.
许多公司正在建设应用程序，尤其是初创公司正在建设他们的应用程序。

916
01:11:54,770 --> 01:11:57,290
This class is hands-on.
这个课程是实践性的。

917
01:11:57,290 --> 01:11:59,610
You are going to learn by doing.
你将通过实践学习。

918
01:11:59,610 --> 01:12:03,110
You have a bunch of homeworks and projects.
你有一堆作业和项目。

919
01:12:03,110 --> 01:12:05,650
Projects are extremely important.
项目非常重要。

920
01:12:05,650 --> 01:12:10,510
And with the projects you are going to implement actually also is the homework, some mechanism,
而且你要实施的项目实际上也是作业，一些机制，

921
01:12:10,510 --> 01:12:15,490
some functionality that operating system do.
操作系统的一些功能包括：管理计算机的硬件和软件资源、提供用户界面、调度任务和进程、管理文件和存储、提供网络连接、实施安全措施、处理错误和异常、提供系统服务等。

922
01:12:15,490 --> 01:12:20,830
Like your stress and scheduling, file systems and so forth.
像你的压力和日程安排，文件系统等等。

923
01:12:20,830 --> 01:12:21,830
Memory allocation.
内存分配。

924
01:12:21,830 --> 01:12:26,950
This will be very, very exciting.
这将会非常非常令人兴奋。

925
01:12:26,950 --> 01:12:28,430
Now what are the demands?
现在有什么要求？

926
01:12:28,430 --> 01:12:35,050
The project will require you to be very comfortable with programming and debugging C. So remember,
这个项目需要你对C语言编程和调试非常熟悉。所以记住，

927
01:12:35,050 --> 01:12:42,010
recall pointers, memory management, use GDB for debugging.
回忆指针，内存管理，使用GDB进行调试。

928
01:12:42,010 --> 01:12:49,690
So just go over 61C again.
那就再复习一下61C吧。

929
01:12:49,690 --> 01:12:55,250
And you need to know how to use Git for version control.
你需要知道如何使用Git进行版本控制。

930
01:12:55,250 --> 01:12:59,170
And there is a C programming reference here if you need.
如果你需要的话，这里有一个C编程的参考资料。

931
01:12:59,170 --> 01:13:04,970
So please consult that.
所以请咨询一下。

932
01:13:04,970 --> 01:13:09,810
I think the first two sections are dedicated to programming and debugging reviews.
我认为前两个部分是关于编程和调试的评论。

933
01:13:09,810 --> 01:13:12,570
So please attend these sections.
所以请参加这些部分。

934
01:13:12,570 --> 01:13:15,810
And you can attend any two section, I believe, for the first two weeks.
你可以参加任意两个部分，我相信，在前两周内。

935
01:13:15,810 --> 01:13:19,930
After that, you need to choose one section.
之后，你需要选择一个部分。

936
01:13:19,930 --> 01:13:30,170
The other thing I want to say, and to be quick here, but also I want to emphasize that projects
另外一件我想说的事情，希望能够快点说完，但我也想强调的是项目

937
01:13:30,170 --> 01:13:31,170
are very important.
非常重要。

938
01:13:31,170 --> 01:13:35,490
And projects are not only about doing a piece of software and building a piece of software,
而项目不仅仅是关于开发和构建软件，

939
01:13:35,490 --> 01:13:41,050
a project about teaching you how to collaborate, how to work in a team.
一个关于教你如何合作、如何在团队中工作的项目。

940
01:13:41,050 --> 01:13:43,290
This will be extremely important for you.
这对你来说将非常重要。

941
01:13:43,290 --> 01:13:49,770
If you go and to be a software engineer, this is a key skill you need to learn.
如果你选择成为一名软件工程师，这是你需要学习的关键技能。

942
01:13:49,770 --> 01:13:53,050
You are going to learn to work in a team.
你将学会在团队中工作。

943
01:13:53,050 --> 01:13:57,870
You need to make the team successful because that's how you are going to become successful.
你需要让团队成功，因为这样你才能够变得成功。

944
01:13:57,870 --> 01:14:00,370
You are not going to work alone.
你不会独自工作。

945
01:14:00,370 --> 01:14:09,050
We require the project to have four members, number five.
我们要求项目有四个成员，第五个。

946
01:14:09,050 --> 01:14:12,290
And the exception will be very rare.
而且例外情况将非常罕见。

947
01:14:12,290 --> 01:14:15,090
Please, this is pandemic, still pandemic.
请注意，这是一场大流行病，仍然是一场大流行病。

948
01:14:15,090 --> 01:14:17,010
It's very hard.
非常困难。

949
01:14:17,010 --> 01:14:19,730
Most of the activities will be online.
大部分活动将在线进行。

950
01:14:19,730 --> 01:14:23,170
If you do online, turn the camera on.
如果你在线上，打开摄像头。

951
01:14:23,170 --> 01:14:26,870
Try to emulate the physical presence as much as possible.
尽可能地模拟真实的存在感。

952
01:14:26,870 --> 01:14:30,530
But also now you can also, the campus is open.
但现在你也可以，校园已经开放了。

953
01:14:30,530 --> 01:14:34,930
You know, if you feel comfortable, you can go and meet in person.
你知道，如果你感觉舒服的话，你可以去见面。

954
01:14:34,930 --> 01:14:38,590
But collaborate, collaborate, collaborate.
但是合作，合作，合作。

955
01:14:38,590 --> 01:14:45,130
And also not only between you and your members of the team, but also your TA.
还有不仅仅是你和你的团队成员之间，还有你的助教。

956
01:14:45,130 --> 01:14:51,490
Overcommunication is how you make this project successful.
过度沟通是使这个项目成功的方式。

957
01:14:51,490 --> 01:14:58,070
Then you need to devise the work among the members of the team to require both decision
然后你需要将工作分配给团队成员，需要他们做出决策。

958
01:14:58,070 --> 01:15:03,310
and additional collaboration because you are going to depend on the work of other people
并且需要额外的合作，因为你将依赖其他人的工作。

959
01:15:03,310 --> 01:15:06,150
do in your team.
你在你的团队中做什么？

960
01:15:06,150 --> 01:15:11,070
This is a grading, 36% is for three midterms.
这是一个分数评定，36%是三次期中考试的成绩。

961
01:15:11,070 --> 01:15:13,870
We have only midterms, no final.
我们只有期中考试，没有期末考试。

962
01:15:13,870 --> 01:15:23,690
36% projects, 80% homework, 10% participation, section, lectures, and so forth.
36%的项目，80%的作业，10%的参与度，小组讨论，课堂讲座等等。

963
01:15:23,690 --> 01:15:25,050
You'll hear more about the project.
你会听到更多关于这个项目的消息。

964
01:15:25,050 --> 01:15:27,570
You'll have a design document.
你将会有一个设计文档。

965
01:15:27,570 --> 01:15:28,570
Design document will be due.
设计文档将到期。

966
01:15:28,570 --> 01:15:33,290
You are going to get feedback from the TAs and so forth.
你将会从助教等人那里得到反馈。

967
01:15:33,290 --> 01:15:35,390
Books and infrastructures.
书籍和基础设施。

968
01:15:35,390 --> 01:15:37,530
You should be able to find all the information.
你应该能够找到所有的信息。

969
01:15:37,530 --> 01:15:39,930
There's a class web page.
有一个班级网页。

970
01:15:39,930 --> 01:15:40,930
There is a Piazza.
有一个Piazza。

971
01:15:40,930 --> 01:15:44,150
You find the link to the Piazza as well there.
你可以在那里找到Piazza的链接。

972
01:15:44,150 --> 01:15:46,150
The lectures will be recorded.
这些讲座将会被录制下来。

973
01:15:46,150 --> 01:15:51,270
Yeah, sorry about today, about the beginning of the lecture.
是的，对不起，对于今天，对于讲座的开始。

974
01:15:51,270 --> 01:15:59,070
The textbook is the operating system principles and practice from Tom Anderson and Mike Dalin.
这本教科书是由Tom Anderson和Mike Dalin撰写的操作系统原理与实践。

975
01:15:59,070 --> 01:16:02,350
And there are a few other books, very good.
还有几本其他的书，非常好。

976
01:16:02,350 --> 01:16:09,950
And you are encouraged to consult and you can refer to.
你被鼓励咨询和参考。

977
01:16:09,950 --> 01:16:14,890
And we are going to have a few supplemental materials, a few research papers and so forth.
我们还会提供一些补充材料，一些研究论文之类的。

978
01:16:14,890 --> 01:16:17,250
We are going to let you know.
我们会通知你。

979
01:16:17,250 --> 01:16:24,970
Finally, please, it's like, this is not a joke.
最后，请，请，就像，这不是一个笑话。

980
01:16:24,970 --> 01:16:29,550
Personal integrity, you signed the UCB Academy Honor Code.
个人诚信，您已签署了UCB学院的荣誉守则。

981
01:16:29,550 --> 01:16:36,050
So please live by it.
那么请按照这个原则生活。

982
01:16:36,050 --> 01:16:38,690
You can explain the concept of other people in the group.
你可以解释一下群体中其他人的概念。

983
01:16:38,690 --> 01:16:41,190
You can discuss the concept with other people on the group.
你可以在群组中与其他人讨论这个概念。

984
01:16:41,190 --> 01:16:45,190
You can even help your friend to debug your code, the code.
你甚至可以帮助你的朋友调试你的代码，这段代码。

985
01:16:45,190 --> 01:16:48,750
Or you can search online for generic codes.
或者你可以在网上搜索通用代码。

986
01:16:48,750 --> 01:16:53,430
This is good, but you cannot share the code with other groups.
这是很好的，但是你不能与其他组分享代码。

987
01:16:53,430 --> 01:16:58,830
You cannot copy or read another group's code or test cases.
你不能复制或阅读其他小组的代码或测试用例。

988
01:16:58,830 --> 01:17:08,210
You cannot copy or reading online code or test cases from prior years.
你不能复制或阅读以往年份的在线代码或测试用例。

989
01:17:08,210 --> 01:17:12,990
And we are going, as you know that, we compare all project submission against prior year
我们会进行比较，正如你所知道的，我们会将所有项目提交与去年进行对比。

990
01:17:12,990 --> 01:17:18,790
submissions and online solutions and will take actions right against your funder.
提交和在线解决方案，并将采取行动对付您的资助者。

991
01:17:18,790 --> 01:17:20,590
So please don't do that.
所以请不要这样做。

992
01:17:20,590 --> 01:17:27,950
It's not going to help you with learning.
这不会帮助你学习。

993
01:17:27,950 --> 01:17:30,990
That's probably the most important reason you shouldn't do it.
那可能是你不应该做的最重要的原因。

994
01:17:30,990 --> 01:17:36,510
Let's try hard to make this class and to keep this class interactive.
让我们努力使这堂课变得有趣并保持互动。

995
01:17:36,510 --> 01:17:37,790
And I'm going to stop here.
我要在这里停下来。

996
01:17:37,790 --> 01:17:42,830
I'm going to take it about the talk, obviously, a little bit more about the operating system
我将要谈一下，显然，更多关于操作系统的内容。

997
01:17:42,830 --> 01:17:45,290
general overview next time.
下次请给一个总体概述。

998
01:17:45,290 --> 01:17:51,710
And now let me answer the questions which are still here.
现在让我来回答这些仍然存在的问题。

999
01:17:51,710 --> 01:17:56,090
So there are two other questions.
所以还有两个其他问题。

1000
01:17:56,090 --> 01:17:58,130
There is actually one last question.
实际上还有一个最后的问题。

1001
01:17:58,130 --> 01:18:01,910
Will it be good to review material of the later half of 6.1c like cache?
对于复习6.1c后半部分的内容，比如缓存，会有好处吗？

1002
01:18:01,910 --> 01:18:03,790
Yes, absolutely.
是的，绝对没问题。

1003
01:18:03,790 --> 01:18:05,870
Components of the CPU, how much of this?
CPU的组成部分，有多少种？

1004
01:18:05,870 --> 01:18:06,870
Yes, absolutely.
是的，绝对可以。

1005
01:18:06,870 --> 01:18:08,590
This will be very useful.
这将非常有用。

1006
01:18:08,590 --> 01:18:10,230
We are going to talk about caching.
我们将要讨论缓存。

1007
01:18:10,230 --> 01:18:16,450
We are going to talk and reviewing that it will be so useful.
我们将要讨论和回顾，这将会非常有用。

1008
01:18:16,450 --> 01:18:19,710
How does participation grading work?
参与度评分是如何工作的？

1009
01:18:19,710 --> 01:18:29,530
This will be mostly because it will be smaller groups from interacting with your TAs, office
这主要是因为与您的助教、办公室互动的小组会更小。

1010
01:18:29,530 --> 01:18:33,070
hours and discussion sections.
小时和讨论部分。

1011
01:18:33,070 --> 01:18:38,270
I am, at the size of this class, I don't think I will have the opportunity to interact with
我在这个班级的规模下，我觉得我不会有机会与其他人互动。

1012
01:18:38,270 --> 01:18:41,310
many of you, especially since we are remote.
你们中的很多人，尤其是因为我们是远程的。

1013
01:18:41,310 --> 01:18:46,150
But obviously, if you have any problem, anything, please do not hesitate to drop me an email
但是显然，如果你有任何问题，任何事情，请不要犹豫给我发邮件。

1014
01:18:46,150 --> 01:18:47,670
and you can look for me.
你可以找我。

1015
01:18:47,670 --> 01:18:55,890
I'll be in soda, soda hall, at least now and then.
我会在苏打大厅，至少偶尔会去。

1016
01:18:55,890 --> 01:18:59,430
So thank you so much, everyone.
非常感谢大家。

1017
01:18:59,430 --> 01:19:03,710
And I'll see you next Tuesday.
我下周二见你。

1018
01:19:03,710 --> 01:19:08,910
And if you have any other questions, please ask the questions.
如果你有任何其他问题，请提出来。

1019
01:19:08,910 --> 01:19:14,550
And if you also have any other suggestions about how to make the class better, more interactive,
如果你还有关于如何让课堂更好、更互动的其他建议，

1020
01:19:14,550 --> 01:19:16,870
please do not hesitate to let us know.
请不要犹豫，告诉我们。

1021
01:19:16,870 --> 01:19:24,550
It's again, the first time I'm using the webinar and it's not a lot of, you know, it's hard
这是我第一次使用网络研讨会，而且并不是很顺利，你知道的，很困难。

1022
01:19:24,550 --> 01:19:31,030
to just talk at the screen and see the slide, not see any of your faces.
只是在屏幕上讲话，看幻灯片，不看你们的任何面孔。

1023
01:19:31,030 --> 01:19:35,670
So but, you know, let's try to do our best.
所以，你知道的，让我们尽力而为吧。

1024
01:19:35,670 --> 01:19:42,190
And yeah, any idea you see, you have to improve interactivity, to improve the class in general,
而且，你看到的任何想法，都需要提高互动性，以改善整个课堂。

1025
01:19:42,190 --> 01:19:43,190
let us know.
让我们知道。

1026
01:19:43,190 --> 01:19:43,310
Thank you.
谢谢你。

1027
01:19:43,310 --> 01:20:09,310
[ Applause ]
[鼓掌]

